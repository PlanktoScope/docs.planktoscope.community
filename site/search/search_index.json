{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PlanktoScope Documentation","text":"<p>Welcome to the documentation for the PlanktoScope project! Here are some quick links to help you navigate the documentation depending on what you what you want to do:</p> <ol> <li>\"I want to get a PlanktoScope!\"</li> <li>\"I want to learn how to operate a PlanktoScope!\"</li> <li>\"I want to fix something which isn't working on my PlanktoScope!\"</li> <li>\"I want to get involved in the PlanktoScope community!\"</li> <li>\"I want to study the design of the PlanktoScope!\"</li> </ol>"},{"location":"#what-is-planktoscope","title":"What is PlanktoScope?","text":"<p>Plankton are living things which drift with the water currents in our world's oceans, rivers, and lakes. Lots of plankton are very small - so small that we need tools called microscopes in order for us to see them. One type of plankton is phytoplankton: plant-like plankton which take a huge amount of carbon dioxide from the air and become the food for all other life in the water - like the grasses of the sea. Because of this, plankton are very important to the health of our planet.</p> <p>But there\u2019s still a lot we don\u2019t know about what\u2019s happening with groups of plankton and how they\u2019re changing: most tools would be too hard and expensive for us to use to get much detail about how every group of plankton is changing across an entire ocean. If we can make tools which give detailed information and which everyone can use - everywhere, all the time - then we can learn more about how the oceans will change because of things people and companies are doing.</p> <p>The PlanktoScope is a low-cost, open-source, and portable microscope designed to take detailed photos of tiny plankton from lots of water, so that we can count the different kinds of plankton in the water.</p> <p></p>"},{"location":"#what-is-the-planktoscope-project","title":"What is the PlanktoScope project?","text":"<p>The PlanktoScope project is a community project to develop the PlanktoScope as a tool and to help people use it for a variety of purposes around the world. It is part of a broader movement toward making scientific tools more accessible and affordable, while also empowering citizen scientists, educators, and researchers to study and monitor aquatic ecosystems.</p>"},{"location":"#who-are-planktoscopes-for","title":"Who are PlanktoScopes for?","text":"<p>We want the PlanktoScope to be a tool which is easy to use for anyone who's interested in the tiny things which live in our oceans, and for anyone who cares about the health of our oceans - not just scientists, but also sailors, marine farmers, makers, fishing communities, and students. However, we still need to make many improvements to the PlanktoScope in order to reach this goal. Most of the people who currently enjoy using PlanktoScopes have some experience with using microscopes, a tolerance for handling software problems, and a sense of adventure for trying out new technologies which are still in development.</p> <p>We also want PlanktoScopes to be easy to use for people around the world. Currently, the PlanktoScope software's user interface and documentation are all in English; we will need software and translation help to support other languages. The PlanktoScope community mainly works in English, though we also have active community members whose primary languages are French and Japanese.</p> <p>We are excited about the possibility of using PlanktoScopes for measuring things besides plankton - for example, counting and identifying microplastics, or monitoring suspended cell cultures, or even detecting parasites in certain diseases. However, we have not yet developed or assessed the PlanktoScope as a tool which people could use for these other purposes.</p> <p>If you want to help to improve the PlanktoScope, to build a PlanktoScope community in a non-English language, or to explore new uses for PlanktoScopes, please get involved in our global community!</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This FAQ has been compiled to answer common questions about the PlanktoScope project and how you can get involved. We hope you find it useful and we look forward to working with you to advance our knowledge of the oceans!</p>"},{"location":"faq/#can-i-purchase-a-planktoscope","title":"Can I purchase a PlanktoScope?","text":"<p>You can purchase a PlanktoScope - either as a kit of parts to assemble yourself or as a fully preassembled device - from a small business called FairScope, which was started by the inventor of the PlanktoScope in order to make PlanktoScopes easier to obtain. For more information, please refer to our page on how to obtain a PlanktoScope.</p>"},{"location":"faq/#where-do-i-get-support-or-find-the-necessary-tools-to-build-planktoscope","title":"Where do I get support or find the necessary tools to build PlanktoScope?","text":"<p>To find the necessary tools and knowledge to produce the PlanktoScope, consider visiting a Fablab or Hackspaces in your region. These organizations often have a culture of openness and may be willing to support you with your project.</p> <p>And if you have specific questions or problems, you can always report them in the Slack Channel and in the best case you will find someone there who can support you.</p>"},{"location":"community/","title":"The PlanktoScope Community","text":"<p>PlanktoScope is a completely open platform. The core of the PlanktoScope project is a basis in an evolving network of designers and users collaborating to increase the impact and availability of the tools. Building a community of users will enable PlanktoScope to grow with capabilities not yet imagined.</p> <p>For around $800, and with parts freely available in most parts of the globe, any person with the desire to engage can begin building a PlanktoScope. This website contains the information needed to assemble, test, and begin collecting data on your PlanktoScope.</p>"},{"location":"community/#engage-on-github","title":"Engage on GitHub","text":"<p>Feel free to visit the GitHub and engage if you want.</p> <p></p> <p>GitHub is a web-based platform that is widely used in the PlanktoScope Community for version control and collaboration. It allows members to easily share, track, and manage code and other project files. The platform is built around the Git version control system, which allows multiple contributors to work on the same codebase simultaneously while keeping a record of every change made.</p> <p>In the PlanktoScope Community, members can use GitHub to collaborate on the development of the Planktoscope project. They created a central repository where they can share and track the code, documentation, and other project files.</p>"},{"location":"community/#chat-on-slack","title":"Chat on Slack","text":"<p>The community is using Slack to communicate.</p> <p></p> <p>Slack is a communication and collaboration tool that is widely used in the PlanktoScope Community. It allows members to communicate and work together in real-time, providing a central hub for all conversations related to Planktoscope project. The platform offers features such as direct messaging, group channels, video conferencing, and file sharing, making it easy for members to stay informed and on the same page.</p> <p>The PlanktoScope community has created a dedicated Slack workspace for the community members to share their findings, ask for help, and discuss project-related topics.</p>"},{"location":"community/#classify-on-ecotaxa","title":"Classify on EcoTaxa","text":"<p>To join EcoTaxa, you just need to create an account.</p> <p></p> <p>EcoTaxa is a web-based platform that enables researchers, educators, and citizen scientists to identify, classify and share images of microorganisms. The platform is designed to support biodiversity research and education by providing a user-friendly interface for browsing and analyzing images of microorganisms, as well as a collaborative environment for sharing images and data. EcoTaxa allows users to upload their own images, and the platform's machine learning algorithms can automatically identify and classify the organisms in the images.</p> <p>The platform also offers a variety of tools for analyzing and visualizing data, including image annotation, statistical analysis, and data export. Additionally, EcoTaxa has a community feature where researchers can share their findings, and have a discussion on the data, and contribute to the knowledge base. Overall, EcoTaxa is a valuable resource for anyone interested in microorganism biodiversity research and education.</p>"},{"location":"community/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"community/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"community/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"community/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at &lt; thibaut at fairscope.com &gt; . All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"community/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"community/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"community/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"community/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"community/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"community/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"community/license/","title":"Our work is fully open source","text":"<p>That's the headline, yes.</p>"},{"location":"community/license/#hardware-files","title":"Hardware files","text":"<p>We released our hardware files (everything in the <code>hardware</code> directory) under a CERN OHL-S license.</p>"},{"location":"community/license/#software-source","title":"Software source","text":"<p>Our source code (everything in the directories <code>flows</code> and <code>scripts</code>) is released under a GPL-3.0 license.</p>"},{"location":"community/license/#everything-else-documentation-pictures-etc","title":"Everything else (documentation, pictures, etc...)","text":"<p>Everything else is released under a Creative Commons CC-BY-SA license.</p>"},{"location":"community/trainings/","title":"Trainings","text":"<p>The success of the PlanktoScope community depends on the people who generously share their knowledge and expertise about its production and use with others, helping to promote its widespread adoption and use. By actively participating in the community and sharing their insights and experiences, individuals can contribute to the growth and success of the PlanktoScope, ultimately benefiting not just the community but also the broader field of study.</p>"},{"location":"community/trainings/#the-train-the-trainer-program","title":"The Train the trainer program","text":"<p>The train the trainer program is a training program designed to equip individuals with the knowledge and skills needed to deliver training to others. The goal of a train the trainer program is to build capacity within the PlanktoScope community by volunteers to become trainers themselves.</p> <p>This guide is intended to provide you with a solid foundation of knowledge and understanding about the PlanktoScope, enabling you to confidently develop and deliver your own training program for others. Whether you are an experienced user looking to share your expertise with others or a newcomer to the PlanktoScope looking to learn more about its capabilities and applications, this guide is designed to help you gain the necessary skills and knowledge to successfully teach others about this powerful tool.</p>"},{"location":"community/trainings/#event-types","title":"Event types","text":""},{"location":"community/trainings/#build-workshop","title":"Build workshop","text":"<p>Organizing a build workshop can be a challenging but rewarding experience. It requires careful planning and execution to ensure that the workshop is successful. This trainer manual is designed to guide you through the process of organizing a build workshop.</p>"},{"location":"community/trainings/#selecting-the-production-site","title":"Selecting the production site","text":"<p>Choosing the right production site for preparing and manufacturing the PlanktoScope Kits is an important step in the workshop planning process. The production site should have the necessary tools and equipment, as well as the knowledge and expertise to manufacture the PlanktoScope Kits. Here are a few things to consider when choosing a production site:</p> <ol> <li>Check the Manufacturing and Assembly Guides: Before choosing a production site, make sure to review the PlanktoScope Kit Manufacturing Guide and the Device Assembly Guide. These guides will provide detailed information on the necessary tools and equipment required for the production of the PlanktoScope Kits.</li> <li>Visit Fablab and Hackspaces: Consider visiting Fablabs or Hackspaces in your region. These organizations often have a culture of openness and may be willing to support you with your project. They may have the necessary tools and equipment to produce the PlanktoScope Kits, as well as the knowledge and expertise to guide you through the production process.</li> <li>Commercial Manufacturing: Look for a facility that has the capability to handle small scale production runs, a good quality control process and a logistic plan to ship the product to the final destination. Many</li> </ol> <p>Tip</p> <p>For the PlanktoScope case, for example, you can look for woodworking companies. They often have a CNC machine and are familiar with the process of ditigal production.</p>"},{"location":"community/trainings/#material-procurement","title":"Material procurement","text":"<p>Building a PlanktoScope requires a specific set of materials. In order to ensure that the workshop runs smoothly and that all attendees are able to successfully build their own PlanktoScope, it is important to properly plan and execute the procurement of materials. The following is a step-by-step guide on how to properly plan and execute the procurement of materials for a workshop:</p> <ol> <li>Prepare the order list: Use the bill of materials (BOM) as a starting point to create a comprehensive list of all materials needed for the workshop. Expand it with additional columns for suppliers, delivery dates, prices, shipping costs, and import taxes.</li> <li>Plan for packaging: Plan for extra packaging so you can assemble the parts as shown in the instructions. Try to minimize plastic as much as possible.</li> <li>Research suppliers: Research suppliers and see if there are local options, if you can consolidate orders to save costs and ensure timely delivery.</li> <li>Compare prices: Compare the prices of different suppliers to minimize the total cost.</li> <li>Plan for spare parts: Plan for spare parts in case something is broken or lost.</li> <li>Check your Budget: Check your budget and ensure that you have enough funds to cover the cost of all materials, shipping, and any additional expenses before placing your orders.</li> <li>Place orders: Once you have identified the best suppliers, place orders for all of the materials that you need. Be sure to factor in lead time when placing orders to ensure that the materials will arrive in time for the workshop.</li> <li>Track orders: Keep track of your orders and expected delivery dates, mark a component when it arrives. Contact suppliers if there are any delays or problems with delivery.</li> <li>Communicate: Communicate with participants if there are issues with timely delivery. It may make sense to postpone the workshop if there is not enough time to prepare and test everything. The participants will be grateful and will understand if it helps to ensure that everything runs smoothly.</li> </ol> <p>By following this process, you can ensure that all materials are procured and organized well in advance of the workshop, to avoid any last-minute delays or complications.</p> <p>Note</p> <p>If you have difficulty finding the components you need, contact us and we will be happy to help you find the right alternative.</p> <p>Warning</p> <p>Have a backup plan and be prepared for unexpected events that may occur during the procurement process. Allow two months for delivery, as some specialty parts may travel a long way and require additional time for customs inspection.</p> <p>Tip</p> <p>Let us know your results, we would love to hear what solutions you found and how cost effective you were able to make the PlanktoScope.</p>"},{"location":"community/trainings/#prepare-the-kit","title":"Prepare the Kit","text":"<p>Kit preparation for the workshop is an important step in the preparation process. This ensures that participants have the materials and equipment they need to complete the workshop and build their own PlanktoScope. Here are a few things to keep in mind when preparing the kits:</p> <ol> <li>Review the Bill of Materials (BOM): Review the Bill of Materials (BOM) for the PlanktoScope to ensure that you have all the necessary parts and materials for the workshop. The parts list can be found in the Device Assembly Guide and lists all components and quantities needed to build a microscope.</li> <li>Divide the kit components according to the BOM: Once the materials have been received, divide the kit components from the orders according to the Bill of Materials (BOM) of the PlanktoScope. This will ensure that each participant receives the correct components and that there are no missing parts.</li> <li>Have extra components: Have extra components on hand in case of any missing or damaged parts during the workshop.</li> <li>Package the kits: Package the kits in a way that makes it easy for the participants to find and use the components during the workshop.</li> <li>Label materials: Label the packages as described in Device Assembly Guide so that they are easy to find and distribute during the workshop.</li> <li>Preparation of the housing parts: Prepare the housing parts by applying the surface sealant and insert the nuts to screw the housing as described in the Kit Manufacturing Guide.</li> <li>Cutting and soldering of electronic cables: Cut and solder the electronic cables for the PlanktoScope. This will save time during the workshop and ensure that the participants have all the necessary cables to complete the assembly.</li> <li>Setting up the embedded development environment: Set up the embedded development environment and flash the eeprom of the PlanktoScope hat. This will ensure that the PlanktoScope hat is ready to be used during the workshop.</li> <li>Download the Raspberry Pi image: Download the Raspberry Pi image and flash it to the SD card. This will ensure that the participants have a ready to use image for the PlanktoScope.</li> <li>Test the kits: Test the kits before the workshop to ensure that all components are working correctly and that the instructions are clear and easy to follow. This will help to ensure that the participants have a positive and productive experience during the workshop.</li> </ol> <p>Tip</p> <p>Identify any items that are time consuming during the workshop and not particularly important or complex to explain. These tasks can be completed in advance to save time during the workshop. This will make it easier for the participants to assemble the PlanktoScope during the workshop.</p>"},{"location":"community/trainings/#conducting-the-workshop","title":"Conducting the workshop","text":"<p>It's finally here! After all the planning, preparation, and anticipation, the build workshop is about to begin. Take a deep breath and let's go!</p> <ol> <li>Prepare the presentation: Prepare the presentation device and start your slides.</li> <li>Check-In: Once the Participants arrive, complete the check-in, share the agenda and set expectations for the workshop.</li> <li>Venue: Provide information about the venue, including where to find restrooms and where to buy food.</li> <li>Digital tools: Provide information about the digital tools that will be used during the workshop, such as the platform for collaboration, the survey tool and the chat channel, and how to access them.</li> <li>Data privacy: Inform about the privacy policy and the forms that need to be signed by the participants if you want to take photos.</li> <li>Introduction round: Begin with a round of introductions and give everyone a chance to introduce themselves, their background, and their interest in the project.</li> <li>Provide an overview: Provide details about the project, including the general mode of operation, the working materials such as the kit, the documentation and the git repository.</li> <li>Provide the Kits and Tools: Provide the Kit and Tools to each participant with a kit and the necessary tools.</li> <li>Follow the build instructions: Depending on the format you have chosen, start implementing by following the Kit Manufacturing guide or Device Assembly guide</li> <li>Follow the operation instructions: Now that you have successfully assembled the PlanktoScope, you can proceed to operation of the PlanktoScope by following the Getting started and User interface instructions.</li> <li>Final Test: For a final test you can use for example pure cultures or a sample taken with a Plankton net from a surrounding waters.</li> </ol>"},{"location":"community/trainings/#field-trip","title":"Field trip","text":"<p>Are you an expert in organizing field trips? Share your skills with the PlanktoScope community by documenting the process! By documenting how you organize a field trip, you can help others create successful events and bring more event options to the PlanktoScope community. Your documentation will be a valuable resource for anyone looking to plan a field trip, and it will also help to grow and strengthen the PlanktoScope community. Don't miss this opportunity to contribute to the community, start documenting your process today!</p>"},{"location":"community/trainings/#hackathon","title":"Hackathon","text":"<p>Are you a master at organizing Hackathons? Share your knowledge with the PlanktoScope community by documenting the process! By documenting how you organize a Hackathon, you can help others create successful events and bring more event options to the PlanktoScope community. Your documentation will be a valuable resource for anyone looking to host a Hackathon, and it will also help to grow and strengthen the PlanktoScope community. Don't miss this opportunity to contribute to the community, start documenting your process today!</p>"},{"location":"community/trainings/#general-planning-methods","title":"General planning methods","text":"<p>Organizing a workshop can be a challenging but rewarding experience. It requires careful planning and execution to ensure that the workshop is successful. This trainer module is designed to guide you through the process of organizing any type of event.</p> <p>By following the guidelines, you will be able to plan a workshop that is engaging, productive, and successful. It will also help you to create a sense of community among participants and will help them continue their learning after the workshop.</p>"},{"location":"community/trainings/#building-a-team","title":"Building a team","text":"<p>Every project needs a team to support it. The team should be composed of individuals with a diverse set of skills and experiences to ensure all aspects of the workshop are effectively covered.</p> <ol> <li>Identify the roles and responsibilities: Determine the key areas that need to be covered during the workshop and assign specific roles to team members. For example, one team member may be responsible for organizing logistics, while another may be responsible for creating the agenda.</li> <li>Assemble the team: Once the roles and responsibilities have been identified, begin assembling the team. Consider individuals with relevant skills and experiences, as well as those who have a passion for the topic of the workshop. It is also important to have a mix of team members from different departments or backgrounds to bring a variety of perspectives to the planning process.</li> <li>Communicate effectively: Establish clear lines of communication within the team to ensure that everyone is on the same page. This can be done through regular meetings, email, or a team collaboration platform.</li> <li>Encourage participation: Encourage team members to actively participate in the planning process by sharing their ideas and feedback. This will help to ensure that everyone feels invested in the success of the workshop.</li> <li>Appoint a leader: Appoint a leader for the team who will be responsible for coordinating the planning process and ensuring that the team stays on track. The leader should be someone who is organized, a good communicator, and able to delegate tasks effectively.</li> </ol>"},{"location":"community/trainings/#communication-channels","title":"Communication channels","text":"<p>Choosing the right communication channels is an important step in the planning process for a workshop, as it is crucial not only for the organizing team but also for the participants during and after the workshop. The right communication channels can help to build a fluent community, improve collaboration and keep everyone informed and on the same page.</p> <ol> <li>Choose the right channels: Once the needs have been identified, choose the communication channels that will best serve those needs. Email, chat, and video conferencing are all popular options. If the group is small, a group chat or email chain may be sufficient. If the group is larger or more dispersed, a video conferencing platform may be more appropriate.</li> <li>Make sure they are accessible: Ensure that the communication channels you choose are accessible to all participants. This may include providing training or support for those who are less familiar with the tools you are using.</li> <li>Communicate expectations: Clearly communicate the expectations for using the communication channels to the participants. This includes guidelines for how often and when to check the channels, as well as how to respond to messages.</li> <li>Continuity: Make sure that you have continuity in the communication channels after the workshop. This will help to build a fluent community and to keep the participants connected and engaged. Use the same channels to share updates and resources, or to organize follow-up events or activities.</li> </ol> <p>Note</p> <p>Email is a reliable and widely-used communication channel that can be used for sending out workshop updates, sending materials, and answering questions. It is also a good option for sending out reminders and follow-up information after the workshop.</p> <p>Note</p> <p>Chat networks, such as Matrix, are a great option for secure, real-time and decentralized communication during the workshop. They allow participants to ask questions, share resources and collaborate on projects in real-time. They can also be used for group discussions and as a platform for sharing feedback. Additionally, chat platforms can be used as a platform for post-workshop communication and to build a fluent community.</p> <p>Tip</p> <p>If you need assistance with creating a Chat for your workshop, please let us know. We can easily set up new subchannels within our PlanktoScope Slack channel to support communication and collaboration during your workshop. This will also help facilitate the exchange of information within the community.</p>"},{"location":"community/trainings/#selecting-digital-tools","title":"Selecting digital tools","text":"<p>The right tools can help to facilitate communication, collaboration, and organization, making the workshop experience more productive and enjoyable for everyone.</p> <ol> <li>Use web-based tools: Whenever possible, use web-based tools that can be accessed from any device with an internet connection. This will make it easier for participants to access and use the tools, regardless of their location or device.</li> <li>Use collaborative note-taking tools: You might use web-based tools like HedgeDoc that allow participants to collaboratively collect notes during the workshop. This can help to ensure that everyone has access to the same information, and can help to make the workshop experience more productive and enjoyable for everyone.</li> <li>Use survey tools: You might use survey tools like LimeSurvey to gather information about the participants' needs and expectations for the workshop. This can help to ensure that the workshop is relevant, valuable, and effective for them.</li> <li>Use ticketing tools: You might use tools like Pretix to manage ticketing for the workshop. This can help to simplify the registration process, and can also provide valuable information about the attendees.</li> </ol>"},{"location":"community/trainings/#find-your-audience","title":"Find your audience","text":"<p>If you already have an audience for your workshop, that's fantastic. But it's also a good idea to let others know about your plans and potentially expand your audience. Contact nongovernmental organizations, universities, and research institutions in your area to see if they would be interested in participating in or even helping to organize the workshop.</p> <p>Tip</p> <p>One way to get in touch with others who are interested in PlanktoScope is to join our Slack Channel. We can support you by sharing contacts of individuals and organizations who have expressed an interest in PlanktoScope.</p>"},{"location":"community/trainings/#determining-the-need","title":"Determining the need","text":"<p>Understanding the needs of the participants will help to ensure that the workshop is relevant, valuable, and effective for them. Here are a few things to consider when determining the needs of the participants:</p> <ol> <li>Surveys and questionnaires: Use surveys and questionnaires to gather information about the participants' needs and expectations for the workshop. This can include their level of experience and knowledge, their specific interests and goals, and any challenges or concerns they may have.</li> <li>Pre-workshop consultation: Schedule pre-workshop consultations with the participants to discuss their needs and expectations in more detail. This can help to identify any specific areas of interest or concern, and can also provide an opportunity to address any questions or concerns the participants may have.</li> <li>Audience analysis: Analyze the characteristics of the audience, such as their profession, level of education and experience, and any other relevant details. This will give you a better idea of the type of content that will be most relevant and useful for the participants.</li> <li>Feedback: Ask for feedback from participants after the workshop and take it into account when planning future workshops. This feedback can be used to improve the overall experience and to tailor the workshop to better meet the needs of the participants.</li> </ol>"},{"location":"community/trainings/#defining-the-goals","title":"Defining the goals","text":"<p>Defining the goals of a workshop is an essential step in the planning process. The goals will serve as the foundation for the workshop, guiding the content and activities that are included.</p> <ol> <li>Number of participants: The workshop should be designed for a specific number of participants. Depending on the available resources, the number of participants can range from small groups of 4-8 people to larger groups of 8-12 people.</li> <li>Number of microscopes: The goal of the workshop is to build a specific number of PlanktoScope Microscopes. It is important to have the necessary materials and tools for each participant to build their own microscope.</li> <li>Content: The workshop will include both theoretical and practical content. The theoretical content will cover the principles of open-source hardware and software and the specific design of the PlanktoScope Microscope. The practical content will focus on the assembly and usage of the microscope, including hands-on experience with soldering and other techniques.</li> </ol> <p>Tip</p> <p>Depending on the time, resources, and audience, it is important to carefully decide what activities and tasks should be done during the workshop and what should be prepared upfront. This will ensure that the workshop runs smoothly and efficiently, and that the participants are able to fully engage and participate in the activities. Additionally, by carefully planning and preparing upfront, you can minimize the chances of overwhelming attendees with problems or difficulties that may arise during the workshop.</p>"},{"location":"community/trainings/#financial-planning","title":"Financial planning","text":"<p>The cost of materials, equipment, and other expenses can add up quickly, so it is important to have a plan in place to secure funding. Here are a few things to consider when planning the finances for your workshop:</p> <ol> <li>Decide on the cost of the kits: One of the first things to consider is whether you want to offer the kits for sale to the participants or if you want them to purchase the kits themselves. If you choose to offer the kits for sale, you will need to factor in the cost of materials and other expenses, such as shipping and handling. If you choose to have the participants purchase the kits themselves, you will need to provide them with information on where to purchase the kits and the estimated cost.</li> <li>Check for funding opportunities: There may be organizations or foundations that would be willing to support your workshop financially. It's a good idea to research potential sources of funding such as grants, sponsorships, and crowdfunding campaigns. Additionally, look for local or regional organizations that are working in the same field as your workshop, they might be interested in supporting your initiative.</li> <li>Reach out to potential sponsors: Once you have identified potential sources of funding, reach out to them to inquire about their funding opportunities. Be prepared to provide them with information about the workshop, including the goals, objectives, and expected outcomes. Be sure to include information about the open-source nature of the project, as this may make it more attractive to organizations with an interest in open-source technology.</li> <li>Look for cost-saving options: In addition to securing funding, there are also ways to save money on expenses. Consider renting equipment or space rather than purchasing it. Reach out to local universities or community organizations to see if they have equipment or space that you can use for the workshop at a reduced cost or for free.</li> </ol> <p>Tip</p> <p>If you are organizing the workshop as an individual, consider running the project through a non-profit organization to facilitate the collection of donations. This will also help to ensure transparency and accountability for the funding received. Alternatively, you can choose a commercially active organization that can provide proper accounting and financial management for the workshop participants. This will provide a clear financial record and can help to ensure that the workshop is run in a professional and organized manner.</p>"},{"location":"community/trainings/#creating-a-timetable","title":"Creating a timetable","text":"<p>Creating a schedule for a workshop is an important step in the planning process. A well-organized schedule will help to ensure that the workshop runs smoothly and that all the important topics are covered. Here are a few things to consider when creating a schedule for your workshop:</p> <ol> <li>Plan for more than just a day: A workshop may take more than one day to complete, so be sure to plan accordingly. Consider the amount of time required to cover all the topics, and allocate enough time for each one.</li> <li>Assign an expected duration to each item on the schedule: Assign an expected duration to each item on the schedule so that participants know how much time they should expect to spend on each topic. This will also help you to ensure that you have allocated enough time for each topic.</li> <li>Allocate time for breaks and activities: Make sure to allocate time for breaks, meals and other activities such as group discussions, teamwork, or hands-on activities. This will help to keep the participants engaged and energized throughout the workshop.</li> <li>Plan for contingencies: Include some flexibility in the schedule to allow for unexpected events or delays. This will help to ensure that the workshop stays on track even if things don't go exactly as planned.</li> </ol>"},{"location":"community/trainings/#venue-selection","title":"Venue selection","text":"<p>The location should be convenient and accessible for the participants, and should be equipped with the necessary resources to make the workshop a success. Here are a few things to consider when choosing a workshop location for a workshop on building an open-source PlanktoScope microscope:</p> <ol> <li>Reach out to Universities, research institutions, Fablabs, Hackspaces or non-profit organizations: Reach out to organizations that might have an interest in the PlanktoScope, and a community that might support you with free access to their location.</li> <li>Check the equipment: Make sure the location is equipped with the necessary resources such as a whiteboard, projector/TV, and other equipment that may be required for the workshop.</li> <li>Check the accessibility: Check the accessibility of the location with the public transport system and parking availability.</li> <li>Check for food provision: Consider if there is a possibility to go shopping or how to provide food for the course participants during the workshop.</li> <li>Check the environment: Consider the environment of the location, make sure it is comfortable, has enough space and is well-ventilated for the workshop.</li> </ol>"},{"location":"community/trainings/#announcing-the-event","title":"Announcing the event","text":"<p>When announcing the event, it is important to include the following information:</p> <ol> <li>Date: Provide a specific date, start and end time for the workshop, and ensure there is enough lead time for preparation, including ordering or manufacturing materials and coordinating with suppliers. Allow ample time between announcing the workshop and the actual event.</li> <li>Goal: Clearly communicate the specific goal of the workshop, such as to build a fully functional planktoscope and learn how to use it.</li> <li>What attendees will learn in the workshop: Clearly outline the specific skills or knowledge that will be covered in the workshop, such as how to assemble the kit, soldering the through-hole components of the controller, and working with the software.</li> <li>Instructor's background: Provide some notes about the instructor's qualifications or experience that make them well-suited to lead the workshop, such as experience working with planktoscope.</li> <li>Target audience: Clearly indicate the target group of the workshop, such as researchers, engineers or designers.</li> <li>Previous knowledge: Specify any previous knowledge required for the workshop, such as soldering skills or experience working with open-source hardware and software.</li> <li>Implementation method: Describe the form of the workshop, such as a step-by-step guide.</li> <li>Documentation: Consider sharing the documentation beforehand, so they can familiarize themselves with the process.</li> <li>Cost: Clearly communicate the cost of the workshop.</li> <li>Schedule: Provide a clear and detailed schedule of the workshop, including the duration of the workshop, for example, one day of building and one day of using the plankoscope.</li> <li>Location: Provide the location of the workshop, including information on how to get there with public transportation or Arrival by car and parking. Also, provide a link to a map service</li> <li>Registration: Details of the registration process, including information on where to obtain a ticket and any deadlines for registration.</li> <li>Contact details: Additionally, it may be helpful to include contact information for any questions.</li> <li>Images: Include some visually appealing images, such as from a previous workshop or field trip, to show what attendees can expect from the event. This can additionally be a great way to build anticipation and excitement, thus motivating more people to attend the workshop.</li> <li>Media: Post your offer on a website or social media platform that is relevant to the workshop topic and your target audience. This way you can increase visibility and reach a wider audience, which increases the chances of getting more attendees.</li> </ol> <p>Tip</p> <p>If you already have a group of interested people, send a link to the announcement via email or chat and invite them personally.</p>"},{"location":"community/trainings/#preparing-a-presentation","title":"Preparing a presentation","text":"<p>Preparing a presentation for a build workshop is an important step in the preparation process. It helps to ensure that the participants have the information they need to complete the workshop and understand the concepts behind building the Planktoscope.</p> <ol> <li>Gather resources: Gather resources such as images, videos, and diagrams that can be used to support the presentation. These resources can be found on the Planktoscope website or other sources.</li> <li>Outline the main topics: Outline the main topics that will be covered during the workshop, such as the components of the microscope, the assembly process, and the use of the microscope.</li> <li>Prepare a handout: Prepare a handout or a guide that the participants can use during the workshop to follow the steps, and have it ready to be printed or shared digitally</li> <li>Practice the presentation: Practice the presentation several times before the workshop to ensure that it runs smoothly and that you are comfortable with the material.</li> <li>Be ready to adapt: Be ready to adapt the presentation during the workshop to fit the needs of the participants.</li> </ol> <p>Here are some topics that should be covered in a presentation:</p> <ol> <li>Event: Provide an overview of the event, including the goal of the workshop.</li> <li>Schedule: Provide an timetable for the event, including breaks, start and end times, and any planned activities for the next day.</li> <li>Venue: Provide information about the venue, including where to find restrooms and where to buy food.</li> <li>Instructor: Provide information about the instructor, including his or her background, and how to get in touch with him or her</li> <li>Digital tools: Provide information about the digital tools that will be used during the workshop, such as the platform for collaboration, the survey tool and the chat channel, and how to access them</li> <li>Data privacy: Provide information about the data privacy policy and the forms that need to be signed by the participants.</li> <li>Follow-ups: Point out follow-up actions such as the survey and that participation can be very helpful in improving the offer.</li> <li>Communication: Inform about the communication channels that will be used during the workshop and complete the onboarding.</li> <li>Introduction round: A round of introductions at the beginning of a workshop helps to create a sense of community and connection among the participants, allows the instructor to tailor the workshop to the group's needs, addresses potential language barriers, creates a sense of accountability, and helps participants to be more focused and relaxed.</li> <li>About the project: Provide details about the project, including the working materials such as the kit, the documentation, and the git repository.</li> </ol>"},{"location":"community/trainings/#send-an-final-reminder","title":"Send an final Reminder","text":"<p>Make sure participants are well informed and can find their way to you by sending a final reminder before the start so everything is well prepared.</p> <ol> <li>Schedule for the event: Include a detailed schedule for the event, including breaks, start and end times, and any planned activities for the next day. This will help participants to plan their time and make the most of the workshop.</li> <li>About the venue: Provide detailed information about the venue, including the address, public transportation options, and parking situation. Make sure to include any specific instructions or requirements for accessing the venue.</li> <li>About the documentation: Provide a link to the documentation, such as the assembly and manufacturing guide, that the participants can familiarize themselves with before the workshop. This will help them to be better prepared and make the most of the workshop.</li> <li>Cancellation policy: Remind the participants that now is the last opportunity to cancel their registration. This will allow other individuals on the waiting list to attend the workshop.</li> <li>Final Instructions: Provide any final instructions or important information that the participants should be aware of before the workshop.</li> </ol>"},{"location":"community/trainings/#documenting-the-event","title":"Documenting the event","text":"<p>Documenting a PlanktoScope workshop through photography is essential for several reasons. Photos can be used to showcase the workshop activities and the learning process of the participants. This can be useful for sharing information about the workshop with others, and for promoting future workshops.</p> <ol> <li>Equipment: Make sure you have the necessary equipment to document the event, including a camera (DSLR or mirrorless camera), lenses, memory cards, and batteries.</li> <li>Backup: Always make sure to have a backup plan for your equipment and photos, such as bringing extra memory cards and batteries.</li> <li>Lighting: Take into account the lighting conditions and make sure to have the right settings for your camera to capture the best possible images.</li> <li>Planning: Plan out the photos you want to take, taking into account the theme, location and schedule of the event.</li> <li>Composition: Pay attention to the composition of your photos and make sure to use techniques such as the rule of thirds and leading lines to create visually appealing images.</li> <li>Capturing candid moments: In addition to capturing posed shots, make sure to capture candid moments that capture the atmosphere and emotions of the event.</li> <li>Post-processing: Once the event is over, review and edit your photos to make them look their best.</li> <li>Data Privacy and Opt-Out: Pay attention to the privacy policy and get participants' consent before taking photos of them. Offer an opt-out option for participants who do not want to have photos taken. Clearly communicate what the photos will be used for and by whom, for example, to enhance this documentation.</li> <li>License: If your participants have agreed to share and use the photos, choose an appropriate license under which to license the photos. We recommend the Creative Commons license. For more information, see the project's license terms page.</li> <li>Sharing on Social Media: Share the photos on social media platforms to create a visual memory of the event and increase the visibility of the event.</li> </ol> <p>By preparing and taking care of these things, you can ensure that you are able to document the event effectively and create a visual record of the event that can be shared and enjoyed for years to come.</p>"},{"location":"community/trainings/#follow-up","title":"Follow-up","text":"<p>Follow-up activities are an essential part of the workshop planning process. They help to ensure that the workshop's objectives are met and that the participants leave the workshop with a sense of accomplishment. Here are a few things to consider when planning follow-up activities after an event like a workshop:</p> <ol> <li>Follow-up with participants: Send out a survey or contact participants individually to gather feedback on their experience during the workshop. This feedback can be used to improve future workshops and address any issues that may have arisen.</li> <li>Share resources and information: Share any relevant resources such as presentations, handouts, or any other materials that will help the participants continue their learning after the workshop.</li> <li>Build a community: Encourage participants to connect and share their experiences with each other. This can be done through online forums, social media groups, or other platforms. Building a community of enthusiasts and collaborators will help to ensure that the workshop's goals and objectives are met and that the participants leave the workshop with a sense of accomplishment.</li> <li>Continual learning: Provide additional training opportunities or resources for participants to continue their learning after the workshop. This could be through follow-up workshops, webinars, or online tutorials.</li> <li>Track progress: Keep track of the progress of the participants, check if they are applying what they learned during the workshop and give feedback to help them improve.</li> </ol>"},{"location":"community/trainings/#improve-this-training-program","title":"Improve this training program","text":"<p>As with any training program, there is always room for improvement. To ensure that this program continues to meet the needs of its attendees, it is important to actively seek feedback and make changes as necessary.</p> <p>Here are a few ways to improve this training program:</p> <ol> <li>Gather feedback: Regularly gather feedback from attendees, instructors and other stakeholders to understand how the program is being received and identify areas for improvement.</li> <li>Review and revise content: Review the content of the program and make changes as necessary to ensure that it is up-to-date, accurate, and relevant to the attendees.</li> <li>Continuously update the material: Continuously update the material, adding new information and best practices as it becomes available.</li> <li>Use different learning methods: Use different learning methods to accommodate different learning styles, such as hands-on activities, group discussions, and online resources.</li> <li>Encourage participation: Encourage participation and collaboration among attendees, creating an interactive and dynamic learning experience.</li> <li>Use modern technologies: Use modern technologies to enhance the learning experience, such as virtual reality, gamification, and AI-based learning.</li> <li>Assess the impact: Assess the impact of the program on the attendees and make changes as necessary to ensure that the program is achieving its intended goals.</li> </ol> <p>For more information on how to contribute to this document and improve this training program, please see the contribute section on Writing Documentation.</p>"},{"location":"community/contribute/documentation/","title":"Writing Documentation","text":"<p>The source files are in the main github repository, in the <code>docs</code> folder.</p> <p>They are simple Markdown files, that you can edit in any text editor of your choice.</p> <p>The local development and test is made using mkdocs. This allows you to test your documentation changes for styling issues and see what it will look like once rendered.</p> <pre><code>hatch run docs:serve\n</code></pre> <p>After installing mkdocs, you can use <code>mkdocs serve</code> in the main folder of this repository to start the development server.</p> <p>If you want to include pictures and diagrams in the documentation, please set the pictures in a dedicated folder to the name of the page you are creating (for example, if your page is named <code>expert_setup.md</code>, please put all the related pictures in the <code>docs/expert_setup/</code> folder). Each picture should be named with a simple yet descriptive name, using jpg or png format if possible. Try to limit the size of the file by limiting the resolution to what is necessary for the picture to be clear on screen.</p> <p>Contributions should be made by creating pull requests on Github directly.</p>"},{"location":"community/contribute/documentation/#extensions-available","title":"Extensions available","text":"<p>In addition to the common markdown syntax, several extensions are activated. If you want more information on any of them, please follow the linked guides.</p> <ul> <li>SmartyPants: Converts ASCII dashes, quotes and ellipses to their HTML entity equivalents.</li> <li>Sane Lists: Alters the behavior of the Markdown List syntax to be less surprising.</li> <li>Admonition: Adds rST-style admonitions to Markdown documents.</li> <li>Table of contents: Generates a Table of Contents from a Markdown document and adds it into the resulting HTML document.</li> <li>Metadata: Adds a syntax for defining meta-data about a document.</li> <li>Tables: Adds the ability to create tables in Markdown documents.</li> <li>Fenced Code Blocks: Adds a secondary way to define code blocks.</li> </ul>"},{"location":"community/contribute/github/","title":"Contributing","text":"<p>First of all, thank you for contributing to the PlanktoScope! The goal of this document is to provide everything you need to know in order to contribute to PlanktoScope.</p> <p>There are several ways to join the development effort, share your progress with your build or just ask for help.</p> <p>We are using slack as a communication platform between interested parties. You can request to join by filling this form.</p> <p>This repository is also a good way to get involved. Please fill in an issue if you witnessed a bug in the software or hardware. If you are able, you can also join the development effort. Look through the issues opened and choose one that piques your interest. Let us know you want to work on it in the comments, we may even be able to guide your beginnings around the code.</p>"},{"location":"community/contribute/github/#assumptions","title":"Assumptions","text":"<ol> <li>You're familiar with git and the Merge Request(PR) workflow.</li> <li>**You've read the PlanktoScope documentation.</li> <li>You know about the PlanktoScope community on Slack. Please use this for help.</li> </ol>"},{"location":"community/contribute/github/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Make sure that the contribution you want to make is explained or detailed in a GitHub issue! Find an existing issue or open a new one.</li> <li>Once done, fork the PlanktoScope repository in your Github account. Ask a mastertainer if you want your issue to be checked before making a PR.</li> <li>Create a new Git branch.</li> <li>Review the Development Workflow section that describes the steps to mastertain the repository.</li> <li>Make the changes on your branch.</li> <li>Submit the branch as a PR pointing to the <code>master</code> branch of the master fabcity-os-core-chart repository. A mastertainer should comment and/or review your Pull Request within a few days. Although depending on the circumstances, it may take longer. We do not enforce a naming convention for the PRs, but please use something descriptive of your changes, having in mind that the title of your PR will be automatically added to the next release changelog.</li> </ol>"},{"location":"community/contribute/github/#git-guidelines","title":"Git Guidelines","text":""},{"location":"community/contribute/github/#git-branches","title":"Git Branches","text":"<p>All changes must be made in a branch and submitted as PR. We do not enforce any branch naming style, but please use something descriptive of your changes.</p>"},{"location":"community/contribute/github/#git-commits","title":"Git Commits","text":"<p>As minimal requirements, your commit message should:</p> <ul> <li>be capitalized</li> <li>not finish by a dot or any other punctuation character (!,?)</li> <li>start with a verb so that we can read your commit message this way: \"This commit will ...\", where \"...\" is the commit message.   e.g.: \"Fix the home page button\" or \"Add more tests for create_index method\"</li> </ul> <p>We don't follow any other convention, but if you want to use one, we recommend this one.</p>"},{"location":"community/contribute/github/#pull-requests","title":"Pull Requests","text":"<p>Some notes on PRs:</p> <ul> <li>Convert your PR as a draft if your changes are a work in progress: no one will review it until you pass your PR as ready for review.   The draft PR can be very useful if you want to show that you are working on something and make your work visible.</li> <li>The branch related to the PR must be up-to-date with <code>master</code> before merging. Fortunately, this project integrates a bot to automatically enforce this requirement without the PR author having to do it manually.</li> <li>All PRs must be reviewed and approved by at least one mastertainer.</li> <li>The PR title should be accurate and descriptive of the changes. The title of the PR will be indeed automatically added to the next release changelogs.</li> </ul>"},{"location":"community/contribute/github/#release-process-for-internal-team-only","title":"Release Process (for internal team only)","text":"<p>PlanktoScope tools follow the Semantic Versioning Convention.</p>"},{"location":"community/contribute/github/#automation-to-rebase-and-merge-the-prs","title":"Automation to Rebase and Merge the PRs","text":"<p>This project integrates a bot that helps us manage pull requests merging. Read more about this.</p>"},{"location":"community/contribute/github/#how-to-publish-the-release","title":"How to Publish the Release","text":"<p>\u26a0\ufe0f Before doing anything, make sure you got through the guide about Releasing an Integration.</p> <p>\u26a0\ufe0f Every PR that is merged to <code>master</code> introducing changes to the PlanktoScope needs to modify the file ``, by increasing the version of the chart accordingly.</p> <p>Every PR that is merged to <code>master</code> triggers the automated release process, as specified at ``. A GitHub Action will be triggered and publish a new release on the GitHub repository releases. This will enable users to start using the new version of the chart immediately after publishing.</p> <p>Thank you again for reading this through, we can not wait to begin to work with you if you made your way through this contributing guide \u2764\ufe0f</p>"},{"location":"community/contribute/hardware/","title":"Hardware Development","text":""},{"location":"community/contribute/hardware/#planktoscope-case","title":"PlanktoScope Case","text":"<p>As a hardware engineer working on the PlanktoScope Case, you will be using Autodesk Fusion 360 for the development of the case design. Fusion 360 is a comprehensive computer-aided design (CAD) software that allows you to create and analyze complex 3D models, perform simulations and stress tests, and collaborate with team members in real-time.</p> <p>To get started with the project, you will need to install a development environment on your computer. Here are the steps to follow:</p> <ul> <li>Download and install Fusion 360 from the Autodesk website.</li> <li>Create a free Autodesk account and log in to Fusion 360.</li> <li>Join the PlanktoScope Case team in Fusion 360. This will give you access to all of the project files and allow you to collaborate with other team members.</li> <li>Familiarize yourself with the Fusion 360 interface and tools. There are many resources available online, including tutorials and user guides, to help you get up to speed.</li> <li>Start designing and testing your case components in Fusion 360. You can use the software to create 3D models, run simulations and stress tests, and collaborate with other team members in real-time.</li> </ul> <p>By following these steps, you will be able to successfully install a development environment and participate in the PlanktoScope Case using Autodesk Fusion 360.</p>"},{"location":"community/contribute/hardware/#planktoscope-hat","title":"PlanktoScope Hat","text":"<p>As a hardware engineer working on the PlanktoScope Hat, you will be using Autodesk Eagle to design and develop the electronic components of the hat. Autodesk Eagle is a powerful and widely used software platform for designing and laying out printed circuit boards (PCBs).</p> <p>To participate in the project, you will need to install a development environment on your computer that includes Autodesk Eagle and any other necessary tools and libraries. Here are the steps you can follow to set up your development environment:</p> <ul> <li>Download and install Autodesk Eagle from the official website. Make sure to select the appropriate version for your operating system (Windows, Mac, or Linux).</li> <li>Follow the instructions provided by Autodesk to complete the installation process. This may involve entering a license key or activating the software through your Autodesk account.</li> <li>Once Autodesk Eagle is installed, you may need to install additional libraries or tools depending on the specific requirements of the PlanktoScope Hat. These may include libraries for communicating with specific hardware components, or tools for debugging and testing your designs.</li> <li>Once you have installed all the necessary tools and libraries, you should be ready to start working on the PlanktoScope Hat using Autodesk Eagle. You can begin by opening the project files and familiarizing yourself with the existing design, or by creating new designs as needed.</li> </ul> <p>By following these steps, you can set up a development environment that allows you to contribute to the PlanktoScope Hat using Autodesk Eagle.</p>"},{"location":"community/contribute/software/","title":"How to help development for the PlanktoScope code","text":"<p>We are using the Github Flow approach for our development efforts.</p> <p>If you want to join us, have a look at the currently opened issues and pick one where you feel like you can have an impact. Let us know you want to work it in the comments and get started.</p> <p>For working on Node-Red, we recommend to install it directly on your development machine to allow for faster cycles of testing (and ease of use). But feel free to setup a Pi Zero as a portable and compact development environment! (One of us is using one configured as usb gadget to do so!)</p>"},{"location":"community/contribute/software/#node-red","title":"Node-Red","text":"<p>Node-Red is our main process. We use the flow to manage our user interface through a dashboard instance.</p> <p></p> <p>As a software engineer, you may need to set up a Node-RED development environment on a Debian operating system. Node-RED is an open-source programming tool for wiring together hardware devices, APIs, and online services in new and interesting ways. It provides a visual, drag-and-drop interface for building applications, and can be used to develop a wide range of IoT, automation, and data processing projects.</p> <p>To set up a Node-RED development environment on a Debian operating system, you will need to follow these steps:</p> <ol> <li>Install Node.js: Node-RED requires Node.js to be installed on your system. You can install Node.js using the package manager by running the following command: <code>sudo apt-get install nodejs</code></li> <li>Install npm (Node Package Manager): npm is a package manager for Node.js that is used to install and manage Node-RED and its dependencies. You can install npm by running the following command: <code>sudo apt-get install npm</code></li> <li>Install Node-RED: Once Node.js and npm are installed, you can install Node-RED by running the following command: <code>sudo npm install -g --unsafe-perm node-red</code></li> <li>Start the Node-RED server: You can start the Node-RED server by running the following command: <code>node-red</code></li> <li>Access the Node-RED editor: You can access the Node-RED editor by opening a web browser and going to the URL http://localhost:1880.</li> </ol> <p>By following these steps, you will be able to set up a Node-RED development environment on your Debian operating system and start building applications with the visual, drag-and-drop interface.</p>"},{"location":"community/contribute/software/#python","title":"Python","text":"<p>The python code is separated in four main processes, each with a specific set of responsibilities:</p> <ul> <li>The main process controls all the others, starts everything up and cleans up on shutdown</li> <li>The stepper process manages the stepper movements.</li> <li>The imager process controls the camera and the streaming server via a state machine.</li> <li>The segmenter process manages the segmentation and its outputs.</li> </ul> <p>Those processes all communicates together using MQTT and json messages. Each message is adressed to one topic. The high level topic controls which process receives the message. The details of each topic is at the end of this commit message. You can learn more about the MQTT Messages here.</p> <p>The code is architectured around 6 modules and about 10 classes. I encourage you to have a look at the files, they're pretty straightforward to understand.</p>"},{"location":"operation/","title":"Operation","text":"<p>This page provides basic instructions for operating your PlanktoScope.</p> <p></p>"},{"location":"operation/#connect-directly-to-your-planktoscope","title":"Connect directly to your PlanktoScope","text":"<p>In order to operate your PlanktoScope, you will need to connect to your PlanktoScope from a separate device (a computer, tablet, or phone) with a web browser. If this is your first time setting up or connecting to your PlanktoScope, you will need to set up a direct network connection between your computer and your PlanktoScope.</p>"},{"location":"operation/#connect-with-an-ethernet-cable","title":"Connect with an Ethernet cable","text":"<p>You can connect your computer to the PlanktoScope by plugging an Ethernet cable between your computer and your PlanktoScope's Raspberry Pi.</p>"},{"location":"operation/#connect-with-the-planktoscopes-wi-fi-hotspot","title":"Connect with the PlanktoScope's Wi-Fi hotspot","text":"<p>Unless you have already configured your PlanktoScope to connect to an existing Wi-Fi network or disabled your PlanktoScope's Wi-Fi hotspot functionality, your PlanktoScope will create its own isolated Wi-Fi network (like a Wi-Fi hotspot, but without internet access). The Wi-Fi hotspot created by your PlanktoScope should appear on your computer's list of available Wi-Fi networks a few minutes after you turn on power to your PlanktoScope.</p> <p></p> <p>As you can see, the name of your PlanktoScope's Wi-Fi hotspot will be of the format <code>pkscope-{machine-name}</code>, where (unless you have customized your PlanktoScope's naming system) <code>{machine-name}</code> has the format <code>{random word}-{random word}-{random number}</code>; in the above screenshot, the highlighted Wi-Fi hotspot is from a PlanktoScope with machine name <code>chain-list-27764</code>. By default, your PlanktoScope's machine name corresponds exactly to the serial number of the Raspberry Pi computer in your PlanktoScope. You should connect your computer to the Wi-Fi hotspot specific to your PlanktoScope.</p> <p>Tip</p> <p>You should write down the PlanktoScope's machine name in a note (or on your PlanktoScope) for future reference; this will be especially important if you might have multiple PlanktoScopes in the future or if you might need to access the PlanktoScope via an indirect connection (e.g. from a device connected to the same network router as the PlanktoScope).</p> <p>Unless you have changed the password of your PlanktoScope's Wi-Fi hotspot, the password should be <code>copepode</code>.</p>"},{"location":"operation/#access-your-planktoscopes-software","title":"Access your PlanktoScope's software","text":"<p>Once you connect your computer (or phone/tablet/etc.) to your PlanktoScope, you will need to access your PlanktoScope's software from a web browser on your computer.</p> <p>If you know the machine name of your PlanktoScope (which you can determine from the name of your PlanktoScope's Wi-Fi hotspot, as described above), you can try using your web browser to open a URL of format <code>http://pkscope-{machine-name}.local</code>, where <code>{machine-name}</code> should be substituted with your PlanktoScope's machine name. This URL should work unless you're on a device or web browser without mDNS support; notably, older versions of Android did not support mDNS, and web browsers installed on Linux computers via Flatpak do not yet support mDNS.</p> <p>If you are connecting your computer directly to your PlanktoScope (i.e. via your PlanktoScope's Wi-Fi hotspot, or via an Ethernet cable from your computer to your PlanktoScope's Ethernet port) but you don't know (or you don't want to type out) your PlanktoScope's machine name, then you can try opening the following URLs in your web browser instead (try opening them in the following order, and just use the first one which works):</p> <ul> <li>http://planktoscope.local (this should work unless you're on a device or web browser without mDNS support)</li> <li>http://pkscope.local (this should work unless you're on a device or web browser without mDNS support)</li> <li>http://home.pkscope (this should work unless your web browser is configured to use a Private DNS provider)</li> <li>http://192.168.4.1 (this should always work on devices connected directly to the PlanktoScope, especially for devices connected directly to the PlanktoScope's Wi-Fi hotspot)</li> <li>http://192.168.5.1 (this should always work on devices connected directly to the PlanktoScope, especially for devices connected directly to the PlanktoScope's Ethernet port)</li> </ul> <p>Warning</p> <p>The five URLs listed directly above will not work if you're trying to connect to your PlanktoScope indirectly, e.g. via a Wi-Fi router providing internet access to the PlanktoScope. In that case, you will instead need to use a URL with your PlanktoScope's machine name which has format <code>http://pkscope-{machine-name}.local</code>. If you might want to do that in the future, then you should write down the machine name of your PlanktoScope as declared on your PlanktoScope's landing page!</p> <p>Warning</p> <p>The five URLs listed directly above may behave in weird ways if your computer is directly connected to multiple PlanktoScopes. In such a situation, those URLs may cause you to access the software for a different PlanktoScope connected to your computer than the one you had intended to access. You should instead use a machine-specific URL, either of format <code>http://pkscope-{machine-name}.local</code> (which will only work if your device and web browser support mDNS), or otherwise of format <code>http://{machine-name}.pkscope</code> (which will only work if your computer is connected directly to the PlanktoScope).</p> <p>Warning</p> <p>You may encounter older documents which ask you to connect to http://planktoscope.local:1880/ui, which is the URL to use for software version 2.3 and older versions. That link does not work on software versions newer than v2.3; instead, you should use the links listed above.</p> <p>One of the above URLs should work, and your web browser should show a landing page with a list of links, as well as its machine-specific URL with format <code>http://pkscope-{machine-name}.local</code>; in this screenshot of the landing page accessed via the URL http://home.pkscope, the PlanktoScope's machine name is <code>clear-request-6329</code>:</p> <p></p> <p>Tip</p> <p>If you access the landing page using any URL not of the format <code>http://pkscope-{machine-name}.local</code>, then the landing page will suggest its own machine-specific URL for you to try opening; you can see that in the above screenshot, which shows a yellow information box with the URL for the PlanktoScope used to make that screenshot. You should try opening your PlanktoScope's machine-specific URL to see if it works in your web browser, and you may want to bookmark it for future reference for the reasons discussed in the warnings listed earlier in this section of the documentation.</p> <p>You should click on the \"Node-RED dashboard\" link; this will open a new tab with the primary interface for operating your PlanktoScope. Once you have opened the Node-RED dashboard, you should proceed to our User interface guide to understand how to use it.</p>"},{"location":"operation/#acquire-data-on-plankton-samples","title":"Acquire data on plankton samples","text":"<p>Before doing an acquisition, you will need to collect targets. There are several ways to do this, and you probably already have a source nearby (in a culture if you are working in a lab).</p> <p>However, if you have access to a body of water (even a tiny lake or river is enough), you can build yourself a plankton net to collect a sample. Once the sample is collected, either pump it with a syringe that you connect to the machine, or dip one of the silicone tube inside the sample tube you have.</p> <p>You can then do an acquisition run. This is the best way to learn about the machine and this process!</p> <p>Warning</p> <p>After doing an acquisition, the machine should be cleaned, especially in the fluidic part. One good way to do this is to first flush the machine with clear water (distilled if possible). You can then push through a 5-10% bleach solution, or some alcohol.</p> <p>If needed you can also clean the outside of the objective lens with a soft cloth. You can do the same on the flow cell if there are traces of finger on it too.</p> <p>For quantitative imaging of water samples, refer to the following protocols published by members of the PlanktoScope community:</p> <ul> <li>\"Planktoscope protocol for plankton imaging\". A PDF copy of a draft of version 4 of this protocol is also available for offline use.</li> </ul>"},{"location":"operation/#manage-your-planktoscopes-embedded-computer","title":"Manage your PlanktoScope's embedded computer","text":"<p>Your PlanktoScope has a Raspberry Pi computer embedded inside it which runs the PlanktoScope's software. You may need to perform various system administration/operations tasks on it, such as:</p> <ul> <li>Resetting or upgrading/downgrading the software on it, such as for resetting your PlanktoScope's settings back to its factory defaults, testing out new software updates, or switching back to an older software version after testing out a newer version.</li> <li>Changing its network configuration, such as for connecting your PlanktoScope to the internet, maintaining internet access on a computer connected simultaneously to both your PlanktoScope (e.g. by Ethernet) and an external network (e.g. by Wi-Fi), making your PlanktoScope more secure, or customizing your PlanktoScope's machine name.</li> <li>Cloning its SD card to back up its settings and data, or to replicate its exact settings and data across multiple PlanktoScopes</li> </ul>"},{"location":"operation/clone-sd/","title":"SD Card Cloning","text":"<p>If you want to create an SD card image from your PlanktoScope to use on other PlanktoScopes, you can follow the following steps.</p>"},{"location":"operation/clone-sd/#prepare-the-sd-card-for-cloning","title":"Prepare the SD card for cloning","text":"<p>Depending on whether you want to make an SD card image to reuse across multiple machines or whether you only want to make an exact backup of your SD card image, you will need to perform different steps to prepare your SD card for cloning.</p>"},{"location":"operation/clone-sd/#prepare-for-cloning-to-reuse-in-other-machines","title":"Prepare for cloning to reuse in other machines","text":"<p>Normally, your SD card contains some information (a machine-specific ID, system secrets, and SSH secrets) which should never be replicated across multiple PlanktoScopes, and some information (apt package cache) which you would probably consider a waste of space which unnecessarily increases the size of the SD card image you want to make. We provide a preparation script at <code>/usr/libexec/prepare-custom-image</code> to remove this information; it also allows an SD card image created from your SD card to automatically resize itself to match the size of any SD card it's flashed to in the future. After you make any changes you want to make on your PlanktoScope for your SD card image, you should run the preparation script on the PlanktoScope with the command:</p> <pre><code>sudo /usr/libexec/prepare-custom-image\n</code></pre> <p>Once this script finishes running, it will shut down your PlanktoScope's Raspberry Pi.</p> <p>Next, you should remove the SD card from your PlanktoScope and plug it into another computer, so that you can clone the SD card into an SD card image; this guide assumes that your other computer runs Linux. With your SD card plugged into your other computer, you can mount the SD card's <code>rootfs</code> partition to delete any other sensitive files which were not removed by the <code>/usr/libexec/prepare-custom-image</code> script. For example, you may also want to delete or edit some or all of the following files from the <code>rootfs</code> partition in order to remove any sensitive or machine-specific information:</p> <ul> <li><code>/var/lib/overlays/overrides/etc/wpa_supplicant/wpa_supplicant.conf</code>: Wi-Fi configuration and network secrets.</li> <li><code>/home/pi/.ssh/authorized_keys</code>: SSH public keys of devices authorized to remotely connect to the PlanktoScope.</li> <li><code>/home/pi/data/</code>: all images acquired before by the PlanktoScope - this directory may be large, and you probably don't want to copy those datasets across all your other PlanktoScopes.</li> <li><code>/home/pi/.bash_history</code>: Bash command history.</li> <li><code>/home/pi/.python_history</code>: Python command history.</li> <li><code>/home/pi/.gitconfig</code>: Git configuration, which may contain user-specific details.</li> </ul> <p>Info</p> <p>You can also delete the files listed above before running the <code>/usr/libexec/prepare-custom-image</code> script; the effect is the same. Either way, those files will be permanently deleted on your SD card. However, if you want to keep those files on your SD card, you should make backup copies of those files, and then you can copy those files back onto your SD card after you finish cloning the SD card to an image.</p> <p>Next, proceed to the Make an SD card image section of this guide.</p>"},{"location":"operation/clone-sd/#prepare-an-exact-backup","title":"Prepare an exact backup","text":"<p>If you want to make an exact backup of your SD card and you don't want to reuse your SD card image across multiple PlanktoScopes, then you shouldn't run the <code>/usr/libexec/prepare-custom-image</code> script: that script will delete some files which you probably want to keep. Instead, you should edit the <code>/boot/cmdline.txt</code> file to add the string <code>init=/usr/lib/raspberrypi-sys-mods/firstboot</code> to the end of the file, for example resulting in a file which looks something like:</p> <pre><code>console=tty1 root=PARTUUID=someuniqueidhere rootfstype=ext4 fsck.repair=yes rootwait init=/usr/lib/raspberrypi-sys-mods/firstboot\n</code></pre> <p>Next, you should remove the SD card from your PlanktoScope and plug it into another computer, so that you can clone the SD card into an SD card image; this guide assumes that your other computer runs Linux. Then proceed to the Make an SD card image section of this guide.</p> <p>Warning</p> <p>After you have finished cloning the SD card to an SD card image, you should edit the <code>/boot/cmdline.txt</code> file to remove the <code>init=/usr/lib/raspberrypi-sys-mods/firstboot</code> string, before booting up the Raspberry Pi with your SD card again. This will prevent the first-boot script from deleting the SSH server keys already on your SD card.</p>"},{"location":"operation/clone-sd/#make-an-sd-card-image","title":"Make an SD card image","text":""},{"location":"operation/clone-sd/#locate-the-sd-card","title":"Locate the SD card","text":"<p>Now that your SD card is plugged into a Linux computer, you will need to determine the path of the device file corresponding to your SD card. Usually it will look something like <code>/dev/mmcblk0</code>, <code>/dev/sda</code>, or <code>/dev/sdb</code>; it should always be some file in <code>/dev</code>. To identify the device file for your SD card, run the command <code>sudo fdisk -l</code> in your terminal. The output may look something like:</p> <pre><code>Disk /dev/nvme0n1: 1.82 TiB, 2000398934016 bytes, 3907029168 sectors\nDisk model: WD_BLACK SN770 2TB\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: D18C4567-ADF2-4987-987F-CDA411988C8E\n\nDevice           Start        End    Sectors  Size Type\n/dev/nvme0n1p1    2048    1230847    1228800  600M EFI System\n/dev/nvme0n1p2 1230848    3327999    2097152    1G Linux filesystem\n/dev/nvme0n1p3 3328000 3907028991 3903700992  1.8T Linux filesystem\n\nDisk /dev/mmcblk0: 58.29 GiB, 62587404288 bytes, 122241024 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0xa2033091\n</code></pre> <p>To determine which disk device corresponds to your SD card, you should check the size of each device to find the one which approximately matches the size of your SD card. In the above example, the 64 GB SD card is at <code>/dev/mmcblk0</code>.</p> <p>Next, you should unmount the SD card from your system (or ensure that the device is already not mounted on your system). If you're unsure whether the SD card is mounted, you should use the <code>umount</code> command. For example, if your device is <code>/dev/mmcblk0</code>, you will need to run:</p> <pre><code>sudo umount /dev/mmcblk0p1\nsudo umount /dev/mmcblk0p2\n</code></pre> <p>If the devices were already not mounted, you should expect to see (and you can safely ignore) error messages which look like:</p> <pre><code>umount: /dev/mmcblk0p1: not mounted.\numount: /dev/mmcblk0p2: not mounted.\n</code></pre>"},{"location":"operation/clone-sd/#clone-the-sd-card-to-an-image","title":"Clone the SD card to an image","text":"<p>To clone the Raspberry Pi's SD card to an image file which you can write to other SD cards, you should follow the instructions at https://github.com/mgomesborges/raspberry-pi/blob/master/setup/clone-sd-card.md or https://raspberrytips.com/create-image-sd-card/ . For example, if you are using a Linux computer and the SD card shows up as <code>/dev/mmcblk0</code>, you could run the following command (replacing file paths and names accordingly):</p> <pre><code>sudo dd bs=4M if=/dev/mmcblk0 of=/some/path/here/image-name-here.img status=progress\n</code></pre> <p>This will create a <code>.img</code> file (at <code>/some/path/here/image-name-here.img</code>) as large as your SD card - make sure you have enough space on your hard drive for the file! If your SD card is large, this process may take a long time; this greatly depends on the speed of your SD card reader. For example, a slow SD card reader may take 30 minutes in order to clone a 32 GB SD card.</p>"},{"location":"operation/clone-sd/#shrink-the-sd-card-image","title":"Shrink the SD card image","text":"<p>In order to make the SD card practical to share, you should shrink and compress the SD card image file using the PiShrink tool. For example, on Linux you could run the following set of commands (again replacing file paths and names accordingly):</p> <pre><code>cd /some/path/here\nwget https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh\nchmod +x pishrink.sh\nsudo ./pishrink.sh -za image-name-here.img\n</code></pre> <p>If you had set up the PlanktoScope software on a Raspberry Pi OS Lite image, you should get a <code>image-name-here.img.gz</code> file which is at least 2 GB in size.</p>"},{"location":"operation/clone-sd/#use-the-sd-card-image","title":"Use the SD card image","text":"<p>You can now use this SD card image with the standard installation guide for installing the PlanktoScope OS on an SD card for one or more PlanktoScopes.</p>"},{"location":"operation/maintenance/","title":"Maintenance and Repair","text":"<p>Instructions for maintaining and repairing the PlanktoScope.</p>"},{"location":"operation/maintenance/#cleaning-the-optics","title":"Cleaning the optics","text":"<ul> <li>Begin by turning off the microscope and unplugging it from any power source.   Gently remove any dust or debris using a soft, dry cloth.</li> <li>To clean the lenses and other optics, use a lens cleaning solution and a lens cleaning tissue or cloth. Gently wipe the optics in a circular motion, starting from the center and working outward. Avoid applying too much pressure or using a rough cloth, as this can scratch or damage the optics.</li> <li>Once you have finished cleaning the optics, use a dry cloth to remove any excess moisture or cleaning solution.</li> </ul>"},{"location":"operation/maintenance/#software","title":"Software","text":"<p>For information about maintaining the software on your PlanktoScope (such as installing software updates), see our software reset &amp; upgrades guide.</p>"},{"location":"operation/networking/","title":"Networking guide","text":"<p>By default, your PlanktoScope creates an isolated Wi-Fi network (which we often call \"the PlanktoScope's Wi-Fi hotspot network\") which devices can connect to in order to access the PlanktoScope's software; and devices can also connect to the PlanktoScope directly by an Ethernet cable. However, you may have reasons to adjust your networking configuration away from this default. This guide provides instructions on how to adjust your networking configuration in various ways.</p> <p>Currently, all instructions in this guide should be considered as being provided for \"advanced users\" (and/or for users who are able to ask for help in the PlanktoScope Slack workspace). These instructions will probably change between between successive releases of the PlanktoScope software. All URLs in this guide are written assuming you access your PlanktoScope using planktoscope.local as the domain name; if you need to use a different domain name such as home.pkscope, you should substitute that domain name into the links on this page.</p>"},{"location":"operation/networking/#adjust-your-planktoscopes-wi-fi-region-settings","title":"Adjust your PlanktoScope's Wi-Fi region settings","text":""},{"location":"operation/networking/#change-wi-fi-hotspot-region-settings","title":"Change Wi-Fi hotspot region settings","text":"<p>By default, the PlanktoScope makes its Wi-Fi hotspot network on WLAN channel 8 and in compliance with United States Wi-Fi regulatory domain. If your computer/phone/etc.'s connection to the PlanktoScope's Wi-Fi hotspot is unstable and you are operating your PlanktoScope outside the United States, you may need to change your Wi-Fi network's regional settings. For example, if you are operating in France, you should change the Wi-Fi hotspot's ISO/IEC 3166-1-formatted country code from <code>US</code> to <code>FR</code>.</p> <p>To change the regional settings of the PlanktoScope's Wi-Fi hotspot away from the defaults, edit the file at <code>/etc/hostapd/hostapd.conf.d/50-localization-us.conf</code>. For example, you can do this by opening the file editor at http://planktoscope.local/admin/fs/files/etc/hostapd/hostapd.conf.d/50-localization-us.conf . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default regional settings, we recommend deleting the file at <code>/var/lib/overlays/overrides/etc/hostapd/hostapd.conf.d/50-localization-us.conf</code>. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/hostapd/hostapd.conf.d/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/networking/#connect-your-planktoscope-to-the-internet","title":"Connect your PlanktoScope to the internet","text":"<p>To connect your PlanktoScope to the internet, we recommend one of the following options:</p> <ol> <li>Plug it into an Ethernet port with internet access.</li> <li>Connect an Android phone/tablet by USB to your PlanktoScope and then enabling USB tethering mode so that the Android device shares its internet access (which can be from the Wi-Fi network it's connected to) to the PlanktoScope. Note: we plan to add support for USB tethering from iOS devices, but we haven't figured out how to do that yet.</li> </ol> <p>Once your PlanktoScope is connected to the internet, by default it will attempt to share its internet access with any devices connected to the PlanktoScope by Wi-Fi or Ethernet.</p>"},{"location":"operation/networking/#connect-your-planktoscope-to-an-existing-wi-fi-network","title":"Connect your PlanktoScope to an existing Wi-Fi network","text":"<p>It's also possible to connect the PlanktoScope to an existing Wi-Fi network with internet access, but the PlanktoScope will be unable to make its Wi-Fi hotspot network while it is connected to an existing Wi-Fi network. Then, as long as the PlanktoScope is within range of that Wi-Fi network, the PlanktoScope software is only accessible either if 1) the existing Wi-Fi network (including its firewall settings) is configured to allow you to access the PlanktoScope via mDNS and your device and web browser support mDNS URLs (i.e. URLs ending in <code>.local</code>, like http://planktoscope.local) or if 2) you connect your device to the PlanktoScope via an Ethernet cable.</p> <p>Info</p> <p>To be precise, the PlanktoScope will ping google.com to check if it can access the internet once it connects to an existing Wi-Fi network; if it still cannot reach google.com after ~10 failed attempts over a period of ~20-30 seconds, then the PlanktoScope will disconnect from the Wi-Fi network and instead make its own Wi-Fi hotspot. This is meant to help prevent PlanktoScopes from getting stuck when connecting to Wi-Fi networks whose firewall settings do not allow the PlanktoScope to access the network, as the PlanktoScopes may be entirely inaccessible on such networks.</p> <p>Once you take the PlanktoScope out of range of the existing Wi-Fi network, within approximately two minutes it should automatically revert to making its own Wi-Fi hotspot network. If you then take the PlanktoScope back in range of the existing Wi-Fi network, within approximately two minutes it should automatically attempt to connect to the existing Wi-Fi network again (and, if it succeeds, it will stop the Wi-Fi hotspot network).</p> <p>Warning</p> <p>Because you can only undo this configuration change by accessing the PlanktoScope's software (or by running a Linux computer which can open and edit the <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> configuration file for Wi-Fi network connections in your PlanktoScope's SD card), we only recommend configuring your PlanktoScope to connect to an existing Wi-Fi network if 1) you also have a way to connect your device to the PlanktoScope via an Ethernet cable or if 2) you are also able to run your PlanktoScope in a location beyond the range of the existing Wi-Fi network (as that the PlanktoScope will revert to making a Wi-Fi hotspot when it cannot detect the existing Wi-Fi network) or if 3) you have a Linux computer which is able to edit files on your PlanktoScope's SD card.</p> <p>Warning</p> <p>Before you make any changes, you should first write down your PlanktoScope's machine name (which is listed in your PlanktoScope's landing page), and you should also check whether your web browser allows you to use the machine-specific URL of format <code>http://pkscope-{machine-name}.local</code> for accessing your PlanktoScope's landing page. This is because other URLs from our standard software setup guide and our basic operation guide which you may be more familiar with, such as http://planktoscope.local or http://home.pkscope or http://192.168.4.1, will not work for accessing your PlanktoScope through the existing Wi-Fi network! Only a machine-specific URL of format <code>http://pkscope-{machine-name}.local</code> may work.</p> <p>For now, the only way we recommend for connecting your PlanktoScope to an existing Wi-Fi network is by editing the <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> file; the PlanktoScope's Node-RED dashboard has a \"Wifi\" page which is partially broken (including writing an error message into the <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> file if you attempt to add a Wi-Fi network without a password) and will be removed in a future release of the PlanktoScope's software. For example, you can edit the <code>wpa_supplicant.conf</code> file by opening the file editor at http://planktoscope.local/admin/fs/files/etc/wpa_supplicant/wpa_supplicant.conf . After saving your changes to that file, you can apply them by either 1) using Cockpit's service manager to start the <code>autohotspot</code> service (e.g. at http://planktoscope.local/admin/cockpit/system/services#/autohotspot.service ), 2) waiting a few minutes for the <code>autohotspot</code> service to automatically run again, or 3) rebooting your PlanktoScope.</p> <p>You can find more information on how to edit the <code>wpa_supplicant.conf</code> file in this guide. For quick reference, here are some network configuration snippets from that link:</p> <pre><code># For password-protected networks:\nnetwork={\n  ssid=\"YourNetworkSSID\"\n\u00a0\u00a0psk=\"YourNetworkPassword\"\n\u00a0\u00a0key_mgmt=WPA-PSK\n}\n\n# For passwordless networks:\nnetwork={\n  ssid=\"YourNetworkSSID\"\n  key_mgmt=NONE\n}\n</code></pre> <p>Once your PlanktoScope is connected to an existing Wi-Fi network, you should try to access it via your PlanktoScope's machine-specific mDNS URL, which has format <code>http://pkscope-{machine-name}.local</code>. Note that this may fail if your Wi-Fi network has restrictive firewall settings, in which case you will only be able to connect to your PlanktoScope directly via Ethernet cable. Note also that this URL only works if your device and web browser both support mDNS.</p>"},{"location":"operation/networking/#connect-your-client-device-to-the-internet-while-your-planktoscope-is-not-connected-to-the-internet","title":"Connect your client device to the internet while your PlanktoScope is not connected to the internet","text":"<p>If you can connect your PlanktoScope to the internet, then it will behave like a network router, sharing its internet access with all devices connected to the PlanktoScope; that's the easiest way to have your computer/phone/etc. connected to the PlanktoScope while still being able to access the internet. However, it is often useful to connect a computer simultaneously both to the internet and to a PlanktoScope which does not have internet access. You can do this through any of the following possible approaches:</p> <ol> <li>Have your computer connect to the internet by an existing Wi-Fi network, and then connect your computer by Ethernet cable to the PlanktoScope.</li> <li>Have your computer connect to the internet by an Ethernet cable, and then connect your computer to the PlanktoScope's Wi-Fi hotspot.</li> <li>Connect a phone/tablet by USB to your computer and enable your phone/tablet's USB tethering mode to share its internet access to your computer, and then connect your computer to the PlanktoScope's Wi-Fi hotspot or to an Ethernet cable plugged into the PlanktoScope.</li> <li>Add one or two USB Wi-Fi dongles to your computer so that it has a total of two Wi-Fi adapters (one of which may be internal to your computer) and thus can connect to two Wi-Fi networks simultaneously; then configure your computer to connect to the internet by an existing Wi-Fi network using one of the Wi-Fi adapters and to simultaneously connect to the PlanktoScope's Wi-Fi hotspot using the other Wi-Fi adapter.</li> <li>Add one or two USB Ethernet adapters to your computer so that it has a total of two Ethernet adapters (one of which may be internal to your computer) and thus can connect to two Ethernet ports simultaneously; then connect one of your computer's Ethernet adapters to an Ethernet port with internet access, and connect your computer's other Ethernet adapter to the PlanktoScope.</li> <li>Connect both your computer and the PlanktoScope to an Ethernet switch, then connect your computer to the internet by an existing Wi-Fi network. Note 1: an Ethernet switch is a different kind of device than an Ethernet router. Note 2: if you then connect your Ethernet switch to an Ethernet or Wi-Fi router, then the the PlanktoScope will only be accessible if the router's firewall allows network connections to the PlanktoScope from other devices on the router's Local Area Network (LAN).</li> </ol>"},{"location":"operation/networking/#dont-allow-the-planktoscope-to-be-used-as-a-default-gateway-to-the-internet","title":"Don't allow the PlanktoScope to be used as a default gateway to the internet","text":"<p>Because by default your PlanktoScope is configured to act as a router so that it can share its internet access with all connected devices, it will advertise itself as a default gateway to the internet, so that connected devices will use the PlanktoScope as a network router for internet access. However, some computers (e.g. those running macOS or Windows) may behave as if the PlanktoScope is the only router with internet access even if the PlanktoScope actually has no internet access while the computer is also connected to a router for another network which does have internet access; then such computers will fail to access the internet while they're connected to the PlanktoScope.</p> <p>You can work around this unfortunate behavior of your computer's operating system by disabling a setting in the PlanktoScope's networking configuration so that the PlanktoScope no longer advertises itself as a router with internet access; note that doing so will prevent the PlanktoScope from being able to share its own internet access with connected devices as long as this setting is disabled. To disable this setting, run the following commands in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal (which you should log in to with the username <code>pi</code> and the <code>pi</code> user's password, which is <code>copepode</code> by default) and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-deployment-feature host/networking/interface-forwarding planktoscope-dhcp-default-route\nforklift pallet stage --no-cache-img\n</code></pre> <p>To revert this setting back to the default behavior (which is for the PlanktoScope to advertise itself as a router with internet access, so that the PlanktoScope can share its internet access with all connected devices), run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet enable-deployment-feature host/networking/interface-forwarding planktoscope-dhcp-default-route\nforklift pallet stage --no-cache-img\n</code></pre>"},{"location":"operation/networking/#secure-your-planktoscope","title":"Secure your PlanktoScope","text":"<p>This section provides instructions on various things you may want to do to improve the networking-related security of your PlanktoScope.</p>"},{"location":"operation/networking/#change-the-wi-fi-hotspots-password","title":"Change the Wi-Fi hotspot's password","text":"<p>To change the password of the PlanktoScope's Wi-Fi hotspot away from the default of <code>copepode</code>, edit the file at <code>/etc/hostapd/hostapd.conf.d/30-auth-30-planktoscope-passphrase.conf</code>. For example, you can do this by opening the file editor at http://planktoscope.local/admin/fs/files/etc/hostapd/hostapd.conf.d/30-auth-30-planktoscope-passphrase.conf . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default password, we recommend deleting the file at <code>/var/lib/overlays/overrides/etc/hostapd/hostapd.conf.d/30-auth-30-planktoscope-passphrase.conf</code>. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/hostapd/hostapd.conf.d/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/networking/#disable-the-wi-fi-hotspot","title":"Disable the Wi-Fi hotspot","text":"<p>To disable the PlanktoScope's Wi-Fi hotspot, run the following commands in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal (which you should log in to with the username <code>pi</code> and the <code>pi</code> user's password, which is <code>copepode</code> by default) and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-deployment host/networking/autohotspot\nforklift pallet stage --no-cache-img\n</code></pre> <p>To revert your changes back to the default behavior (which is for the PlanktoScope to make its own Wi-Fi hotspot when it doesn't detect any known existing Wi-Fi networks to connect to), run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet enable-deployment host/networking/autohotspot\nforklift pallet stage --no-cache-img\n</code></pre> <p>Warning</p> <p>Because you can only undo this configuration change by accessing the PlanktoScope's software, we only recommend configuring your PlanktoScope to disable its Wi-Fi hotspot if 1) you also have a way to connect your device to the PlanktoScope via an Ethernet cable or 2) you can connect to the PlanktoScope when it's connected to an existing Wi-Fi network.</p>"},{"location":"operation/networking/#allow-access-to-cockpit-from-additional-domain-names-or-ip-addresses","title":"Allow access to Cockpit from additional domain names or IP addresses","text":"<p>For security reasons, Cockpit only allows you to access Cockpit from a list of known domain names and ports (e.g. planktoscope.local and planktoscope.local:9090) and known IP addresses and ports (e.g. 192.168.4.1 and 192.168.4.1:9090). If you have connected the PlanktoScope to a network or to the internet so that you can reach the PlanktoScope from some other domain name or IP address, and you also want to access Cockpit from that other domain name or IP address, then you will need to add that domain name or IP address into the list of Cockpit's known domain names and ports.</p> <p>To add additional known domain names or IP addresses where Cockpit should be accessible, create and edit a file at <code>/etc/cockpit/origins.d/</code>, following the instructions/notes at <code>/etc/cockpit/origins.d/10-README</code> and referring to <code>/etc/cockpit/origins.d/20-localhost</code> as a reference example. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/etc/cockpit/origins.d/, and you can view the instructions/notes at http://home.pkscope/admin/fs/files/etc/cockpit/origins.d/10-README, and you can view the reference example at http://home.pkscope/admin/fs/files/etc/cockpit/origins.d/20-localhost . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default list of known domain names and IP addresses where Cockpit can be accessed, we recommend deleting the files in <code>/var/lib/overlays/overrides/etc/cockpit/origins.d/</code> and then restarting the PlanktoScope. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/cockpit/origins.d/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/networking/#change-your-planktoscopes-name","title":"Change your PlanktoScope's name","text":"<p>Your PlanktoScope has a semi-unique machine name which by default is stably and automatically generated from your Raspberry Pi's semi-unique serial number. This machine name has format <code>{adjective}-{noun}-{number up to five digits long}</code>, e.g. <code>metal-slope-23501</code> or <code>safe-minute-6738</code>. The machine name is used to generate the hostname of the PlanktoScope with the format <code>pkscope-{machine-name}</code>; and the PlanktoScope's hostname is also used to generate the name (to be precise, the SSID) of its Wi-Fi hotspot as well as the machine-specific mDNS URLs you can use to access the PlanktoScope (e.g. metal-slope-23501.local or safe-minute-6738.local).</p>"},{"location":"operation/networking/#change-the-machine-name","title":"Change the machine name","text":"<p>To change your PlanktoScope's machine name, create and edit a file at <code>/etc/machine-name</code>. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/etc/ . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default auto-generated machine name based on the Raspberry Pi's serial number, delete the file at <code>/var/lib/overlays/overrides/etc/machine-name</code> and then restart the PlanktoScope. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/networking/#change-the-hostname","title":"Change the hostname","text":"<p>To change your PlanktoScope's hostname away from the format <code>{adjective}-{noun}-{number up to five digits long}</code> without also changing the machine name, edit the file at <code>/etc/hostname-template</code>. For example, you can do this by opening the file editor at http://planktoscope.local/admin/fs/files/etc/hostname-template . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default hostname based on the machine name, we recommend deleting the file at <code>/var/lib/overlays/overrides/etc/hostname-template</code> and then restarting the PlanktoScope. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/networking/#change-the-wi-fi-hotspot-name","title":"Change the Wi-Fi hotspot name","text":"<p>To change your PlanktoScope's Wi-Fi hotspot name away from the format <code>{the first 32 characters of the hostname}</code> without also changing the hostname, edit the file at <code>/etc/hostapd/hostapd.conf-templates.d/20-ssid.conf</code>, following the instructions/notes at <code>/etc/hostapd/hostapd.conf-templates.d/10-README.conf</code>. For example, you can do this by opening the file editor at http://planktoscope.local/admin/fs/files/etc/hostapd/hostapd.conf-templates.d/20-ssid.conf, and you can view the instructions/notes at http://home.pkscope/admin/fs/files/etc/hostapd/hostapd.conf-templates.d/10-README.conf . To apply your changes, restart the PlanktoScope.</p> <p>To revert your changes back to the default Wi-Fi hotspot name based on the hostname, we recommend deleting the file at <code>/var/lib/overlays/overrides/etc/hostapd/hostapd.conf-templates.d/20-ssid.conf</code> and then restarting the PlanktoScope. For example, you can do this in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/hostapd/hostapd.conf-templates.d/ . Then restart the PlanktoScope immediately.</p>"},{"location":"operation/sample-collection/","title":"Sample collection","text":"<p>The most common way to collect samples for the PlanktoScope is to use a plankton net.</p>"},{"location":"operation/sample-collection/#plankton-net","title":"Plankton Net","text":"<p>A plankton net is a scientific tool used to collect plankton samples from aquatic environments. Plankton are small, drifting organisms that play a vital role in marine ecosystems. They include a diverse range of species, including bacteria, algae, protozoa, and small animals such as crustaceans and mollusks. Plankton nets are designed to capture these tiny organisms as they drift through the water column.</p> <p>Plankton nets typically consist of a fine mesh net attached to a long, narrow handle. The net is usually cone- or cylinder-shaped, with a small opening at the base and a wider opening at the top. The net is lowered into the water and dragged through the water column, collecting plankton as it goes. The collected plankton is then collected in a sample bottle or container for further study.</p> <p>Plankton nets can be used in a variety of aquatic environments, including oceans, lakes, and rivers. They are commonly used in scientific research to study the diversity and abundance of plankton in different ecosystems, as well as their role in the food web and the broader ecosystem. Plankton nets are also used in environmental monitoring programs to track changes in plankton populations over time.</p> <p></p> <p>The simplest device you can use is a plankton net. It should be made of a fine mesh, down to 20 micron. It can be towed behind a boat at low speed (less than 2 knots) or towed by hand in a river or a lake.</p> <p>Plankton nets can be made easily with a good sewind machine and some hardware.</p>"},{"location":"operation/software-customization/","title":"Software Customization","text":"<p>Your PlanktoScope's embedded Raspberry Pi computer has a PlanktoScope-specific operating system (the PlanktoScope OS) with software for operating your PlanktoScope. This software can be customized in various ways, for example by downloading and enabling additional apps or by adjusting the behaviors of the provided apps.</p> <p>All URLs in this guide are written assuming you access your PlanktoScope using planktoscope.local as the domain name; if you need to use a different domain name such as home.pkscope, you should substitute that domain name into the links on this page.</p>"},{"location":"operation/software-customization/#add-supported-apps","title":"Add supported apps","text":"<p>The PlanktoScope OS provides supported integration for some optional apps which are not included with the standard SD card image, in order to keep SD card image files smaller. You can download and enable these apps on a PlanktoScope which has been configured to have internet access.</p>"},{"location":"operation/software-customization/#portainer","title":"Portainer","text":"<p>Portainer is a graphical administration dashboard which provides an advanced interface for inspecting and troubleshooting running Docker containers; compared to Dozzle, which is provided by default with the PlanktoScope OS, Portainer is more powerful and much more complicated to use.</p> <p>You can install and enable Portainer on a PlanktoScope with internet access by running the following commands in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal (which you should log in to with the username <code>pi</code> and the <code>pi</code> user's password, which is <code>copepode</code> by default) and then restart the PlanktoScope:</p> <pre><code>forklift pallet enable-deployment apps/portainer\nforklift pallet stage\n</code></pre> <p>Then you will be able to access Portainer at http://planktoscope.local/admin/portainer. You should do this immediately after the first time you restart the PlanktoScope after enabling Portainer in order to set up an administrative account (including a username and a password) for controlling access to the Portainer interface; if you wait longer than five minutes before doing so, then Portainer will lock itself down, and you will then have to restart the PlanktoScope again and access Portainer within five minutes to set up the administrative account.</p> <p>To disable Portainer, run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-deployment apps/portainer\nforklift pallet stage --no-cache-img\n</code></pre>"},{"location":"operation/software-customization/#customize-provided-apps","title":"Customize provided apps","text":"<p>The apps provided by the PlanktoScope OS can be customized in various ways.</p>"},{"location":"operation/software-customization/#planktoscope-documentation-site","title":"PlanktoScope documentation site","text":"<p>The PlanktoScope OS includes a documentation site at http://planktoscope.local/ps/docs/ for offline access to the project documentation. </p>"},{"location":"operation/software-customization/#hardware-guides","title":"Hardware guides","text":"<p>By default the offline copy of the documentation site excludes the hardware setup guides at http://planktoscope.local/ps/docs/setup/hardware/, because that section of the site contains many photographs whose inclusion would significantly increase the size of the SD card images we provide for the PlanktoScope OS.</p> <p>You can download the hardware setup guides to include as part of your PlanktoScope's offline copy of the documentation site while your PlanktoScope has a (perhaps temporary) connection to the internet by running the following commands in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal (which you should log in to with the username <code>pi</code> and the <code>pi</code> user's password, which is <code>copepode</code> by default) and then restarting the PlanktoScope:</p> <pre><code>forklift pallet enable-deployment-feature apps/ps/docs full-site\nforklift pallet stage\n</code></pre> <p>Then you will be able to view the hardware setup guides at http://planktoscope.local/ps/docs/setup/hardware/.</p> <p>To revert back to hiding the hardware setup guides from the documentation site, run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-deployment-feature apps/ps/docs full-site\nforklift pallet stage --no-cache-img\n</code></pre> <p>Note that your PlanktoScope will still have a copy of the hardware setup guides even if you hide them. If you really want to delete that copy after running the above commands, you can run the following command in the Cockpit Terminal:</p> <pre><code>docker image prune -a\n</code></pre> <p>Note that this command will also delete any other downloaded copies of apps which are not currently enabled - so, for example, if you disabled Grafana, then you will only be able to re-enable Grafana once your PlanktoScope has an internet connection to re-download Grafana, and you will need to run <code>forklift pallet stage</code> instead of <code>forklift pallet stage --no-cache-img</code> (so that Grafana will be re-downloaded).</p>"},{"location":"operation/software-customization/#segmenter","title":"Segmenter","text":""},{"location":"operation/software-customization/#consecutive-mask-subtraction","title":"Consecutive mask subtraction","text":"<p>Since the v2024.0.0-beta.0 prerelease of PlanktoScope OS, the segmenter no longer subtracts consecutive segmentation masks from each other by default. We will eventually add a GUI toggle for this behavior; in the meantime, if you would like to re-enable this behavior by default, you can do so (even on a PlanktoScope without internet access) by running the following commands in the Cockpit Terminal and then restarting the PlanktoScope:</p> <pre><code>forklift pallet enable-depl-feat apps/ps/backend/proc-segmenter pipeline-subtract-consecutive-masks\nforklift pallet stage --no-cache-img\n</code></pre> <p>To revert back to disabling this behavior by default, run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-depl-feat apps/ps/backend/proc-segmenter pipeline-subtract-consecutive-masks\nforklift pallet stage --no-cache-img\n</code></pre>"},{"location":"operation/software-customization/#disable-provided-apps","title":"Disable provided apps","text":"<p>The PlanktoScope OS includes some apps which you might want to disable for some reason (e.g. as part of troubleshooting). You can disable these apps on a PlanktoScope regardless of whether it has internet access.</p>"},{"location":"operation/software-customization/#grafana","title":"Grafana","text":"<p>Grafana is a metrics visualization dashboard which is currently used by the PlanktoScope's Node-RED dashboard to provide gauges and plots of various system metrics such as CPU temperature, RAM usage, and disk space usage. A future version of the Node-RED dashboard will replace these Grafana-based plots, after which Grafana will be disabled by default in the PlanktoScope OS. If you'd like to disable Grafana in the meantime, you can run the following commands in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal (which you should log in to with the username <code>pi</code> and the <code>pi</code> user's password, which is <code>copepode</code> by default) and then restart the PlanktoScope:</p> <pre><code>forklift pallet disable-deployment apps/grafana\nforklift pallet stage --no-cache-img\n</code></pre> <p>To re-enable Grafana, run the following commands in the Cockpit Terminal and then restart the PlanktoScope:</p> <pre><code>forklift pallet enable-deployment apps/grafana\nforklift pallet stage --no-cache-img\n</code></pre>"},{"location":"operation/software-upgrades/","title":"Software Reset &amp; Upgrades","text":"<p>Your PlanktoScope's embedded Raspberry Pi computer has a PlanktoScope-specific operating system (the PlanktoScope OS) with software for operating your PlanktoScope. If you purchased a PlanktoScope, then the SD card you received with your PlanktoScope already includes a particular release of the PlanktoScope OS; if you assembled your own PlanktoScope, then you installed some release of the PlanktoScope OS following the standard software installation guide (or maybe the non-standard software installation guide). This guide provides information to help you either reset the software installed on your PlanktoScope or change to a different (newer or older) release of the PlanktoScope OS.</p> <p>The PlanktoScope project aims to keep improving the PlanktoScope software by fixing problems and making the software simpler and easier to use, releasing a new version of the software at least once each year. At the same time, we aim to keep the software compatible with all previous officially-released versions of the PlanktoScope hardware. For this reason, we strongly recommend everyone to keep their PlanktoScopes updated to run the latest stable release of the PlanktoScope software; and the PlanktoScope documentation will only support the latest stable release. You can always find the latest stable release at https://github.com/PlanktoScope/PlanktoScope/releases/latest, which will redirect you to a web page for a specific release.</p> <p>All URLs in this guide are written assuming you access your PlanktoScope using planktoscope.local as the domain name; if you need to use a different domain name such as home.pkscope, you should substitute that domain name into the links on this page.</p>"},{"location":"operation/software-upgrades/#back-up-your-data-settings","title":"Back up your data &amp; settings","text":"<p>Before you reset/upgrade/downgrade the software installed on your PlanktoScope, you may want to back up any important data and settings on your PlanktoScope. We recommend everyone to take the following actions:</p> <ul> <li>You should use the dataset file browser (accessible via a link on our PlanktoScope's landing page, or via the Node-RED dashboard's Gallery page) to download any data you don't want to lose.</li> <li>You should write down the white balance gains you have calibrated on the Node-RED dashboard's Optic Configuration page, as those values may be lost depending on how you reset or upgrade/downgrade the PlanktoScope OS.</li> <li>You should write down the hardware settings and calibrations you see on the Node-RED dashboard's Hardware Settings page, as those values may be lost depending on how you reset or upgrade/downgrade the PlanktoScope OS.</li> </ul> <p>Advanced users may also want to take the following actions, depending on what changes they have made:</p> <ul> <li>If you don't want to write down your white balance gains and hardware settings/calibrations, you can instead back up your PlanktoScope's hardware settings file, which is saved at <code>/home/pi/PlanktoScope/hardware.json</code>, for example in the file browser at http://planktoscope.local/admin/fs/files/home/pi/PlanktoScope/ . This file includes some hidden settings not exposed in the PlanktoScope's Node-RED dashboard - so if you have changed any such settings by editing this file, then you may want to back up this file.</li> <li>If you have changed your PlanktoScope's networking configurations by editing files in <code>/etc</code> (which overrides the default configuration files exported by Forklift into the operating system, as well as configuration files originally provided by the Raspberry Pi OS as part of the PlanktoScope OS), you may want to back up your changes. You can download your changes from within <code>/var/lib/overlays/overrides/etc</code>, for example in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/ .</li> <li>If you have made extensive changes to your operating system by running <code>forklift</code> commands which modified your local Forklift pallet, you may want to back them up by using Git to commit those changes and then push your local Forklift pallet (which is a local Git repository at <code>/home/pi/.local/share/forklift/pallet</code>) to a repository (e.g. on GitHub).</li> </ul>"},{"location":"operation/software-upgrades/#reset-the-planktoscope-os","title":"Reset the PlanktoScope OS","text":"<p>Multiple levels of reset are possible; from least-disruptive (and shallowest) to most-disruptive (and most thorough), they are:</p> <ol> <li> <p>(Only recommended for advanced users) If you just need to reset some or all of your operating system configuration file changes (such as those described in the networking operations guide) back to the default settings for the PlanktoScope OS, then you can just delete the relevant files (or you can even delete all files) within <code>/var/lib/overlays/overrides/etc/</code> (for example in the file browser at http://planktoscope.local/admin/fs/files/var/lib/overlays/overrides/etc/ ) and then reboot your PlanktoScope immediately afterwards.</p> </li> <li> <p>(Only recommended for advanced users) If you want to reset the running software back to the original release of the PlanktoScope OS provided with your SD card image, while keeping any customizations you have made to override default PlanktoScope OS configurations (such as those described in the networking operations guide), then you can run the following command on your PlanktoScope (for example in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal ) and then reboot your PlanktoScope:</p> <pre><code>forklift stage set-next --no-cache-img factory-reset\n</code></pre> <p>This reset will only have an effect if you had previously run a <code>forklift</code> command for configuring the OS; otherwise, it will not cause any visible change to your PlanktoScope. If your PlanktoScope is connected to the internet, you can also omit the <code>--no-cache-img</code> flag, in order to ensure that the PlanktoScope will have all necessary programs at the originally-required versions before you reboot (if you never previously took manual action to delete any Docker container images from your PlanktoScope, you don't need to worry about this and you can keep the <code>--no-cache-img</code> flag in the command).</p> </li> <li> <p>(Recommended for everyone) If you want to completely wipe your SD card and reset everything, then you should re-flash your PlanktoScope's SD card. You can do this by writing an SD card image to the SD card, following the instructions in our standard software installation guide. If you want to reset to the same release of the PlanktoScope as what you were originally using, you can check the release's version number in the \"Software Version\" field of the \"Information\" panel in the Node-RED dashboard's System Monitoring page; then you should download an SD card image for the corresponding release (as described in the software installation guide). When you re-flash the SD card, it will lose all data and non-default settings mentioned in the section of this guide on backing up your data &amp; settings.</p> </li> </ol>"},{"location":"operation/software-upgrades/#upgradedowngrade-the-planktoscope-os","title":"Upgrade/downgrade the PlanktoScope OS","text":"<p>Currently, to upgrade or downgrade your PlanktoScope to some other release of the PlanktoScope OS, we recommend flashing a new SD card with an SD card image for that release of the PlanktoScope OS, following the instructions in our standard software installation guide (or, if you are an advanced user doing something weird/interesting, using the non-standard software installation guide). That way, you can always swap back to your previous SD card if needed. If you only have one SD card, you can re-flash that SD card with the SD card image you want to run - but you will lose all your data and settings, unless you previously backed them up.</p>"},{"location":"operation/software-upgrades/#perform-an-in-place-upgradedowngrade","title":"Perform an in-place upgrade/downgrade","text":"<p>Starting with the v2024.0.0 release of the PlanktoScope OS, certain software upgrades/downgrades can be performed without re-flashing your SD card, by running a <code>forklift</code> command on a PlanktoScope connected to the internet. However, for now we only recommend using this mechanism for testing certain kinds of changes to the PlanktoScope OS (e.g. as described in specific instructions posted on the PlanktoScope Slack for software-testing volunteers), because certain kinds of frequent software changes (namely, changes to the Node-RED dashboard and the PlanktoScope hardware controller, and changes to the installed version of the <code>forklift</code> command) are not yet ready to be managed using <code>forklift</code>.</p> <p>Warning</p> <p>The PlanktoScope OS's support for in-place upgrade/downgrade functionality is still a work in progress. If you are unsure, then you should perform upgrades/downgrades by (re-)flashing your SD card, not by running a <code>forklift</code> command.</p> <p>When an in-place upgrade to a new release is possible, specific instructions and backwards-compatibility information will be mentioned in the GitHub release notes for that release. However, the general pattern will look something like running the following command (from v2024.0.0 of the PlanktoScope OS), where <code>{version-query}</code> would be replaced by a Git branch name (e.g. <code>beta</code>), tagged version (e.g. <code>v2024.0.0</code>), or (potentially-abbreviated) Git commit SHA:</p> <pre><code>forklift pallet switch github.com/PlanktoScope/pallet-standard@{version-query}\n</code></pre> <p>or one of the following commands (from v2025.0.0-alpha.0 of the PlanktoScope OS):</p> <pre><code># for a specific version:\nforklift pallet upgrade @{version-query}\n# for the latest version available in the most-recently-used version query:\nforklift pallet upgrade\n</code></pre> <p>and then rebooting after that command finishes successfully.</p> <p>Eventually (i.e. if/when it becomes feasible and safe), we may make it possible for you to turn on automatic upgrade checks, automatic background downloads of available upgrades, or even automatic installation of upgrades; those features will only have any effects on PlanktoScopes connected to the internet. However, even in that scenario some releases (once every few years) will still require you to re-flash your PlanktoScope's SD card with a new SD card image; this is because of the major release cadence of the Raspberry Pi OS, which is used for building PlanktoScope OS SD card images, and which itself is not safe to upgrade in-place.</p> <p>Info</p> <p>If you try to use <code>forklift</code> to switch to a version (prerelease/branch/commit) of <code>github.com/PlanktoScope/pallet-standard</code> or some other Forklift pallet which attempts to deploy a program which cannot start for some reason, then <code>forklift</code> will record that failure and automatically revert back to the previously-running pallet/version combination on every subsequent boot, until the next time you attempt to switch/upgrade/downgrade to some version of some pallet.</p> <p>Thus, if you find that you attempted to upgrade the PlanktoScope OS using <code>forklift</code> but your PlanktoScope automatically returned to the previous installed version of the OS after a reboot, then that means that your PlanktoScope couldn't run the newer version for some reason. Information about this will be reported if you run the command <code>forklift stage show</code>.</p>"},{"location":"operation/software-upgrades/#avoid-touching-aptapt-get","title":"Avoid touching <code>apt</code>/<code>apt-get</code>!","text":"<p>Info</p> <p>If you don't know what <code>apt</code> or <code>apt-get</code> refer to, then please skip this section and just remember to avoid running <code>apt</code> or <code>apt-get</code> commands on your PlanktoScope!</p> <p>Most of the \"interesting\" software in the PlanktoScope OS (with Cockpit being a notable exception) is not managed using Raspberry Pi OS's APT package-management system, for various reasons. It's probably safe to run APT commands to upgrade most packages installed in the PlanktoScope OS (at least for software which doesn't run during early boot, because of when the PlanktoScope OS's filesystem overlay for <code>/usr</code> is initialized), but we cannot make any guarantees or provide any support if you choose to do that. This is an issue of practicality: APT does not make it easy for us to exactly reproduce the changes to installed versions of packages caused by running <code>apt</code>/<code>apt-get</code>'s install/upgrade commands, when those commands are run at very different times; so it is not necessarily feasible for us to troubleshoot any resulting problems. If you want to undo the changes caused by running any APT commands, you should try to delete everything in <code>/var/lib/overlays/overrides/usr</code> and reboot immediately afterwards.</p>"},{"location":"operation/software-upgrades/#restore-your-data-settings","title":"Restore your data &amp; settings","text":"<p>If you reset/upgraded/downgraded the PlanktoScope OS by re-flashing your SD card, then:</p> <ul> <li>You can restore your backed-up data &amp; settings by re-uploading your backup files to their respective locations and then rebooting your PlanktoScope.</li> <li> <p>(Only relevant for advanced users) If you were running a non-standard Forklift pallet (i.e. anything other than github.com/PlanktoScope/pallet-standard) which you had pushed to a GitHub repository host (such as GitHub), then you can run a Forklift command to switch back to that pallet (assuming that your PlanktoScope has an internet connection so that it can download the pallet), for example in the Cockpit Terminal at http://planktoscope.local/admin/cockpit/system/terminal :</p> <pre><code>forklift pallet switch github.com/name-of/your-pallet@version-query\n</code></pre> <p>Afterwards, you should reboot your PlanktoScope; it will try to boot using the pallet you had specified.</p> </li> </ul>"},{"location":"operation/user-interface/","title":"User interface guide","text":"<p>This guide will help you understand how to use the Node-RED dashboard, which is the primary user interface for operating the PlanktoScope.</p> <p></p>"},{"location":"operation/user-interface/#home","title":"Home","text":"<p>When you open the \"Node-RED dashboard link\" from the PlanktoScope's landing page, you will reach a page like what is shown in the screenshot above.</p> <p>From here, you can quickly access any of the available tabs. The buttons are only the most used functionalities of the machine. Three others tabs are accessible only through the hamburger menu on the top left of the screen (the three horizontal lines):</p> <ul> <li>Wifi</li> <li>Administration</li> <li>Hardware Config</li> </ul> <p></p> <p>Tip</p> <p>This list is also available from any other tab and allows you to quickly navigate between tabs.</p>"},{"location":"operation/user-interface/#machine-shutdown","title":"Machine shutdown","text":"<p>From this page, you can also shutdown the machine when you are done.</p> <p>Warning</p> <p>It's very very very important to always shutdown the machine and wait a minute for it to completely shutdown before unplugging the power supply! You risk data corruption if you turn off power without shutting down the machine through the software!</p> <p>To shutdown the machine, first unlock the shutdown button by clicking on \"Unlock Button\".</p> <p></p> <p>You can then click on \"Shutdown\". The machine will ask for a final confirmation and will then shut itself down.</p> <p></p>"},{"location":"operation/user-interface/#sample-tab","title":"Sample Tab","text":"<p>In this page, you can enter all the information regarding the current sample you want to image. This includes the project name, the operator, but also the type of collection device you used.</p> <p></p> <p>Depending on the device you choose, the page will change to reflect the needed information.</p> <p>There is a mechanism of validation of the submitted data. Please be careful to use the format given in example for each input field.</p> <p></p> <p>The GPS status block will give you the current information on the GPS fix and location, your direction and speed. This can be used to grab the location when in the field.</p> <p></p> <p>Once all the fields are completed, you can go to the next tab by clicking the -&gt; arrow. This will make sure all the inserted data is valid.</p>"},{"location":"operation/user-interface/#optic-configuration","title":"Optic Configuration","text":"<p>This page allows you to control the optical setup of the acquisition.</p> <p></p> <p>In the Optic Characterization block, you can control to turn the light on or not. You also have to choose the optics in use in the machine.</p> <p>Warning</p> <p>Only the \"Light\" setting in the Optic Characterization panel works; everything else in that panel does not work and instead will be removed in a future version of the PlanktoScope software.</p> <p>Warning</p> <p>For now, the characteristics shown here are not true values (except if you use the 25mm/16mm lens couple).</p> <p>The Camera Settings block allows you to change the shutter speed, the ISO number and the camera white balance settings. You can set it to automatic, but it's better if you control it by hand to make sure the setting doesn't change when the acquisition is started.</p> <p>The Fluidic Manual Manipulation allows you to control the pump. You can change both the flowrate and the volume pumped. If you click on the rotating arrow, it will start the pump for the given volume at the chosen flowrate.</p> <p>The Focus Adjustment block allows you to control the focus stage. With the leftmost buttons, you can choose to move the stage quickly by one mm, either up or down. The rightmost buttons move the stage by the specified distance in the slider under.</p> <p>As with all the tabs, once you are satisfied with your focus and your image settings, you can click on \"Continue\".</p>"},{"location":"operation/user-interface/#fluidic-acquisition","title":"Fluidic Acquisition","text":"<p>Finally, this is where the magic happens! You will be able to chose the final parameters of your capture.</p> <p></p> <p>First of all, change the Fraction Size of your sample. You can then choose a unique ID for your acquisition, the number of pictures you want to take, the pumped volume (in between images), the delay to stabilize the image and the Flowcell thickness. All those settings will influence the Total imaged volume (the total volume captured during the acquisition) and the Total pumped volume.</p> <p>Warning</p> <p>Make sure the Total pumped volume is lower than the volume of your sample.</p>"},{"location":"operation/user-interface/#gallery","title":"Gallery","text":"<p>This simple page will allow you to preview and download the captured data.</p>"},{"location":"operation/user-interface/#system-monitoring","title":"System Monitoring","text":"<p>This tab allows you to view more detailed information about your PlanktoScope. The Metrics panel has graphs for monitoring the CPU temperature, memory usage, and SD card usage of your PlanktoScope's embedded Raspberry Pi computer, as well as an expandable (collapsed-by-default) panel with more detailed information about CPU usage, system load, network traffic volumes, and disk read/write volumes.</p> <p></p> <p>The Information panel shows your PlanktoScope's machine name, its hardware version, its PlanktoScope's software version, its camera model, the system time on the PlanktoScope, and the system time on the device running your web browser.</p> <p>Note: if your PlanktoScope's system time is different from your web browser's time by more than 1 minute, the Metrics graphs will be replaced with a prompt for you to change your PlanktoScope's system time to match your web browser's time:</p> <p></p> <p>You will need to change the PlanktoScope's system time (for example by pressing the button displayed in the prompt) in order for the Metrics panel to work, and in order for your PlanktoScope to record accurate timestamps with its image acquisition datasets. The system time will be accurate until your PlanktoScope shuts down; the next time you turn on your PlanktoScope, you will need to change the PlanktoScope's system time again. This is a known problem, and we will improve the usability of this situation in future versions of the PlanktoScope software.</p> <p>Warning</p> <p>The USB Backup panel doesn't always work; it will be removed in a future version of the PlanktoScope software; you should instead download files using the Gallery tab.</p> <p>Warning</p> <p>The GPS Status panel will be removed in a future version of the PlanktoScope software.</p> <p>Warning</p> <p>The Navigation panel, including its fan toggle (which doesn't work correctly) will be removed in a future version of the PlanktoScope software.</p>"},{"location":"operation/user-interface/#wifi","title":"Wifi","text":"<p>Warning</p> <p>This page will be removed in a future version of the PlanktoScope software, because it doesn't always work. You should instead refer to the network operations guide's section for connecting your PlanktoScope to an existing Wi-Fi network.</p> <p></p> <p>This page will give you information about the network the PlanktoScope is connected to. It will also allows you to connect your machine to a new WiFi network.</p> <p>Start by doing a network scan by clicking on the <code>Scan</code> button. The list will be populated with detected networks after a few seconds. You can then choose one of them, enter its password and click on <code>Add the network</code> to connect to it. The wifi network of the PlanktoScope will disappear after a few seconds, so you will need to connect back to the same network you just put the machine on.</p> <p>Finally, if you are not located in the US, please update the Country code in the field below. This will ensure the PlanktoScope complies with local Wifi regulations (such as maximum emitted power, duty cycle and such).</p> <p>Clicking on the button <code>Reset wifi networks</code> will erase ALL networks saved previously by the machine. If you do this, it will disconnect immediately from any network it's connected to, and will put up its own network.</p> <p>Info</p> <p>For now, only WPA/WPA2 Personal security is supported; Wi-Fi networks without passwords are not supported.</p> <p>Warning</p> <p>Please be mindful about the security policies of your organisation before connecting your device to a network (either through Wifi or with an Ethernet cable). A lot of research institutions don't allow devices not controlled by them to be connected to their network without first going on an approved list with a least a basic security checkup.</p>"},{"location":"operation/user-interface/#administration","title":"Administration","text":"<p>On this page you can find links to view the logs generated by the Python backend, and buttons to restart the Python backend's hardware controller or segmenter, as well as buttons to restart or shut down your PlanktoScope's Raspberry Pi computer.</p>"},{"location":"operation/user-interface/#hardware-settings","title":"Hardware Settings","text":"<p>You should not touch anything here unless you have received specific instructions to do so, e.g. as part of our post-installation configuration guide, or as part of a guide for calibrating your PlanktoScope.</p>"},{"location":"reference/","title":"Technical Reference","text":"<p>The PlanktoScope is a modular, open-source platform for high-throughput quantitative imaging of plankton samples. Its small size, ease of use, and low cost make it suitable for a variety of applications, including the monitoring of laboratory cultures or natural micro-plankton communities. It can be controlled from any WiFi-enabled device and can be easily reconfigured to meet the changing needs of the user.</p>"},{"location":"reference/#key-features","title":"Key Features","text":"<p>Here are some key features of the PlanktoScope:</p> <ol> <li>Low cost: The PlanktoScope is designed to be affordable, with parts costing under $1000.</li> <li>Modular: The PlanktoScope is modular, meaning it can be easily reconfigured to meet the changing needs of users.</li> <li>Open-source: The PlanktoScope is based on open-source hardware and software, making it accessible to a wide community of engineers, researchers, and citizens.</li> <li>Versatility: The PlanktoScope is versatile, and can be used to study a variety of plankton types, including laboratory cultures and natural micro-plankton communities.</li> <li>High-throughput: The PlanktoScope is capable of high-throughput quantitative imaging, allowing users to analyze large numbers of samples quickly and efficiently.</li> <li>WiFi-enabled: The PlanktoScope can be controlled from any WiFi-enabled device, making it easy to use and deploy in a variety of settings.</li> <li>Portable: The PlanktoScope is small and portable, making it easy to transport and use in the field.</li> <li>Ease of use: The PlanktoScope is designed to be easy to use, with instructions for assembly and use available on the PlanktoScope website.</li> </ol>"},{"location":"reference/hardware/changelog/","title":"Changelog","text":"<p>The design of the PlanktoScope's hardware has been evolving to fix usability issues and improve the quality of images captured by the PlanktoScope. Thus, multiple versions of the hardware have been developed:</p>"},{"location":"reference/hardware/changelog/#v26","title":"v2.6","text":"<p>This is the latest version of the PlanktoScope hardware, and it is the version currently sold by FairScope. It replaced the optical components so that the PlanktoScope produces higher-quality images.</p>"},{"location":"reference/hardware/changelog/#v25","title":"v2.5","text":"<p>This was the first version of the PlanktoScope hardware made commercially available by FairScope, a small business started by the inventor of the PlanktoScope in order to make it easier for people to obtain PlanktoScopes. It is a minor variation of the v2.4 hardware design and includes all of the changes made in previous hardware versions - including a custom-designed PCB HAT, a glass capillary flowcell. The mechanical structure of this design uses CNC-milled parts rather than laser-cut parts.</p>"},{"location":"reference/hardware/changelog/#v24","title":"v2.4","text":"<p>This was a prototype which replaced the ibidi u-Slide flowcell with a simpler flowcell design based on rectangular glass capillaries, in order to fix various issues with the ibidi flowcells and to make it possible for people to make their own flowcells.</p> <p>This version was only an internal prototype for the PlanktoScope development team.</p>"},{"location":"reference/hardware/changelog/#v23","title":"v2.3","text":"<p>This was a prototype version of the hardware which replaced the Adafruit Stepper Motor HAT and the Yahboom RGB Cooling HAT with a custom-designed PCB HAT, in order to simplify overall assembly and provide additional features which solved problems with the v2.1 hardware design. As a result, a different configuration of the PlanktoScope software is required to control this version of the PlanktoScope hardware, as well as subsequent hardware versions. This version also significantly changed the physical dimensions of the PlanktoScope's mechanical structure, in order to solve some problems with the v2.1 design.</p> <p>This version was only an internal prototype for the PlanktoScope development team.</p>"},{"location":"reference/hardware/changelog/#v22","title":"v2.2","text":"<p>This was a prototype version of the hardware which replaced the Adafruit Stepper Motor HAT with a Waveshare Stepper Motor HAT.</p> <p>This version was only an internal prototype for the PlanktoScope development team.</p>"},{"location":"reference/hardware/changelog/#v21","title":"v2.1","text":"<p>This is the first version of the PlanktoScope hardware which was publicly released, and it is one of the two hardware designs described in the initial paper introducing the PlanktoScope. It simplified the hardware's robustness and mechanical assembly by integrating most subsystems into a monolithic architecture whose structure uses laser-cut parts. The electronic hardware components of this design are all available off-the-shelf, using an Adafruit Stepper Motor HAT to control various actuators and a Yahboom RGB Cooling HAT to cool the PlanktoScope's embedded Raspberry Pi computer. The mechanical structure was designed for fabrication using a laser cutter. This hardware version included some design flaws, such as providing no way to replace the Raspberry Pi's micro-SD card without partially disassembling the PlanktoScope.</p>"},{"location":"reference/hardware/changelog/#v10","title":"v1.0","text":"<p>This was the first prototype of the PlanktoScope, and it is one of the two hardware designs described in the initial paper introducing the PlanktoScope. Its mechanical structure featured a fully modular, stackable architecture consisting of triangular layers which coupled together with magnets.</p> <p>This design was complicated to assemble, and it suffered from unreliable electronic communication between the modules, so it was never publicly released.</p>"},{"location":"reference/hardware/hat/","title":"PlanktoScope Hat Hardware","text":""},{"location":"reference/hardware/hat/#buses-and-gpio-pinout","title":"Buses and GPIO pinout","text":""},{"location":"reference/hardware/hat/#i2c1-bus","title":"I2C1 Bus","text":""},{"location":"reference/hardware/hat/#rtc-rv-3028-c7","title":"RTC RV-3028-C7","text":"<p>Address 0x52 Configured through a kernel driver.</p>"},{"location":"reference/hardware/hat/#oled-display","title":"OLED Display","text":"<p>Address 0x3c</p>"},{"location":"reference/hardware/hat/#led-control-lm36011","title":"LED control: LM36011","text":"<p>Address 0x64 Control through specific software, current range from 0 to 376mA in normal mode, up to 1.5A in flash mode.</p>"},{"location":"reference/hardware/hat/#spi0-bus","title":"SPI0 Bus","text":""},{"location":"reference/hardware/hat/#motor-controller-0-tmc5160","title":"Motor Controller 0: TMC5160","text":"<p>Chip Enable: SPI0_CE0 Motor Enable: GPIO23</p> <p>Diagnostic output: GPIO16 for Error output GPIO20 for Stall output</p>"},{"location":"reference/hardware/hat/#motor-controller-1-tmc5160","title":"Motor Controller 1: TMC5160","text":"<p>Chip Enable: SPI0_CE1 Motor Enable: GPIO5</p> <p>Diagnostic output: GPIO16 for Error output GPIO20 for Stall output</p>"},{"location":"reference/hardware/hat/#gpio","title":"GPIO","text":""},{"location":"reference/hardware/hat/#fan-control","title":"Fan control","text":"<p>PWM1 control through GPIO13</p>"},{"location":"reference/hardware/hat/#led-output-selection","title":"LED Output selection","text":"<p>GPIO18: high for LED1, low for LED2</p>"},{"location":"reference/hardware/hat/#led-strobe","title":"LED Strobe","text":"<p>GPIO22 for pulse</p>"},{"location":"reference/hardware/hat/#i2c0-bus","title":"I2C0 Bus","text":""},{"location":"reference/hardware/hat/#eeprom-m24c32","title":"EEPROM M24C32","text":"<p>Address 0x50 For HAT information only.</p>"},{"location":"reference/hardware/product-specs/","title":"Product Specifications","text":"<p>Product specifications for the PlanktoScope hardware are listed below for each hardwaare version. For more information on each hardware version, refer to the hardware changelog.</p>"},{"location":"reference/hardware/product-specs/#v26","title":"v2.6","text":"<p>Overview:</p> <ul> <li>Weight: 3.5 kg</li> <li> <p>Enclosure:</p> <ul> <li>Dimensions: 27.5 cm (length) x 12.5 cm (width) x 10.5 cm (height)</li> <li>Material: bamboo plywood</li> <li>Fabrication process: CNC milling</li> </ul> </li> </ul>"},{"location":"reference/hardware/product-specs/#functionalities","title":"Functionalities","text":"<ul> <li>Automated image acquisition, with a motorized pump and an embedded computer</li> <li>Precise focus adjustment, with motorized linear actuators</li> <li>Continuous mixing of input sample to prevent sedimentation of heavier particles, with a USB-powered bubbler</li> <li>On-board image processing, with the embedded computer</li> <li>Local Wi-Fi network hotspot for local operation from a connected phone, tablet or laptop, with the embedded computer</li> <li>Internet connectivity via Wi-Fi or Ethernet for remote operation, with the embedded computer</li> </ul>"},{"location":"reference/hardware/product-specs/#subsystems","title":"Subsystems","text":"<p>Optics:</p> <ul> <li> <p>Imaging characteristics:</p> <ul> <li>Optical magnification: 1.33</li> <li>Field of view: 3062 \u00b5m x 2295 \u00b5m</li> <li>Optical pixel size: 0.75 \u00b5m</li> <li>Depth of field: 95 \u00b5m</li> </ul> </li> <li> <p>Internal camera: Raspberry Pi High Quality Camera</p> <ul> <li>Sensor: Sony IMX477R</li> <li>Resolution: 12.3 Megapixels (4056 x 3040 pixels)</li> </ul> </li> <li> <p>Lenses:</p> <ul> <li>Objective lens: 12 mm focal length, M12</li> <li>Tube lens: 25 mm focal length, M12</li> <li>Lens mount: M12x0.5</li> </ul> </li> <li> <p>Illumination: white LED</p> </li> </ul> <p>Fluidics:</p> <ul> <li> <p>Flow cell: capillary with rectangular cross-section</p> <ul> <li>Thickness: 300 \u00b5m</li> <li>Material: glass</li> </ul> </li> <li> <p>Internal tubing:</p> <ul> <li>Material: Tygon S3 (contains no BPA or phthalates)</li> <li>Dimensions: 1.6 mm (1/16\") inner diameter, 3.2 mm (1/8\") outer diameter</li> <li>Connectors: Luer lock</li> </ul> </li> <li> <p>Peristaltic pump</p> </li> <li>Sample intake capacity: 20 mL</li> </ul> <p>Other internal electronics:</p> <ul> <li> <p>Embedded computer: Raspberry Pi 4 Model B</p> <ul> <li>Processor: Broadcom BCM2711, Quad core Cortex-A72 (ARM v8) 64-bit SoC @ 1.8 GHz</li> <li>Memory: 4 GB RAM</li> <li>Storage: 128 GB capacity (micro-SD card, UHS speed class 3)</li> </ul> </li> <li> <p>Control board: PlanktoScope HAT v1.2</p> </li> </ul> <p>External interfaces &amp; connectivity:</p> <ul> <li>Expansion: 2 USB 3.0 ports, 2 USB 2.0 ports</li> <li>Wired networking: Gigabit Ethernet</li> <li>Wireless networking: 2.4 GHz and 5.0 GHz 802.11ac Wi-Fi</li> <li>Power input: 12 V DC, up to 4 A of current draw (5.1 x 2.2 mm DC barrel jack, center positive)</li> <li>Latching push-button switch to toggle power</li> </ul> <p>External AC-to-DC power adapter:</p> <ul> <li>Input: 100-240 V AC, 50-60 Hz (IEC 60320 C8 socket)</li> <li>Output: 12 V DC, up to 4 A of current output (5.1 x 2.2 mm DC barrel jack, center positive)</li> <li>Dimensions: 126 mm (length) x 52 mm (width) x 35.5 mm (height)</li> <li>Weight: 0.25 kg</li> </ul>"},{"location":"reference/hardware/product-specs/#system-performance","title":"System performance","text":"<p>Image acquisition throughput:</p> <ul> <li>Volume of sample measured: 2.1 \u00b5L per acquired image</li> <li>Volume of sample pumped: ~15 \u00b5L per acquired image</li> <li>Maximum image acquisition rate: ~60 images/min</li> </ul> <p>Samples:</p> <ul> <li> <p>Object size range:</p> <ul> <li>Minimum for taxonomy: ~20 \u00b5m diameter for round objects</li> <li>Maximum: ~200 \u00b5m diameter for round objects (larger objects will clog the flow cell)</li> </ul> </li> </ul>"},{"location":"reference/hardware/product-specs/#v25","title":"v2.5","text":"<p>Overview:</p> <ul> <li> <p>Enclosure:</p> <ul> <li>Dimensions: 27.5 cm (length) x 12.5 cm (width) x 10.5 cm (height)</li> <li>Material: bamboo plywood</li> <li>Fabrication process: CNC milling</li> </ul> </li> </ul>"},{"location":"reference/hardware/product-specs/#functionalities_1","title":"Functionalities","text":"<ul> <li>Automated image acquisition, with a motorized pump and an embedded computer</li> <li>Precise focus adjustment, with motorized linear actuators</li> <li>Continuous mixing of input sample to prevent sedimentation of heavier particles, with a USB-powered bubbler</li> <li>On-board image processing, with the embedded computer</li> <li>Local Wi-Fi network hotspot for local operation from a connected phone, tablet or laptop, with the embedded computer</li> <li>Internet connectivity via Wi-Fi or Ethernet for remote operation, with the embedded computer</li> </ul>"},{"location":"reference/hardware/product-specs/#subsystems_1","title":"Subsystems","text":"<p>Optics:</p> <ul> <li> <p>Imaging characteristics:</p> <ul> <li>Field of view: 3670 \u00b5m x 2675 \u00b5m</li> <li>Optical pixel size: 0.88 \u00b5m</li> </ul> </li> <li> <p>Internal camera: Raspberry Pi High Quality Camera</p> <ul> <li>Sensor: Sony IMX477R</li> <li>Resolution: 12.3 Megapixels (4056 x 3040 pixels)</li> </ul> </li> <li> <p>Lenses:</p> <ul> <li>Objective lens: 16 mm focal length, M12</li> <li>Tube lens: 25 mm focal length, M12</li> <li>Lens mount: M12x0.5</li> </ul> </li> <li> <p>Illumination: white LED</p> </li> </ul> <p>Fluidics:</p> <ul> <li> <p>Flow cell: capillary with rectangular cross-section</p> <ul> <li>Thickness: 300 \u00b5m</li> <li>Material: glass</li> </ul> </li> <li> <p>Internal tubing:</p> <ul> <li>Material: Tygon S3 (contains no BPA or phthalates)</li> <li>Dimensions: 1.6 mm (1/16\") inner diameter, 3.2 mm (1/8\") outer diameter</li> <li>Connectors: Luer lock</li> </ul> </li> <li> <p>Peristaltic pump</p> </li> <li>Sample intake capacity: 20 mL</li> </ul> <p>Other internal electronics:</p> <ul> <li> <p>Embedded computer: Raspberry Pi 4 Model B</p> <ul> <li>Processor: Broadcom BCM2711, Quad core Cortex-A72 (ARM v8) 64-bit SoC @ 1.8 GHz</li> <li>Memory: 4 GB RAM</li> <li>Storage: 128 GB capacity (micro-SD card, UHS speed class 3)</li> </ul> </li> <li> <p>Control board: PlanktoScope HAT v1.2</p> </li> </ul> <p>External interfaces &amp; connectivity:</p> <ul> <li>Expansion: 2 USB 3.0 ports, 2 USB 2.0 ports</li> <li>Wired networking: Gigabit Ethernet</li> <li>Wireless networking: 2.4 GHz and 5.0 GHz 802.11ac Wi-Fi</li> <li>Power input: 12 V DC, up to 4 A of current draw (5.1 x 2.2 mm DC barrel jack, center positive)</li> <li>Latching push-button switch to toggle power</li> </ul> <p>External AC-to-DC power adapter:</p> <ul> <li>Input: 100-240 V AC, 50-60 Hz (IEC 60320 C8 socket)</li> <li>Output: 12 V DC, up to 4 A of current output (5.1 x 2.2 mm DC barrel jack, center positive)</li> <li>Dimensions: 126 mm (length) x 52 mm (width) x 35.5 mm (height)</li> <li>Weight: 0.25 kg</li> </ul>"},{"location":"reference/hardware/product-specs/#system-performance_1","title":"System performance","text":"<p>Image acquisition throughput:</p> <ul> <li>Volume of sample pumped: ~15 \u00b5L per acquired image</li> <li>Maximum image acquisition rate: ~60 images/min</li> </ul> <p>Samples:</p> <ul> <li> <p>Object size range:</p> <ul> <li>Maximum: ~200 \u00b5m diameter for round objects (larger objects will clog the flow cell)</li> </ul> </li> </ul>"},{"location":"reference/hardware/product-specs/#v21","title":"v2.1","text":"<p>Overview:</p> <ul> <li> <p>Enclosure:</p> <ul> <li>Dimensions: ~32 cm (length) x ~5.5 cm (width) x ~15 cm (height)</li> <li>Material: acrylic, plywood, or fiberboard</li> <li>Fabrication process: laser cutting</li> </ul> </li> </ul>"},{"location":"reference/hardware/product-specs/#functionalities_2","title":"Functionalities","text":"<ul> <li>Automated image acquisition, with a motorized pump and an embedded computer</li> <li>Precise focus adjustment, with motorized linear actuators</li> <li>On-board image processing, with the embedded computer</li> <li>Local Wi-Fi network hotspot for local operation from a connected phone, tablet or laptop, with the embedded computer</li> <li>Internet connectivity via Wi-Fi or Ethernet for remote operation, with the embedded computer</li> </ul>"},{"location":"reference/hardware/product-specs/#subsystems_2","title":"Subsystems","text":"<p>Optics:</p> <ul> <li> <p>Imaging characteristics:</p> <ul> <li>Field of view: 2300 \u00b5m x 1730 \u00b5m</li> <li>Optical pixel size: 0.75 \u00b5m</li> </ul> </li> <li> <p>Internal camera: Raspberry Pi Camera Module 2</p> <ul> <li>Sensor: Sony IMX219</li> <li>Resolution: 8 Megapixels (3280 x 2464 pixels)</li> </ul> </li> <li> <p>Lenses:</p> <ul> <li>Objective lens: 12 mm focal length, M12</li> <li>Tube lens: 25 mm focal length, M12</li> <li>Lens mount: M12x0.5</li> </ul> </li> <li> <p>Illumination: white LED</p> </li> </ul> <p>Fluidics:</p> <ul> <li> <p>Flow cell: ibidi \u00b5-Slide I Luer channel slide</p> <ul> <li>Thickness: 200 \u00b5m, 400 \u00b5m, 600 \u00b5m, or 800 \u00b5m</li> <li>Material: Plastic (no surface modification)</li> </ul> </li> <li> <p>Internal tubing:</p> <ul> <li>Material: Tygon S3 (contains no BPA or phthalates)</li> <li>Dimensions: 1.6 mm (1/16\") inner diameter, 3.2 mm (1/8\") outer diameter</li> <li>Connectors: Luer lock</li> </ul> </li> <li> <p>Peristaltic pump</p> </li> <li>Sample intake capacity: 20 mL</li> </ul> <p>Other internal electronics:</p> <ul> <li> <p>Embedded computer: Raspberry Pi 4 Model B</p> <ul> <li>Processor: Broadcom BCM2711, Quad core Cortex-A72 (ARM v8) 64-bit SoC @ 1.8 GHz</li> <li>Memory: 4 GB RAM</li> </ul> </li> <li> <p>Control boards:</p> <ul> <li> <p>Adafruit Stepper Motor HAT</p> <ul> <li>Input voltage: 5 - 12 V DC</li> <li>Output voltage: 4.5 - 13.5 V DC</li> <li>Output current: up to 1.2 A continuous, 3 A peak</li> </ul> </li> <li> <p>Adafruit Ultimate GPS HAT</p> </li> </ul> </li> </ul> <p>External interfaces &amp; connectivity:</p> <ul> <li>Expansion: 2 USB 3.0 ports, 2 USB 2.0 ports, 2 micro-HDMI ports</li> <li>Wired networking: Gigabit Ethernet</li> <li>Wireless networking: 2.4 GHz and 5.0 GHz 802.11ac Wi-Fi</li> <li>Power input for embedded computer: 5 V DC, up to 3 A of current draw (USB-C)</li> <li>Power input for motors: 5 - 12 V DC, depending on pump motor (5.1 x 2.2 mm DC barrel jack, center positive)</li> </ul>"},{"location":"reference/software/changelog/","title":"Changelog","text":"<p>All notable changes to the PlanktoScope's software will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project uses Calendar Versioning with a <code>YYYY.minor.patch</code> scheme for all releases after <code>v2.3.0</code>. All dates in this file are given in the UTC time zone.</p>"},{"location":"reference/software/changelog/#v202400-2024-12-25","title":"v2024.0.0 - 2024-12-25","text":""},{"location":"reference/software/changelog/#added","title":"Added","text":"<ul> <li>(Application: Documentation) The embedded documentation site now includes a PDF of a draft of v4 of the protocols.io protocol for PlanktoScope operation.</li> </ul>"},{"location":"reference/software/changelog/#removed","title":"Removed","text":"<ul> <li>(Application: Documentation) The embedded documentation site no longer includes links or PDFs for v2 of the protocols.io protocol for PlanktoScope operation and v3 of the protocols.io protocol for PlanktoScope operation.</li> </ul>"},{"location":"reference/software/changelog/#deprecated","title":"Deprecated","text":"<ul> <li>(Application: GUI) The following elements of the Node-RED dashboard's \"Optic Configuration\" tab will be removed in a future release (probably the next major release): \"objective lens aperture\", \"magnification\", \"pixel resolution\", \"smallest cells to explore\", \"biggest cells to explore\". This is because these fields are currently not very useful/reliable.</li> <li>(Application: GUI) The following elements of the Node-RED dashboard's \"Segmentation\" tab will be removed in a future release (probably the next major release): \"area chart\". This is because the area chart is often buggy and is not very informative.</li> <li>(Application: GUI) The following elements of the Node-RED dashboard's \"System Monitoring\" tab will be removed in a future release (probably the next major release): \"GPS status\", \"navigation\", \"USB backup\". Note that v2024.0.0-alpha.2 already deprecated \"USB backup\" panel for removal in the next major release. The other deprecations are because most users don't have a working GPS module, and because the navigation panel is not very useful.</li> <li>(Application: GUI) The Node-RED dashboard's \"WiFi\" tab will be removed in a future release (probably the next major release). This is because its left panel is never accurate, and its right panel only partially works, and the actions which can be performed in this tab can take the PlanktoScope into a state which can only be recovered by advanced users or by re-flashing the PlanktoScope's SD card. After removal of this tab, connections to existing Wi-Fi networks should instead be configured by editing <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>, or (in the future) by some other command-line interface and/or graphical user interface.</li> </ul>"},{"location":"reference/software/changelog/#fixed","title":"Fixed","text":"<ul> <li>(Application: backend) The segmenter now correctly sets the <code>img_rank</code> metadata field of the EcoTaxa export to <code>1</code>, instead of setting it to an incrementing index which makes exports un-importable by EcoTaxa for datasets with more than ~32,000 objects.</li> </ul>"},{"location":"reference/software/changelog/#v202400-beta3-2024-11-30","title":"v2024.0.0-beta.3 - 2024-11-30","text":""},{"location":"reference/software/changelog/#added_1","title":"Added","text":"<ul> <li>(Application: Documentation) The embedded documentation site now includes v3 of the protocols.io protocol for PlanktoScope operation</li> <li>(Application: GUI) The landing page now links to v3 of the protocols.io protocol for PlanktoScope operation.</li> <li>(Application: GUI) The landing page now shows a warning/info message for users accessing the landing page using any domain name other than <code>pkscope-{machine-name}.local</code>, that such a hostname will not work for accessing the PlanktoScope via Wi-Fi router or Ethernet router, and that <code>pkscope-{machine-name}.local</code> must be used in such situations.</li> </ul>"},{"location":"reference/software/changelog/#removed_1","title":"Removed","text":"<ul> <li>(Application: Documentation) The embedded documentation site no longer includes v1 of the protocols.io protocol for PlanktoScope operation</li> <li>(Application: GUI) The landing page no longer links to v1 of the protocols.io protocol for PlanktoScope operation.</li> </ul>"},{"location":"reference/software/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>(Breaking change; Application: backend) The segmenter's previously incorrect method for filtering segmented objects by size has now been corrected to filter object sizes by filled area rather than bounding box area, and directly using the mesh size as the threshold for equivalent spherical diameter (ESD) instead of calculating a fictional ESD.</li> <li>(System: networking) A regression in handling of the mDNS domain name <code>pkscope-{machine-name}.local</code> (likely introduced by v2024.0.0-beta.0) has been fixed, so that now that domain name is resolved again.</li> </ul>"},{"location":"reference/software/changelog/#v202400-beta2-2024-09-19","title":"v2024.0.0-beta.2 - 2024-09-19","text":""},{"location":"reference/software/changelog/#added_2","title":"Added","text":"<ul> <li>(System: administration) Added a Forklift-deployed script <code>/usr/libexec/prepare-custom-image</code> (which must be invoked with <code>sudo</code>) to reset machine-specific files and re-enable partition resizing and shut down the Raspberry Pi, in order to automate common tasks needed for making a custom SD card image from a booted Raspberry Pi running the PlanktoScope OS. Support for this script should be considered experimental - this was mainly added as a workaround to a developer-experience regression introduced after v2023.9.0, in which an additional step is now needed after making an SD card image from a previously-booted SD card, or else the image will result in an error message loop (\"Partition #2 contains a ext4 signature\") during boot and will be unable to resize the image above 8 GB. That step is now included by the added script. Creation of custom SD card images from booted PlanktoScope OS images should still be considered an experimental workflow which may experience breaking changes to the developer experience at any time.</li> </ul>"},{"location":"reference/software/changelog/#changed","title":"Changed","text":"<ul> <li>(Application: GUI) Changed the default ISO value from 100 to 150.</li> </ul>"},{"location":"reference/software/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>(Application: backend) Changed the hardware controller's libcamera-based camera controller to initialize its default image gain based on camera sensor type in order to match the GUI's default ISO value of 150, instead of initializing default image gain to 1.0 regardless of camera sensor type.</li> <li>(Breaking change; Application: backend) Changed the segmenter to include the acquisition ID in the filename of the metadata TSV file included with the EcoTaxa export ZIP archive; this is necessary to allow efficient bulk importing of such ZIP archives into EcoTaxa, which was previously prevented by the use of the same <code>ecotaxa_export.tsv</code> filename for all metadata TSV files.</li> <li>(Application: GUI) The Grafana server's CPU allowance should now be limited to one core, in an attempt to prevent it from starving other programs of CPU time shortly after booting up under certain situations.</li> </ul>"},{"location":"reference/software/changelog/#v202400-beta1-2024-06-24","title":"v2024.0.0-beta.1 - 2024-06-24","text":""},{"location":"reference/software/changelog/#added_3","title":"Added","text":"<ul> <li>(Application: GUI) On the <code>planktoscopehat</code> SD card image, the Node-RED dashboard's homepage now asks the user to set the hardware version (choosing between v2.3, v2.5, and v2.6) as a first-boot setup step; this dialog replaces the navigation buttons on the homepage until a hardware version is set.</li> <li>(Release) A <code>fairscope-latest</code> SD card image is now provided which is identical to the <code>planktoscopehat</code> SD card image, except that its default settings configuration file is for the v2.6 PlanktoScope hardware (so that the homepage does not ask the user to choose a hardware version).</li> <li>(System: administration) The Forklift pallet provided by default as the SD card image is now named (and pinned as) the <code>factory-reset</code> staged pallet bundle.</li> <li>(System: networking) The <code>planktoscope.local</code> mDNS name was deprecated in v2023.9.0-beta.1, but now it's un-deprecated (i.e. official support for this name is added back to the project). As before, you can still use <code>pkscope.local</code> or the machine-specific mDNS name (of format <code>pkscope-{machine-name}.local</code>) instead of <code>planktoscope.local</code>.</li> </ul>"},{"location":"reference/software/changelog/#changed_1","title":"Changed","text":"<ul> <li>(Breaking change; Application: GUI) The default settings configuration file for the <code>planktoscopehat</code> SD card image has been reverted to be for the v2.5 PlanktoScope hardware (reverting a change made for v2024.0.0-alpha.2); in v2024.0.0-alpha.2, it was for the v2.6 hardware, while in previous versions it was still for the v2.5 hardware.</li> <li>(Release) SD card images are now released with xz compression (as <code>.img.xz</code> files) rather than gzip compression (as <code>.img.gz</code> files).</li> </ul>"},{"location":"reference/software/changelog/#removed_2","title":"Removed","text":"<ul> <li>(Application: GUI) On the <code>planktoscopehat</code> SD card image, a hardware version is no longer set in the default <code>config.json</code> file provided on the image. Instead, the user must select their hardware version when they open the Node-RED dashboard's homepage for the first time.</li> <li>(Application: GUI) The Node-RED dashboard's Administration page's \"Dashboard Errors\" panel has been removed, because it doesn't show any useful messages.</li> <li>(System) <code>gcc</code> has been removed from the SD card image, to help reduce SD card image size.</li> </ul>"},{"location":"reference/software/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>(Application: GUI) The flowcell setting from the <code>config.json</code> file should now be properly displayed as the default selection on the Node-RED dashboard's \"Fluidic Acquisition\" page.</li> </ul>"},{"location":"reference/software/changelog/#v202400-beta0-2024-06-07","title":"v2024.0.0-beta.0 - 2024-06-07","text":""},{"location":"reference/software/changelog/#changed_2","title":"Changed","text":"<ul> <li>(Application: GUI) The ISO selector in the \"Optic Configuration\" page has been changed from a button group to a slider (with an increment of 50), to enable somewhat finer adjustment of the ISO setting.</li> <li>(Breaking change; System) The official SD card images of PlanktoScope OS are now based on the 64-bit (arm64) version of the 2024-03-12 build of Raspberry Pi OS 11 (bullseye), instead of the 32-bit (armhf) version of the 2023-05-03 build of Raspberry Pi OS 11 (bullseye). This increases the performance of the Python segmenter, potentially by a factor of 2. This is expected to break compatibility with the raspimjpeg-based imaging module. If you need a 32-bit version of PlanktoScope OS, you will need to run the OS setup scripts following the PlanktoScope project's documentation's \"Non-standard installation\" guide for software setup.</li> <li>(System: administration) The <code>machine-name</code> binary is no longer provided by the OS setup scripts, but instead is provided by Forklift for upgradeability (by upgrading the pallet applied to the Raspberry Pi) &amp; removeability/replaceability (by switching to a different pallet which provides a different version of - or does not provide - the <code>machine-name</code>).</li> </ul>"},{"location":"reference/software/changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li>(System: networking)</li> <li>(System) 32-bit versions of PlanktoScope OS (which can be set up on a 32-bit version of Raspberry Pi OS using the OS setup scripts) are no longer officially supported by the project, but they will continue to work for v2024.0.0 of PlanktoScope OS.</li> </ul>"},{"location":"reference/software/changelog/#removed_3","title":"Removed","text":"<ul> <li>(Application: GUI) The landing page's links to Portainer have been removed, as part of the deprecation in v2024.0.0-alpha.2 of the inclusion of Portainer by default in the PlanktoScope OS's SD card images.</li> </ul>"},{"location":"reference/software/changelog/#fixed_4","title":"Fixed","text":"<ul> <li>(Application: GUI) The landing page's links to offline PDF copies of the protocols.io protocols for PlanktoScope operation are no longer broken.</li> <li>(Application: GUI) The maximum allowed value in the ISO selector in the \"Optic Configuration\" page has been reduced from 800 to 650, but only for the planktoscopehat version of the Node-RED dashboard; maximum allowed value is still 800 in the adafruithat version of the Node-RED dashboard. This change is because v2024.0.0-alpha.2's change to the scaling factor for converting between ISO settings and camera gains in the picamera2 library has meant that ISO values above 650 were converted to image gain values which were silently rejected for the Raspberry Pi HQ Camera used PlanktoScopes with hardware version at or above v2.3; this, this change prevents users from setting ISO values which would be silently rejected by the Python hardware controller.</li> </ul>"},{"location":"reference/software/changelog/#v202400-alpha2-2024-04-25","title":"v2024.0.0-alpha.2 - 2024-04-25","text":""},{"location":"reference/software/changelog/#added_4","title":"Added","text":"<ul> <li>(System: administration) The hostname can now be customized by modifying the hostname template (with string interpolation for the machine name) in <code>/etc/hostname-template</code>.</li> <li>(System: administration) The Cockpit configuration can now be customized by adding configuration snippets as drop-in files in <code>/etc/cockpit/cockpit.conf.d</code>, and adding origins to allow in <code>/etc/cockpit/origins.d</code>, and adding templated origins (with string interpolation for the machine name, the hostname, and the custom domain) to allow in <code>/etc/cockpit/origins-templates.d</code>.</li> <li>(System: administration) The dnsmasq configuration can now be customized by adding templated drop-in configuration files (with string interpolation for the machine name, the hostname, and the custom domain) in <code>/etc/dnsmasq-templates.d</code>, and by modifying the custom domain (which defaults to <code>pkscope</code>) in <code>/etc/custom-domain</code>.</li> <li>(System: administration) The hostapd configuration can now be customized by adding configuration snippets as drop-in files in <code>/etc/hostapd/hostapd.conf.d</code>, and adding templated drop-in files (with string interpolation for the machine name, the hostname, and the custom domain) in <code>/etc/hostapd/hostapd.conf-templates.d</code>.</li> <li>(System: administration) The hosts file can now be customized can now be customized by adding snippets as drop-in files at <code>/etc/hosts.d</code>, and and adding templated snippets (with string interpolation for the machine name, the hostname, and the custom domain) in <code>/etc/hosts-templates.d</code>.</li> <li>(System: administration) SSH host keys for the SSH server are now automatically generated (if deleted or otherwise missing) during every boot, not just during the first boot.</li> </ul>"},{"location":"reference/software/changelog/#changed_3","title":"Changed","text":"<ul> <li>(Breaking change; Application: backend) Previously, the segmenter's default behavior was to subtract consecutive masks to try to mitigate image-processing issues with objects which get stuck to the flowcell during imaging. However, when different objects occupied the same space in consecutive frames, the subtraction behavior would subtract one object's mask from the mask of the other object in the following frame, which would produce clearly incorrect masks. This behavior is no longer enabled by default; in order to re-enable it, you should enable the <code>pipeline-subtract-consecutive-masks</code> feature flag in the <code>apps/ps/backend/proc-segmenter</code> package deployment of the local Forklift pallet and re-apply the pallet.</li> <li>(Application: backend, GUI) The image quality of frames in the camera preview stream is increased, and frames also have greater width and height.</li> <li>(Breaking change; Application: GUI) The default settings configuration file for the <code>planktoscopehat</code> SD card image is now for the v2.6 PlanktoScope hardware; previously, it was still for the v2.5 hardware.</li> <li>(Breaking change; System: administration) The minimum supported Forklift version for Forklift pallets has increased from v0.4.0 to v0.7.0, due to new integration between Forklift and the filesystem.</li> <li>(System: administration) Forklift has been upgraded to v0.7.0, so that pallets are staged before being applied (and with automatic fallback to the last successfully-applied staged pallet), and so that systemd services, <code>/etc</code> config files, and some scripts in <code>/usr</code> are now managed by Forklift.</li> <li>(System: administration) <code>/etc</code> is now a overlay filesystem with all manually-edited files saved at <code>/var/lib/overlays/overrides/etc</code>.</li> <li>(System: administration) <code>/usr</code> is now a overlay filesystem with all manually-edited files saved at <code>/var/lib/overlays/overrides/usr</code>.</li> </ul>"},{"location":"reference/software/changelog/#deprecated_2","title":"Deprecated","text":"<ul> <li>(System: administration, troubleshooting; Application: GUI) Portainer will no longer be installed/provided by default after v2024.0.0. This is because it requires inclusion of a relatively large Docker container image in the PlanktoScope OS's SD card image (which is constrained to be up to 2 GB in size so that it can be attached as an upload to GitHub Releases), and because it has an annoying first-time user experience (i.e. that a password must be set within a few minutes of boot, or else the Portainer container must be restarted), and because Dozzle already provides all the basic functionalities needed by most users, and because Portainer has never actually been used for troubleshooting within the past year of the project, and because Portainer has a nontrivial impact on the sizes of the PlanktoScope OS SD card images (which are limited to 2 GB).</li> <li>(System: administration; Application: GUI) The \"USB backup\" functionality of the Node-RED dashboard will be removed in v2024.1.0 (the next release after v2024.0.0). Instead, you should use the datasets file browser for backing up and deleting dataset files on your PlanktoScope.</li> <li>(Application: backend) The raspimjpeg-based imaging module in the Python hardware controller has not yet been deleted so that you can change the Python hardware controller code to switch back from the new picamera2-based imaging module if picamera2 ends up causing big problems for you. However, we are deprecating the raspimjpeg-based imaging module, and we will fully delete it in a future release (perhaps v2024.1.0, or perhaps later).</li> </ul>"},{"location":"reference/software/changelog/#fixed_5","title":"Fixed","text":"<ul> <li>(Application: GUI) The white balance input validation, which previously only allowed gains between 1.0 and 8.0, now allows gains in the full range allowed by the camera (i.e. between 0.0 and 32.0).</li> <li>(Application: backend, GUI) The incorrect scaling factor for converting between ISO settings (in the Node-RED dashboard) and image gains in the new picamera2-based imager is fixed.</li> <li>(System: networking) Some uncommon edge cases for packet forwarding (e.g. accessing a one of the PlanktoScope's static IP addresses on a network interface not associated with that static IP address) should work now.</li> </ul>"},{"location":"reference/software/changelog/#v202400-alpha1-2024-03-26","title":"v2024.0.0-alpha.1 - 2024-03-26","text":""},{"location":"reference/software/changelog/#changed_4","title":"Changed","text":"<ul> <li>(Breaking change; System: setup) The word <code>pscopehat</code> has been replaced with <code>planktoscopehat</code> everywhere. This means that any distro setup scripts/commands you previously used with <code>pscopehat</code> should be changed.</li> <li>(Breaking change; Application: hardware controller) The hardware controller now uses <code>picamera2</code> instead of <code>raspimjpeg</code> for camera control. This may require different ISO and white balance gains to be used. It also no longer limits the framerate of the camera preview, so the preview stream should adapt to the bandwidth available on your network connection and the system resources available to your web browser; this may increase resource usage on your web browser.</li> </ul>"},{"location":"reference/software/changelog/#deprecated_3","title":"Deprecated","text":"<ul> <li>(Application: GUI) The current Node-RED dashboard (both the version for the Adafruit HAT and the version for the PlanktoScope HAT) is transitioning to maintenance mode: no new features will be added, and any bugs will be only be fixed if someone volunteers to fix them. The current Node-RED dashboard will be completely replaced by a fully-rewritten Node-RED dashboard, though there is no timeline for completion of that new dashboard. Currently, our plan for deprecating and eventually removing the current Node-RED dashboard is as follows: maintenance mode (no new features, only some bugfixes), then deprecation (no maintenance; not enabled by default, but still installed), then removal (not installed by default, but anyone is free to install it and see if it still works); deprecation will not occur before the rewritten Node-RED dashboard is stable for general-purpose usage. If you have concerns, please share your feedback on GitHub, in an email, or on the PlanktoScope Slack.</li> </ul>"},{"location":"reference/software/changelog/#fixed_6","title":"Fixed","text":"<ul> <li>(Breaking change; Application: backend) The default hardware configuration file for the <code>planktoscopehat</code> SD card image is now for the v2.6 PlanktoScope hardware; previously, it was (incorrectly) a mixture of v2.5 and v2.6 optical settings.</li> <li>(Application: hardware controller) The camera no longer overexposes captured images compared to the camera preview stream, and it no longer produces camera timeout errors.</li> <li>(Application: backend) The segmenter should no longer have file permissions errors when trying to read or write files in directories created by Docker or by the Python hardware controller.</li> </ul>"},{"location":"reference/software/changelog/#v202400-alpha0-2024-02-06","title":"v2024.0.0-alpha.0 - 2024-02-06","text":""},{"location":"reference/software/changelog/#added_5","title":"Added","text":"<ul> <li>(System: networking) Added support to share internet access and browser application access over additional network interfaces: a second Wi-Fi module, an additional Ethernet adapter, and a USB networking interface (made by plugging a phone to the Raspberry Pi in USB tethering mode).</li> <li>(Application: GUI) The \"System Monitoring\" page now shows the current system time on the Raspberry Pi and the current time in the web browser of the client device.</li> <li>(Application: GUI) The \"System Monitoring\" page now detects when the Raspberry Pi's system time is very different from the web browser's time, and shows a message and a button to change the Raspberry Pi's system time to match the web browser's time.</li> <li>(Application: GUI) The \"System Monitoring\" page's system metrics panel is now collapsible, and it now includes an expandable \"Detailed History\" subsection to view additional information.</li> <li>(System: administration) Added Dozzle as a viewer for Docker container logs.</li> <li>(System: networking) Added <code>lynx</code> as an alternative terminal web browser to <code>w3m</code> for trying to work through captive portals on the Cockpit terminal.</li> <li>(System: administration) Added Prometheus as a metrics collection &amp; storage system.</li> <li>(System: administration) Added Grafana as a metrics visualization &amp; alerting system.</li> </ul>"},{"location":"reference/software/changelog/#changed_5","title":"Changed","text":"<ul> <li>(Application: GUI) The \"System Monitoring\" page now uses a Grafana dashboard to display metrics.</li> <li>(Application: GUI) The \"Fluidic Acquisition\" page now uses a numeric text input instead of a slider for adjusting the \"Pumped volume\" setting, to make it easier to change the setting to a different exact value.</li> <li>(Application: GUI) On the \"Sample\" page, the input fields of the \"Sample Location\"/\"Net Throw Location\"/\"Net Retrieval Location\"/\"Culture Date and Time\" panels no longer get cleared when pressing the \"Validate\" button.</li> <li>(System: administration) Docker commands can now be run without <code>sudo</code>.</li> <li>(System: security) <code>ufw</code> has been replaced with <code>firewalld</code>. However, <code>firewalld</code> has not yet been properly configured.</li> <li>(System) The PlanktoScope's machine name is now saved to <code>/var/lib/planktoscope/machine-name</code> instead of <code>/home/pi/.local/etc/machine-name</code>, and it's now saved without a trailing newline.</li> </ul>"},{"location":"reference/software/changelog/#removed_4","title":"Removed","text":"<ul> <li>(Application: GUI) The \"System Monitoring\" page no longer displays a gauge for the CPU usage, since that information does not need to be monitored to ensure system stability &amp; usability. Instead, a CPU usage history graph can be found in the new \"Detailed History\" subsection.</li> <li>(System: administration) Removed <code>cockpit-storaged</code>, which was not useful enough to justify the number (and size of) unneeded dependencies it pulled in for the PlanktoScope software SD card image.</li> <li>(System: setup) Removed some unnecessary <code>apt-get update</code> commands for a very minor speed-up in the distro setup process.</li> </ul>"},{"location":"reference/software/changelog/#fixed_7","title":"Fixed","text":"<ul> <li>(Application: GUI) The \"Filtered volume\" field (on the \"Sample\" page) is now saved as the <code>sample_total_volume</code> metadata field for all sample types, not just horizontal Plankton tows (corresponding to the \"Plankton net\", \"High Speed Net\", and \"Tara decknet\" sample types).</li> <li>(System) Boot time has been made faster by approximately 1 minute.</li> <li>(Application: GUI) On Mozilla Firefox, the embedded file browser in the Node-RED dashboard's \"Gallery\" page should now consistently load with the correct height, instead of sometimes loading with an absurdly small height.</li> <li>(System: networking) The Raspberry Pi now correctly detects a phone connected in USB tethering mode to share internet access regardless of when the phone was connected, instead of only detecting that phone if USB tethering mode was enabled early in startup (specifically, before the <code>dhcpcd</code> service had started).</li> <li>(System: networking) Functionality for automatically updating the <code>/etc/hosts</code> file and the hostname based on the machine name has now been split into two separate system services, <code>planktoscope-org.update-hosts-machine-name.service</code> and <code>planktoscope-org.update-hostname-machine-name.service</code>.</li> </ul>"},{"location":"reference/software/changelog/#v202390-2023-12-30","title":"v2023.9.0 - 2023-12-30","text":"<p>(this release involves no changes from v2023.9.0-beta.2; it's just a promotion of v2023.9.0-beta.2 to a stable release)</p>"},{"location":"reference/software/changelog/#v202390-beta2-2023-12-02","title":"v2023.9.0-beta.2 - 2023-12-02","text":""},{"location":"reference/software/changelog/#added_6","title":"Added","text":"<ul> <li>(Application) A hardware configuration file for PlanktoScope hardware v2.6, which was previously missing, has been added. It is now the default hardware configuration file for <code>pscopehat</code> builds of the PlanktoScope distro.</li> </ul>"},{"location":"reference/software/changelog/#changed_6","title":"Changed","text":"<ul> <li>(System: infrastructure) Forklift has been upgraded from v0.3.1 to v0.4.0, which includes breaking changes to the schema of Forklift repositories and pallets.</li> </ul>"},{"location":"reference/software/changelog/#removed_5","title":"Removed","text":"<ul> <li>(Application: documentation) The offline documentation included on the PlanktoScope now omits the hardware setup guides.</li> </ul>"},{"location":"reference/software/changelog/#fixed_8","title":"Fixed","text":"<ul> <li>(Application: GUI) The white balance gains are now only validated and sent to the backend after the user changes focus away from the input field, instead of being validated and sent 300 ms after the user pauses while editing the value in the input field. This prevents the input validation from being run while the user is still editing the value.</li> <li>(Application) The default brightness of the illumination LED for the pscopehat version of the backend (for the custom PlanktoScope HAT) has been reduced; this a temporary workaround to a bug with raspimjpeg where saved images are overexposed even on the default brightness settings with minimum shutter speed and ISO, despite the brightness of raspimjpeg's camera preview looking reasonable (see https://github.com/PlanktoScope/PlanktoScope/issues/259 for details).</li> <li>(Application: GUI) In the \"Sample\" page, when the minimal &amp; maximal fraction size fields and min &amp; max sampling depth fields are both displayed simultaneously, now the adafruithat version of the Node-RED dashboard shows the fraction size fields on one row and the sampling depth fields on another row, rather than showing them in adjacent columns. This way, the adafruithat version of the Node-RED dashboard now matches the layout in the pscopehat version of the Node-RED dashboard.</li> <li>(Application: GUI) The \"System Monitoring\" page now correctly displays the PlanktoScope hardware version in the \"Information\" panel's \"Instrument Type\" field.</li> <li>(Application: GUI) The \"System Monitoring\" and \"Fluidic Acquisition\" pages now display a software version string which is either a tagged version (e.g. <code>v2023.9.0-beta.1</code>) when the version is tagged, or else a pseudoversion (e.g. <code>v2023.9.0-beta.1-36-gf276e84</code>) which contains an abbreviated commit SHA and a list of the number of commits since the last tagged version. This version string is now also used for the <code>acq_software</code> metadata field.</li> <li>(Application: GUI) The <code>process_commit</code> metadata field is now set once again. Now it depends on the new installer script provided by the github.com/PlanktoScope/install.planktoscope.community repo.</li> <li>(Application: GUI) The <code>process_source</code> metadata field is no longer hard-coded in the Node-RED dashboard. Now it depends on the new installer script provided by the github.com/PlanktoScope/install.planktoscope.community repo.</li> <li>(System: infrastructure) The SD card setup scripts now apply the Forklift pallet in order to create the Docker Compose services and resources ahead-of-time (rather than waiting for the first boot to do that work), so that the first boot of the SD card image will be much faster.</li> <li>(System: infrastructure) The distro setup scripts now work even if they are run from a repository downloaded to some path other than <code>/home/pi/PlanktoScope</code>.</li> <li>(Application: GUI) The landing page now links to the new project documentation site for online documentation, instead of the old project documentation site.</li> </ul>"},{"location":"reference/software/changelog/#v202390-beta1-2023-09-14","title":"v2023.9.0-beta.1 - 2023-09-14","text":""},{"location":"reference/software/changelog/#added_7","title":"Added","text":"<ul> <li>(System: networking) The PlanktoScope can now also be accessed using the domain name <code>pkscope.local</code> from any web browser where <code>planktoscope.local</code> previously worked. We recommend using http://pkscope.local instead of http://planktoscope.local to access your PlanktoScope, for consistency with other domain name formats (see the \"Changes\" section for details).</li> <li>(System: administration, networking) In operating system's networking configuration files which have lines which are automatically generated based on the PlanktoScope's machine name, those lines now have accompanying code comments which explain the correct files to edit in order to make changes which will persist across device reboots.</li> <li>(System: administration, networking) You can now check the machine name at <code>/home/pi/.local/etc/machine-name</code>. It's updated when the PlanktoScope boots.</li> <li>(System: administration; Application: GUI) The Node-RED dashboard now provides some context on the \"Administration\" page for how to access the logs linked to from that page, and which links to use for providing logs on GitHub or Slack.</li> <li>(System: administration; Application: GUI) The Node-RED dashboard now provides some additional information about the side-effects of selecting a hardware version on the \"Hardware Settings\" page, specifically that the white balance settings will be overwritten.</li> </ul>"},{"location":"reference/software/changelog/#changed_7","title":"Changed","text":"<ul> <li>(Major user-facing change; System: networking) The top-level domain for domain names of format <code>home.planktoscope</code> and <code>{machine-name}.planktoscope</code> (e.g. http://metal-slope-23501.planktoscope) has been changed from <code>planktoscope</code> to <code>pkscope</code>, so that the domain names are now of format <code>home.pkscope</code> and <code>{machine-name}.pkscope</code>. Similarly, the machine-specific mDNS name has been changed from format <code>planktoscope-{machine-name}.local</code> to <code>pkscope-{machine-name}.local</code>.</li> <li>(User-facing change; System: networking) The SSIDs of wifi hotspots generated by the PlanktoScope has been changed from the format <code>PlanktoScope {machine-name}</code> to the format <code>pkscope-{machine-name}</code>. This makes it easier to determine the machine-specific mDNS URL: just add <code>.local</code>, to get <code>pkscope-{machine-name}.local</code> (e.g. <code>pkscope-metal-slope-23501.local</code>).</li> <li>(User-facing change; Application: backend) The Python backend now uses the new machine naming scheme everywhere.</li> <li>(System: networking) The default hostname and SSID (used only in certain unexpected situations when a machine name cannot be determined) have both been shortened from <code>planktoscope</code> to <code>pkscope</code>.</li> <li>(System: networking) The SSID format is now specified in <code>/home/pi/.local/etc/hostapd/ssid.snippet</code>, instead of <code>/home/pi/.local/bin/update-ssid-machine-name.sh</code>.</li> </ul>"},{"location":"reference/software/changelog/#deprecated_4","title":"Deprecated","text":"<ul> <li>(System: networking) The <code>planktoscope.local</code> mDNS name is no longer recommended. We will continue to support it for the foreseeable future (and definitely for at least one year), but we recommend using <code>pkscope.local</code> or the machine-specific mDNS name (of format <code>pkscope-{machine-name}.local</code>) instead.</li> <li>(Application: backend) The Python backend's logs still print machine names in the old naming scheme, to help instrument operators with the naming scheme transition (so that they can identify how each machine was renamed). The machine names in this old naming scheme will be removed in a future release - probably the next release.</li> </ul>"},{"location":"reference/software/changelog/#removed_6","title":"Removed","text":"<ul> <li>(System: administration, networking) The auto-generated <code>/home/pi/.local/etc/cockpit/origins</code> file has been removed, because it does not need to be persisted after being generated. Instead, a temporary file is generated and removed after being used.</li> <li>(System: administration, networking) The default <code>/home/pi/.local/etc/hosts</code> file has been removed from the setup files. Instead, it is now automatically generated by the setup scripts.</li> </ul>"},{"location":"reference/software/changelog/#fixed_9","title":"Fixed","text":"<ul> <li>(System: networking) The PlanktoScope no longer generates any machine names or SSIDs which are so long that they prevent the wifi hotspot network from being brought up.</li> <li>(Application: backend) The segmenter no longer crashes and fails to respond immediately after attempting to start segmentation.</li> <li>(Application: preset settings, GUI) The default setting for the pscopehat version of the Node-RED dashboard is now the 300 um capillary, since that version of the hardware is meant to be used with 300 um capillaries. Previously, the default was the 200 um ibidi slide.</li> <li>(Application: preset settings) All default settings for all hardware versions now include a default pixel size calibration of 0.75 um/pixel. Previously, the default settings for v2.1 and v2.3 were missing this setting, which would cause the segmenter to crash when processing datasets generated on PlanktoScopes using the v2.1 or v2.3 hardware settings.</li> <li>(Application: preset settings, GUI) The Node-RED dashboard now correctly lists the selected hardware version in the \"Hardware Settings\" page's \"Hardware Version\" dropdown menu upon startup.</li> <li>(Application: GUI) The Node-RED dashboard now (hopefully) is able to determine the camera type from the Python backend.</li> </ul>"},{"location":"reference/software/changelog/#v202390-beta0-2023-09-02","title":"v2023.9.0-beta.0 - 2023-09-02","text":""},{"location":"reference/software/changelog/#added_8","title":"Added","text":"<ul> <li>(System: networking) Traffic is now routed with Network Address Translation between the Ethernet and Wi-Fi network interfaces. This means that if the PlanktoScope has internet access through an Ethernet connection, it will share that internet access to devices connected to its Wi-Fi hotspot; and if the PlanktoScope has internet access through a Wi-Fi connection, it will share that internet access to devices connected to its Ethernet port.</li> <li>(System: networking) Now both <code>192.168.4.1</code> and <code>192.168.5.1</code> can be used to access your PlanktoScope when your computer is connected directly to it, regardless of whether you are connecting over an Ethernet cable or the PlanktoScope's Wi-Fi hotspot.</li> <li>(System: networking) Previously the PlanktoScope could be connected to from <code>192.168.4.1</code> (over Wi-Fi, when running in wireless AP mode), <code>192.168.5.1</code> (over Ethernet), and <code>planktoscope.local</code> (over Wi-Fi or Ethernet, from a client device with mDNS support); this meant that Android devices could only connect to the PlanktoScope at <code>192.168.4.1</code>, as they lack mDNS support. Now, client devices - even those without mDNS support - can connect to the PlanktoScope at <code>home.planktoscope</code>, and/or URLs like <code>clear-field-33719.planktoscope</code> and <code>planktoscope-clear-field-33719.local</code> (where <code>clear-field-33719</code> is replaced with the PlanktoScope's Raspberry Pi's machine name, which is also part of the name of the PlanktoScope's Wi-Fi network - e.g. \"PlanktoScope clear-field-33719\").</li> <li>(Application: Documentation) An offline copy of the PlanktoScope project documentation is now provided at URL path <code>/ps/docs/</code> (so e.g. it's accessible at http://home.planktoscope/ps/docs/)</li> <li>(Application: GUI) The Node-RED dashboard's \"Hardware Settings\" page now includes a drop-down menu item to select \"PlanktoScope v2.5\" as an allowed hardware version.</li> <li>(Application: GUI, administration) The Node-RED dashboard now generates a notification whenever it restarts the Python backend. This provides visibility for the user when changing the hardware version triggers a restart of the Python backend.</li> <li>(System: administration, troubleshooting, GUI) A Cockpit system administration dashboard is now installed and made accessible at URL path <code>/admin/cockpit/</code> (so e.g. it's accessible at http://home.planktoscope/admin/cockpit/).</li> <li>(System: administration, troubleshooting, GUI) A filebrowser instance, allowing you to manage and edit files anywhere in the Raspberry Pi's SD card, is now installed and made accessible at URL path <code>/admin/fs/</code> (so e.g. it's accessible at http://home.planktoscope/admin/fs/)</li> <li>(System: administration, troubleshooting, GUI) A Portainer administration dashboard for Docker is now installed and made accessible at URL path <code>/admin/portainer/</code> (so e.g. it's accessible at http://home.planktoscope/admin/portainer/). Note that you will need to open Portainer within a few minutes after booting (or rebooting) your PlanktoScope in order to create an admin account for Portainer.</li> <li>(System: administration) Docker is now installed. We are using it to deliver various applications in a way that will eventually enable safe and easy upgrades.</li> <li>(System: administration, troubleshooting) w3m is now installed, enabling terminal-based interaction with some Wi-Fi network captive portals to obtain internet access on the PlanktoScope. For captive portals which require Javascript, we recommend instead using browsh as a Docker container; we don't provide browsh in the default SD card image because it adds ~250 MB of dependencies to the image.</li> </ul>"},{"location":"reference/software/changelog/#changed_8","title":"Changed","text":"<ul> <li>(User-facing change; System: administration) The file browser on port 80 for viewing datasets has now been moved to path <code>/ps/data/browse/</code> (so e.g. it's accessible at http://home.planktoscope/ps/data/browse/ ), and it is now implemented using filebrowser, so that now you can delete folders, download folders, preview images, etc. As before, you can still access this from the \"Gallery\" page of the Node-RED dashboard.</li> <li>(User-facing change; Application: GUI) If you navigate the PlanktoScope in your web browser on port 80 (or without specifying a port) (e.g. with URLs like <code>http://home.planktoscope</code> or <code>http://planktoscope.local</code>), your browser will show a landing page with a list of links for easy access to the Node-RED dashboard, documentation, other embedded applications, and reference information about your PlanktoScope.</li> <li>(User-facing change; Application: GUI) Previously, the Node-RED dashboard was accessed on the path <code>/ui</code> on port 1880, e.g. with URLs like <code>http://planktoscope.local:1880/ui</code> or <code>http://192.168.4.1:1880/ui</code>; now, it should be accessed via a link on the landing page.</li> <li>(User-facing change; System: networking) Previously, PlanktoScope machine names were generated as gibberish words like \"Babaxio-Detuiau\", and the machine names were used as the names of the private Wi-Fi networks generated by the PlanktoScope in wireless AP mode. However, the machine names created by this naming scheme were often difficult to pronounce, remember, and type for people in various languages, and the naming scheme sometimes generated names which sounded like curses or insults in some languages. Now, PlanktoScope machine names are generated as a combination of two words and a number up to five digits long; words are selected from pre-built lists in a language which can be chosen based on localization settings. Currently, word lists are only provided in US English, resulting in names like \"metal-slope-23501\", \"conscious-pocket-1684\", and \"plant-range-10581\"; however, word lists can be added for other languages in the future, and a user interface will eventually be provided for changing localization settings.</li> <li>(User-facing change; Application: GUI) Selecting a hardware version on the \"Hardware Settings\" page of the Node-RED dashboard now causes a default hardware preset for that version to overwrite the entire <code>hardware.json</code> file, and the Node-RED dashboard will reload the settings; this prevents the <code>hardware.json</code> file from being changed into an inconsistent mixture of settings for different hardware versions, which was the previous (incorrect) behavior. The description on the \"Hardware Settings\" page is also now more specific about what happens when a hardware version is selected.</li> <li>(User-facing change; Application: GUI, troubleshooting) Previously, the Node-RED dashboard's \"Administration\" page merged log entries from every component of the Python backend and the Node-RED dashboard. Now, the Node-RED dashboard instead displays links to separate Cockpit log-viewing pages (which by default are accessed with username <code>pi</code> and password <code>copepode</code>) for the Node-RED dashboard, the backend's hardware controller, and the backend's segmenter, and links to filebrowser directories for all log files created by the backend's hardware controller and segmenter.</li> <li>(User-facing change; System: GUI) Previously, the Node-RED flow editor was accessed directly on port 1880, e.g. with URLs like <code>http://planktoscope.local:1880</code> or <code>http://192.168.4.1:1880</code>; now, it should be accessed via a link on the landing page .</li> <li>(System: networking) Previously, PlanktoScopes all had <code>planktoscope</code> as their hostname. Now, the hostname is of the format <code>planktoscope-&lt;machine-name&gt;</code>, e.g. <code>planktoscope-metal-slope-23501</code> or <code>planktoscope-plant-range-10581</code>.</li> <li>(Likely user-facing change; System: networking) The default Wi-Fi country has been changed from <code>FR</code> (France) to <code>US</code> (USA).</li> <li>(Likely user-facing change; System: networking) Previously the autohotspot script considered receiving an IP address assignment from the connected Wi-Fi network as the criterion for determining whether the Wi-Fi connection was successful. Now the autohotspot script tries to ping <code>google.com</code> to determine whether the connection was successful, so that the autohotspot script will revert to wireless AP mode if no internet access is available over the Wi-Fi network (e.g. if the connected Wi-Fi network is actually behaving like a captive portal, which would prevent the PlanktoScope from being accessed via a VPN over the internet - in which case the PlanktoScope would become accessible only over an Ethernet cable). This change is meant to make it easier to fix a PlanktoScope's Wi-Fi connection configuration when that configuration makes internet access impossible.</li> <li>(System: networking, troubleshooting) Previously the autohotspot script would print the MAC addresses and SSIDs of all Wi-Fi networks found by scanning. Now it only prints the SSIDs of Wi-Fi networks found by scanning and avoids printing duplicate SSIDs, for more concise service logs.</li> <li>(System: networking, troubleshooting) When the autohotspot script fails to connect to google.com, it will also print some diagnostic information by attempting to ping <code>1.1.1.1</code> (the static IP address of Cloudflare DNS, so a ping without DNS lookup) and checking whether the Wi-Fi network assigned an IP address to the Raspberry Pi, and reporting the results. This enables better troubleshooting of internet access issues on Wi-Fi networks.</li> <li>(System: networking) Previously the autohotspot script was run every 5 minutes to scan for available Wi-Fi networks. Now it is run every 2 minutes, so that the PlanktoScope will connect more quickly to a Wi-Fi network which has just appeared.</li> <li>(System: networking) Previously the autohotspot script and the dhcpcd service would both try to manage when to start and stop the dnsmasq service. Now, the dnsmasq service always runs. This change was made to simplify the network configuration so that it would be easier to understand, troubleshoot, and maintain.</li> <li>(System: networking) Previously the autohotspot script would use a mixture of dhcpcd and wpa_supplicant as entrypoints for Wi-Fi network connection management. Now, dhcpcd is used to manage wpa_supplicant, and the autohotspot script only interacts with dhcpcd. This change was made to simplify the network configuration so that it would be easier to understand, troubleshoot, and maintain. Note that, in the future, wpa_supplicant and dhcpcd may be replaced with NetworkManager.</li> <li>(System: networking) The autohotspot script has undergone a major refactoring, which may accidentally introduce bugs.</li> <li>(Application: Backend, GUI) The Node-RED dashboard no longer supervises the Python backend; instead, it delegates that work to systemd.</li> <li>(Application: Backend) Log files from the Python backend are no longer saved to <code>/home/pi</code>, but instead to subdirectories for the backend components under <code>/home/pi/device-backend-logs</code>. Note: the locations of log files may be changed again in the future, and/or file logging may be changed to use a different systemd-based mechanism in the future.</li> <li>(System) The <code>/usr/bin/stepper-disable</code> and <code>/usr/bin/autohotspotN</code> scripts have been moved to <code>/home/pi/.local/bin/release-gpio-steppers.sh</code> and <code>/home/pi/.local/bin/autohotspot.sh</code>, respectively.</li> <li>(System) The <code>gpio-init.service</code> systemd service has been renamed to <code>planktoscope-org.init-gpio-steppers.service</code>.</li> <li>(System) Previously the <code>en_DK.UTF-8</code> locale was used for everything. Now it is only used for time, measurements, and paper dimensions, and the <code>en_US.UTF-8</code> locale is the base locale for everything else. In the future we may provide GUI functionality for changing the base locale.</li> <li>(System) The chrony configuration has been simplified, but it may be broken.</li> <li>(System) The default timezone is now officially set to UTC, and we will be using UTC as the standard system time zone for all PlanktoScopes. Previously, the pre-built SD card images provided by this project used UTC as the timezone, but the \"Expert Setup\" instructions for manually setting up the PlanktoScope software did not specify a time zone to use.</li> <li>(System, Dependencies) The base OS is now the 2023-05-03 release of Raspberry Pi OS Bullseye.</li> <li>(Application: Backend, Dependencies) The Python backend and Node-RED dashboard's indirect dependencies are now version-locked to improve the reproducibility of the OS setup script independently of when the script is run.</li> </ul>"},{"location":"reference/software/changelog/#deprecated_5","title":"Deprecated","text":"<ul> <li>(Application: GUI) In a future release (potentially as early as v2023.12.0), the Node-RED editor and Node-RED dashboard will not be accessible at all over port 1880. In this release, you can still access the Node-RED dashboard at path <code>/ps/node-red-v2/ui</code> on port 1880, but the embedded image streams and file gallery will not be properly displayed; and you can access the Node-RED editor at path <code>/admin/ps/node-red-v2</code> on port 1880. However, you should instead access the Node-RED editor and Node-RED dashboard via the links on the PlanktoScope's landing page.</li> <li>(Application: GUI) In a future release (timeline not yet decided), the version of the Node-RED dashboard for the Adafruit HAT will stop receiving new features even as the version of the Node-RED dashboard for the custom PlanktoScope HAT continues receiving new features. However, we will continue to fix bugs in the Node-RED dashboard for the Adafruit HAT, and we will continue to build SD card images for the Adafruit HAT which will also include new features in other software components.</li> </ul>"},{"location":"reference/software/changelog/#removed_7","title":"Removed","text":"<ul> <li>(User-facing removal; Application: GUI) The Node-RED dashboard no longer allows selection of \"PlanktoScope v1.0\" or \"PlanktoScope v2.2 (waveshare HAT)\" as the hardware version. Those hardware versions are no longer supported by the software.</li> <li>(User-facing removal; System: networking) Now <code>planktoscope.local</code> only works for devices connected directly to the PlanktoScope, either via an Ethernet cable or over Wi-Fi when the PlanktoScope is running in wireless AP mode. <code>planktoscope.local</code> no longer works on other networks, such as LANs or mesh VPNs, which the PlanktoScope might be connected to. On such networks, the machine-specific mDNS name (of format <code>planktoscope-&lt;machine-name&gt;.local</code>) should be used instead.</li> <li>(System: administration) The Git-based software update system (exposed in the Node-RED dashboard's \"Adminisration\" page) has been removed, since it was reported to behave problematically anyways. In the future, we will use a system based on Docker for safer and easier software updates.</li> </ul>"},{"location":"reference/software/changelog/#fixed_10","title":"Fixed","text":"<ul> <li>(Major fault-tolerance improvement; Application: GUI) When an invalid value is entered for the red or blue white balance gain on the Node-RED dashboard's \"Optic Configuration\" page, that value is now ignored, a notification is displayed about the invalid value, and the white balance gain is reset to the last valid value (loaded from the <code>hardware.json</code> configuration file). This fixes issue #166 by preventing the Node-RED dashboard from saving an invalid value to the <code>hardware.json</code> file, which would crash the Python hardware controller after the next boot (or after the next time the Python hardware controller was restarted).</li> <li>(Major quality-of-life improvement; Backend: dependencies) The <code>adafruit-blinka</code> and <code>adafruit-platformdetect</code> dependencies are now updated to their latest version, so that Python hardware controller will work on PlanktoScopes with recent (i.e. post-2021) versions of the Adafruit HAT.</li> <li>(Application: GUI, troubleshooting) Previously, the Node-RED dashboard would often fail to display the log output from the Python backend. Now, it should always make the logs accessible (either by the links to Cockpit log viewer or by the links to the log file browser).</li> <li>(System: networking) Previously the autohotspot script would not ignore any networks which were commented out in the <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> file when checking if any networks found by scanning matched networks were specified in the <code>wpa_supplicant.conf</code> file; now it ignores them, so that commented-out networks don't incorrectly prevent the autohotspot from going into wireless AP mode.</li> <li>(System: networking) Previously the autohotspot script would always wait 20 seconds after attempting to connect to a Wi-Fi network before checking whether the connection was successful, even if it didn't actually need to wait 20 seconds. Now the autohotspot script repeatedly attempts to ping google.com with a timeout of 2 seconds per attempt and a maximum of 10 attempts, so that the autohotspot script only waits as long as a necessary to determine that a Wi-Fi network connection has succeeded.</li> <li>(System: networking) Previously the autohotspot script could decide that the SSID scan results were available even if no SSIDs were found (despite local Wi-Fi networks being active). Now an empty SSID scan result is treated as a condition where a re-scan is required.</li> <li>(System: networking) Previously the log messages from the autohotspot script had inconsistent capitalization and grammar, and slightly unclear wording. Those have now been made more clear and consistent.</li> </ul>"},{"location":"reference/software/changelog/#v230-2021-12-20","title":"v2.3.0 - 2021-12-20","text":""},{"location":"reference/software/changelog/#added_9","title":"Added","text":"<ul> <li>A basic working image segmenter.</li> <li>Direct connections over Ethernet.</li> <li>A \"Lab culture\" sample type, where location is set to the South Pole, and sample collection time and date are set by default to the current time and date on the Raspberry Pi but can be changed. (#74)</li> <li>A \"Test\" sample type, where location is set to the South Pole, and sample collection time and date are always set to the current time and date on the Raspberry Pi.</li> <li>A selector in the Node-RED dashboard for the machine hardware version (#98)</li> </ul>"},{"location":"reference/software/changelog/#changed_9","title":"Changed","text":"<ul> <li>Various parts of the UI (we do not have a list of specific changes).</li> <li>Node-RED is now upgraded to v2.0 (#97)</li> <li>The base OS is now the 2021-12-03 release of Raspberry Pi OS Buster.</li> </ul>"},{"location":"reference/software/changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Various issues with accessing the Node-RED dashboard via http://planktoscope.local:1880/ui .</li> <li>Various issues with Node-RED (#80, #91, #87, #96)</li> </ul>"},{"location":"reference/software/changelog/#v221-2021-05-10","title":"v2.2.1 - 2021-05-10","text":""},{"location":"reference/software/changelog/#added_10","title":"Added","text":"<ul> <li>The ability for developers to change the PlanktoScope repository to a development branch from the Node-RED dashboard.</li> </ul>"},{"location":"reference/software/changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Various bugs (we do not have a list of specific changes)</li> </ul>"},{"location":"reference/software/changelog/#v220-2021-02-23","title":"v2.2.0 - 2021-02-23","text":""},{"location":"reference/software/changelog/#added_11","title":"Added","text":"<ul> <li>Support for Raspberry Pi HQ cameras.</li> <li>Control of image white balance.</li> <li>A Node-RED dashboard panel to copy all data from <code>/home/pi/data</code> to a USB drive.</li> <li>Integrity check of the generated files (for now only for raw pictures and <code>metadata.json</code> files). A file called <code>integrity.check</code> is created alongside the images. This file contains one line per file, with the filename, its size and a checksum of both its filename and its content.</li> <li>A file gallery to browse data files in the <code>/home/pi/data</code> directory.</li> <li>A way to update the PlanktoScope software repository on the Raspberry Pi.</li> <li>A Node-RED dashboard panel to choose a wifi network to connect to.</li> <li>A Node-RED tab to enter the configuration of the hardware.</li> </ul>"},{"location":"reference/software/changelog/#changed_10","title":"Changed","text":"<ul> <li>(Breaking change) The UI has been changed (we do not have a list of specific changes)</li> </ul>"},{"location":"reference/software/changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Random camera crash solved: instead of using the python picamera library, we now use a compiled binary, <code>raspimjpeg</code>, controlled through a FIFO pipe</li> </ul>"},{"location":"reference/software/changelog/#v210-2020-10-14","title":"v2.1.0 - 2020-10-14","text":""},{"location":"reference/software/changelog/#added_12","title":"Added","text":"<ul> <li>If the Raspberry Pi is configured (via the <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> file) to connect to an existing wifi network, it will try to connect to the network; and it will only start its own wifi hotspot if it failed to connect.</li> <li>If the Raspberry Pi is connected to the internet via its Ethernet port, it will share internet access to devices connected to the Raspberry Pi's wifi hotspot.</li> <li>(Documentation) Information has been added about ribbon cable assembly.</li> <li>(Documentation) Information has been added about how to back up the SD card.</li> </ul>"},{"location":"reference/software/changelog/#changed_11","title":"Changed","text":"<ul> <li>(Breaking change) The OS is now based on Raspberry OS Lite, so there is no graphical desktop.</li> <li>(Breaking change) The wifi network is now named <code>PlanktoScope</code>, and the password to it is now <code>copepode</code>.</li> <li>(Breaking change) The default user is now <code>pi</code>, and the default password is <code>copepode</code> for this user.</li> <li>(Breaking change) All raw and processed data files are now stored in the directory <code>/home/pi/data</code>.</li> <li>The software has undergone a major refactoring, which may accidentally introduce some bugs.</li> </ul>"},{"location":"reference/software/product-specs/","title":"Product Specifications","text":"<p>The PlanktoScope OS includes all software which needs to run on the PlanktoScope's hardware to provide the overall functionality of a PlanktoScope. Product specifications for the PlanktoScope OS are listed below for ranges of software version numbers. To see software versions listed individually in chronological order, refer to the project release notes or the software changelog. To understand how to interpret software version numbers, refer to our description of the PlanktoScope OS's version numbering system.</p>"},{"location":"reference/software/product-specs/#v202400","title":"v2024.0.0","text":"<p>Specs for v2024.0.0 are the same as in v2023.9.0, except for the following sections:</p> <ul> <li>Base operating system: the binary target architecture has changed from 32-bit to 64-bit.</li> <li>System performance: on-board image processing speeds have improved (processing speeds have nearly doubled).</li> </ul>"},{"location":"reference/software/product-specs/#functionalities","title":"Functionalities","text":"<p>Regular operation:</p> <ul> <li>Image acquisition: stop-flow imaging (JPEG image output)</li> <li>On-board image processing: detection and segmentation of objects (batch-processing only)</li> <li>User interfacing: graphical interface accessible through web browser of a connected phone, tablet, or computer</li> <li>Export of data for uploading to EcoTaxa</li> </ul> <p>Advanced operations:</p> <ul> <li>User interfacing: web browser interfaces for system administration, system monitoring, and troubleshooting</li> <li>Automation: MQTT-based API</li> <li>Application deployment: ability to add software as OCI containers using Docker, optionally via Forklift</li> <li>System configuration: ability to reversibly add, remove, replace, or override OS configuration files via Forklift</li> </ul>"},{"location":"reference/software/product-specs/#base-operating-system","title":"Base operating system","text":"<ul> <li>Distro: Raspberry Pi OS 11 (bullseye)</li> <li>Binary target architecture: 64-bit (aarch64, also known as arm64)</li> </ul>"},{"location":"reference/software/product-specs/#supported-hardware","title":"Supported hardware","text":"<p>Minimum for image acquisition (but not sufficient for on-board image processing):</p> <ul> <li>PlanktoScope: hardware v2.1 with Raspberry Pi 4 Model B computer</li> <li>Memory: 1 GB RAM</li> <li>Storage: 8 GB capacity</li> </ul> <p>Minimum for full functionality, including on-board image processing:</p> <ul> <li>Memory: 4 GB RAM</li> </ul> <p>Recommended:</p> <ul> <li>PlanktoScope: hardware v2.5 or v2.6 with Raspberry Pi 4 Model B computer</li> <li>Storage: 32 GB capacity</li> </ul> <p>Forwards-incompatibilities:</p> <ul> <li>Unable to run on the Raspberry Pi 5 computer.</li> </ul> <p>Backwards-incompatibilities:</p> <ul> <li>Might still work on a Raspberry Pi 3 Model B+ computer or a Raspberry Pi 4 Model B computer with 1 GB of RAM, but compatibility is not tested.</li> </ul>"},{"location":"reference/software/product-specs/#system-performance","title":"System performance","text":"<p>With minimum supported hardware for full functionality:</p> <ul> <li>On-board image processing: a dataset of 400 raw images is processed in approximately 1 hour</li> </ul>"},{"location":"reference/software/product-specs/#v202390","title":"v2023.9.0","text":""},{"location":"reference/software/product-specs/#functionalities_1","title":"Functionalities","text":"<p>Regular operation:</p> <ul> <li>Image acquisition: stop-flow imaging (JPEG image output)</li> <li>On-board image processing: detection and segmentation of objects (batch-processing only)</li> <li>User interfacing: graphical interface accessible through web browser of a connected phone, tablet, or computer</li> <li>Export of data for uploading to EcoTaxa</li> </ul> <p>Advanced operations:</p> <ul> <li>User interfacing: web browser interfaces for system administration, system monitoring, and troubleshooting</li> <li>Automation: MQTT-based API</li> <li>Application deployment: ability to add software as OCI containers using Docker, optionally via Forklift</li> </ul>"},{"location":"reference/software/product-specs/#base-operating-system_1","title":"Base operating system","text":"<ul> <li>Distro: Raspberry Pi OS 11 (bullseye)</li> <li>Binary target architecture: 32-bit only (armhf, also known as armv7)</li> </ul>"},{"location":"reference/software/product-specs/#supported-hardware_1","title":"Supported hardware","text":"<p>Minimum for image acquisition (but not sufficient for on-board image processing):</p> <ul> <li>PlanktoScope: hardware v2.1 with Raspberry Pi 4 Model B computer</li> <li>Memory: 1 GB RAM</li> <li>Storage: 8 GB capacity</li> </ul> <p>Minimum for full functionality, including on-board image processing:</p> <ul> <li>Memory: 4 GB RAM</li> </ul> <p>Recommended:</p> <ul> <li>PlanktoScope: hardware v2.5 or v2.6 with Raspberry Pi 4 Model B computer</li> <li>Storage: 32 GB capacity</li> </ul> <p>Forwards-incompatibilities:</p> <ul> <li>Unable to run on the Raspberry Pi 5 computer.</li> </ul> <p>Backwards-incompatibilities:</p> <ul> <li>Might still work on a Raspberry Pi 3 Model B+ computer or a Raspberry Pi 4 Model B computer with 1 GB of RAM, but compatibility is not tested.</li> </ul>"},{"location":"reference/software/product-specs/#system-performance_1","title":"System performance","text":"<p>With minimum supported hardware for full functionality:</p> <ul> <li>On-board image processing: a dataset of 400 raw images is processed in approximately 1.5 to 2 hours</li> </ul>"},{"location":"reference/software/product-specs/#v23","title":"v2.3","text":""},{"location":"reference/software/product-specs/#functionalities_2","title":"Functionalities","text":"<p>Regular operation:</p> <ul> <li>Image acquisition: stop-flow imaging (JPEG image output)</li> <li>On-board image processing: detection and segmentation of objects (batch-processing only)</li> <li>User interfacing: graphical interface accessible through web browser of a connected phone, tablet, or computer</li> <li>Export of data for uploading to EcoTaxa</li> </ul> <p>Advanced operations:</p> <ul> <li>Automation: MQTT-based API</li> </ul>"},{"location":"reference/software/product-specs/#base-operating-system_2","title":"Base operating system","text":"<ul> <li>Distro: Raspberry Pi OS 11 (bullseye)</li> <li>Binary target architecture: 32-bit only (armhf, also known as armv7)</li> </ul>"},{"location":"reference/software/product-specs/#supported-hardware_2","title":"Supported hardware","text":"<p>Minimum for image acquisition (but not sufficient for on-board image processing):</p> <ul> <li>PlanktoScope: hardware v2.1 with Raspberry Pi 3 Model B+ computer</li> <li>Memory: 1 GB RAM</li> <li>Storage: 8 GB capacity</li> </ul> <p>Minimum for full functionality, including on-board image processing:</p> <ul> <li>PlanktoScope: hardware v2.1 with Raspberry Pi 4 Model B computer</li> <li>Memory: 4 GB RAM</li> </ul> <p>Recommended for full functionality:</p> <ul> <li>PlanktoScope: hardware v2.5 or v2.6</li> <li>Storage: 32 GB capacity</li> </ul> <p>Forwards-incompatibilities:</p> <ul> <li>Unable to run on the Raspberry Pi 5 computer.</li> <li>Incompatible with Adafruit Stepper Motor HATs (used in PlanktoScope hardware v2.1) manufactured after mid-2022.</li> </ul>"},{"location":"reference/software/product-specs/#system-performance_2","title":"System performance","text":"<p>With minimum supported hardware for full functionality:</p> <ul> <li>On-board image processing: a dataset of 400 raw images is processed in approximately 1.5 to 2 hours</li> </ul>"},{"location":"reference/software/release-process/","title":"Release Process","text":"<p>The PlanktoScope's software is released independently of the PlanktoScope's hardware; this document explains how we manage releases of the PlanktoScope OS (which contains the software which runs on a PlanktoScope, and which you can download as an SD card image), to help you to:</p> <ul> <li>Understand what you should do when we publish a new release of the PlanktoScope OS.</li> <li>Interpret the software product specifications and the software changelog.</li> </ul>"},{"location":"reference/software/release-process/#version-numbering","title":"Version numbering","text":"<p>The PlanktoScope OS is a combination of many individual software components; some components (such as most parts of the PlanktoScope's graphical user interface, and some of its hardware drivers) are written, maintained, and distributed by the PlanktoScope project, while other components (such as the Cockpit administration dashboard and the file browser) are written, maintained, and distributed by other open-source software projects. Each component has its own release schedule and version numbering system; the specific combination of releases and versions of all these components will change over time as these components change, and we represent each total combination of all software components by a version number assigned to a particular release of the PlanktoScope OS. For example, the v2023.9.0 release of the PlanktoScope OS included various software programs at one specific combination of versions, while the v2024.0.0 release upgraded some of those programs to newer versions.</p> <p>We use a calendar-based version numbering system for the PlanktoScope OS, where each version number has the format <code>v(year).(minor).(patch)</code> for stable releases of the software or <code>v(year).(minor).(patch)-(modifier)</code> for testing pre-releases of the software:</p> <ul> <li> <p><code>year</code> is a 4-digit number representing the year (in the Gregorian calendar) in which the stable release is (or will be) published. For example, version v2024.0.0 was published in 2024, while version v2025.0.0 will be published in 2025.</p> </li> <li> <p><code>minor</code> is a number which starts at 0 for the first release in each year, and increments by 1 for each release which adds new features or includes notable changes to existing features. Usually <code>minor</code> will be incremented one or two times each year. For example, version v2024.0.0 was the first version published in 2024, while version v2024.1.0 will be the second version with notable changes to be published in 2024.</p> </li> <li> <p><code>patch</code> is a number which starts at 0 for each <code>(year).(minor)</code> combination, and increments by 1 for each release which consists only of small bug fixes. For example, if there were some small bugs in v2024.0.0 which we wanted to patch before a v2024.1.0 release, we could add those patches as part of a (hypothetical) v2024.0.1 release. If the bugs are not very severe, we might not publish a patch release and we could instead just include those bug fixes together with other new features, in which case we would increment <code>minor</code> with the next release. For example, we might not publish a v2024.0.1 release, and instead just publish a v2024.1.0 release.</p> </li> <li> <p><code>modifier</code> is an additional string included to identify \"alpha\" or \"beta\" pre-releases published for testing before the stable release. We typically publish multiple \"alpha\" and \"beta\" pre-releases with additional improvements before a stable release, so <code>modifier</code> has the format of either <code>alpha.(index)</code> or <code>beta.(index)</code>, where <code>index</code> is a number which starts at 0 for each <code>(year).(minor).(patch)-alpha</code> or <code>(year).(minor).(patch)-beta</code> combination. For example, the first \"alpha\" pre-release for v2024.0.0 was v2024.0.0-alpha.0, the second \"alpha\" pre-release was v2024.0.0-alpha.1, and the first \"beta\" pre-release was v2024.0.0-beta.0.</p> </li> </ul>"},{"location":"reference/software/release-process/#release-channels","title":"Release channels","text":"<p>The PlanktoScope project uses a concept called \"release channels\" to structure our process for stabilizing and testing our software before we publish a new release of the PlanktoScope OS for everyone to use. There are three channels for PlanktoScope software releases and pre-releases, each corresponding to a particular branch of the PlanktoScope repository on GitHub:</p> <ul> <li>Edge: On the \"Edge\" channel, the PlanktoScope OS is built from the setup scripts on the latest commit of the <code>master</code> branch of the PlanktoScope repository on GitHub - so the \"Edge\" channel is essentially the current unstable development version of the PlanktoScope OS, and is often likely to be broken or buggy in various ways. Occasionally, specific commits on the <code>master</code> branch are tagged as \"alpha\" pre-releases; \"alpha\" pre-releases should be treated as snapshots of PlanktoScope software development for testing by PlanktoScope software developers and advanced users.</li> <li>Beta: Once an \"alpha\" pre-release has received sufficient testing for the PlanktoScope software developers to consider it stable enough for all PlanktoScope users to test it out, it will be promoted to a \"beta\" pre-release, and the <code>software/beta</code> branch of the PlanktoScope repository on GitHub will be advanced to the Git commit of the \"beta\" pre-release. At that point, the <code>software/beta</code> branch will only receive patches to fix serious errors. As bugs are fixed on the <code>software/beta</code> branch, more \"beta\" pre-releases may be created on that branch for users to test.</li> <li>Stable: After the latest \"beta\" pre-release has received sufficient testing for the PlanktoScope software developers to consider it stable enough for most (or, ideally, all) PlanktoScope users to rely on it for production use and scientific operations, that \"beta\" pre-release will be promoted to a \"stable\" release, and the <code>software/stable</code> branch of the PlanktoScope repository on GitHub will be advanced to the git commit of the \"stable\" release.</li> </ul>"},{"location":"reference/software/release-process/#release-schedules","title":"Release schedules","text":"<p>We try to publish a few stable releases every year. Some stable releases may consist of small bugfixes, while other stable releases may add new functionalities or change existing functionalities. Thus, each release involves changes with different sizes of potential impact on software stability and different levels of risks for introducing new bugs. Because of this, we usually cannot make confident predictions about how long we will need to wait before we can promote an \"alpha\" pre-release to a \"beta\" pre-release. And because we rely on volunteers to test our \"beta\" pre-releases and the availability of volunteers for testing each \"beta\" pre-release often varies a lot, we cannot make confident predictions about how long we will need to wait before we can promote a \"beta\" pre-release to a \"stable\" release.</p> <p>Although the unpredictability of \"alpha\" and \"beta\" pre-release testing timelines prevents us from being able to set realistic expectations about specific software release timelines, you can generally expect at least one stable release in the first half of each year, and at least one stable release in the second half of each year.</p>"},{"location":"reference/software/release-process/#choosing-a-release-channel","title":"Choosing a release channel","text":"<p>Unless you have a specific reason, you probably should follow the stable release channel. \"Stable\" releases are intended for a general audience to rely on.</p> <p>However, we encourage all PlanktoScope users who use the stable release channel to also test beta pre-releases once those pre-releases are published. This will help us to discover and understand bugs which we may need to fix before promoting the PlanktoScope software from the \"Beta\"\" channel to the \"Stable\" channel.</p>"},{"location":"reference/software/release-process/#upgrading-to-a-new-release-or-pre-release","title":"Upgrading to a new release or pre-release","text":"<p>In order to use a new release or pre-release of the PlanktoScope OS, you will need to do one of the following:</p> <ul> <li> <p>Download the new SD card image for that release/pre-release, following the standard installation process.</p> </li> <li> <p>Create a new custom SD card image for that release/pre-release, following the non-standard installation process.</p> </li> </ul> <p>Then you will need to re-flash your PlanktoScope's SD card (or flash a new SD card for your PlanktoScope) with the resulting SD card image for the new release/pre-release of the PlanktoScope OS.</p>"},{"location":"reference/software/architecture/os/","title":"Operating System","text":"<p>When you flash an SD card image with the PlanktoScope software as part of PlanktoScope's software setup process, that SD card image consists of the PlanktoScope OS. This document describes the architecture of the PlanktoScope OS as an operating system, in order to explain:</p> <ul> <li> <p>How the PlanktoScope software abstracts over the PlanktoScope hardware.</p> </li> <li> <p>How the PlanktoScope manages the execution of software programs intended to run on the PlanktoScope.</p> </li> </ul> <p>This information is intended to help you understand:</p> <ul> <li> <p>The overall design of the PlanktoScope OS, including what functionalities it provides and what software it includes, and why we made certain design decisions.</p> </li> <li> <p>How various software functionalities and responsibilities in the PlanktoScope are divided among the various programs in the PlanktoScope OS.</p> </li> <li> <p>How various programs in the PlanktoScope OS support other programs which provide the PlanktoScope's high-level/end-user functionalities.</p> </li> <li> <p>What tools you can use to perform software troubleshooting and system administration tasks with the PlanktoScope.</p> </li> <li> <p>What kinds of new software you can develop and deploy to run on a PlanktoScope.</p> </li> </ul> <p>Each SD card image of the PlanktoScope's software consists of an operating system for the PlanktoScope; the definition of the term \"operating system\" can be tricky to demarcate, but for practical purposes this document follows Bryan Cantrill's characterization of the operating system as the special program that:</p> <ul> <li>\"Abstracts hardware to allow execution of other programs.\"</li> <li>\"Defines the liveness of the machine: without it, no program can run.\"</li> <li>Provides some important components including the operating system kernel, libraries, commands, daemons, and other facilities.</li> </ul> <p>This definition is a reasonable description of the PlanktoScope OS, because it's a program which abstracts the following hardware subsystems in a way that enables you to run other programs on the PlanktoScope which need to control or otherwise interact with the PlanktoScope's hardware:</p> <ul> <li> <p>A Raspberry Pi computer.</p> </li> <li> <p>Various input/output devices such as actuators (e.g. the pump, the sample focus-adjustment actuators, and the illumination LED), sensors (e.g. the camera and the GPS module), and information storage devices (e.g. the real-time clock and the EEPROM).</p> </li> </ul>"},{"location":"reference/software/architecture/os/#software-deployment-execution","title":"Software deployment &amp; execution","text":"<p>In order to abstract the Raspberry Pi computer hardware to enable execution of other programs, the PlanktoScope OS merely uses software provided by other open-source projects:</p> <ul> <li> <p>The PlanktoScope OS is based on - and includes everything from the \"Lite\" image of - the Raspberry Pi OS (which in turn is based on Debian Linux), which provides abstractions for the Raspberry Pi's computer hardware via its custom Linux kernel and its included libraries. We use the Raspberry Pi OS because it provides Raspberry Pi-specific hardware support which we need and which is not easy to achieve with other Linux distros; and because it is the Linux distro with the best combination of familiarity, optimization, and maturity for the Raspberry Pi.</p> </li> <li> <p>Lower-level system services - including services which we've added on top of the default Raspberry Pi OS - are launched and supervised by systemd, which provides a system and service manager. We use systemd because the Raspberry Pi OS provides it and relies on it.</p> </li> <li> <p>Most of the PlanktoScope's software is (or eventually will be) executed as Docker containers by the <code>dockerd</code> daemon (which in turn is run by the <code>docker.service</code> systemd service). In the PlanktoScope OS, all Docker containers are declaratively specified, configured, and integrated together as Docker Compose applications. We use Docker because it enables us to isolate programs from each other so that they interact only in specifically-defined ways; this makes it easier for us to configure, integrate, distribute, and deploy the various programs running on the PlanktoScope. Docker does cause some usability quirks (specifically related to user permissions on files) because it runs in rootful mode, so we might consider switching to Podman at some (far?) point in the future - but that would be a serious decision requiring thorough consideration.</p> </li> </ul> <p>The PlanktoScope OS is a 64-bit operating system.</p>"},{"location":"reference/software/architecture/os/#boot-sequence","title":"Boot sequence","text":"<p>Because the PlanktoScope OS is a systemd-based Linux system running on the Raspberry Pi, the PlanktoScope's initial boot sequence is described by external documentation of:</p> <ul> <li> <p>The Raspberry Pi 4/5's boot flow, which consists of two bootloader stages to load the Raspberry Pi's firmware from the Raspberry Pi's SD card; in turn, the firmware loads the Linux kernel from the Raspberry Pi's SD card.</p> </li> <li> <p>Debian's system initialization, which consists of an initramfs stage after the Linux kernel is loaded, followed by a stage for mounting the full filesystem from the Raspberry Pi's SD card and transferring control to the systemd init process as the root user-space process.</p> </li> <li> <p>The systemd system manager's boot behavior, which initializes all necessary filesystems, drivers, and system services.</p> </li> </ul> <p>The systemd system manager starts a variety of services added by the PlanktoScope OS which do not exist in the default installation of the Raspberry Pi OS, such as <code>docker.service</code>. The startup ordering relationships between those services are listed in our reference document about services in the startup process.</p> <p>Notably as part of basic boot-up (systemd's <code>basic.target</code>), systemd will run a set of PlanktoScope OS-specific services for remounting <code>/etc</code> and <code>/usr</code> as overlay filesystems to merge the following sets of OS files, which are stored/mounted in different locations of the OS's filesystem:</p> <ul> <li>OS files provided by the standard Raspberry Pi OS (and a few PlanktoScope OS-specific files added added by the process of building PlanktoScope OS SD card images). Before boot these files are stored at <code>/etc</code> and <code>/usr</code>, but during boot they are instead found at <code>/sysroot/etc</code> and <code>/sysroot/usr</code> .</li> <li>OS files (including some overrides of files provided by the standard Raspberry Pi OS) managed by Forklift (introduced in the next section) in <code>/var/lib/forklift/stages</code>. Storing these files separately makes it easy for them to be atomically added/removed/replaced as a group for reliable in-place upgrades/downgrades of the operating system.</li> <li>User-applied customizations and overrides to any of those OS files in <code>/var/lib/overlays/overrides/etc</code> and <code>/var/lib/overlays/overrides/usr</code>. Storing these overrides separately makes it easy for user-made changes to be identified and reverted individually, e.g. as described in our networking operations guide.</li> </ul>"},{"location":"reference/software/architecture/os/#system-upgrades","title":"System upgrades","text":"<p>Traditional Linux distros such as the Raspberry Pi OS are designed to run software directly on the host OS using a shared collection of programs and system libraries provided by the Linux distro, and with programs and libraries installed and upgraded in-place directly on the host OS via the package managers provided by the distro, such as APT and <code>pip</code>. This causes the following challenges for system administration on the PlanktoScope:</p> <ul> <li> <p>These packages are not atomic in how they perform system upgrades of installed libraries and programs, so they can fail during the upgrade process (e.g. due to loss of power) in a way that leaves the system in an unknown and un-reproducible state. Such a state can be hard to revert or recover from, short of wiping and re-flashing the Raspberry Pi's SD card with a new OS installation; this would cause the loss of any OS customizations (e.g. installation of additional software) made by the user.</p> </li> <li> <p>If an upgrade of all installed programs and libraries results in a system with problems (e.g. bugs in the new version of an installed program), it is hard to completely revert the system to the previous state. Thus, software upgrades involve a trade-off between extra work (e.g. to backup the SD card image before any upgrade) and extra risk (e.g. of software breakage which is hard to revert due to lack of backups).</p> </li> <li> <p>Making certain customizations to the OS, such as adding additional programs/libraries or modifying system configuration files, increases the risk of configuration drift in which the system's actual state increasingly diverges over time from the state expected by the PlanktoScope's software maintainers, and thus becomes harder to understand, troubleshoot, or replace. User customizations to the OS cannot be easily separated from the default configuration of the OS, so it is complicated to copy only those customizations in order to drop them onto a fresh installation of the OS from a newer release - especially if the updated OS includes changes to default configurations which conflict with the user customizations.</p> </li> <li> <p>Some Python packages required by PlanktoScope-specific programs (namely the PlanktoScope hardware controller and the PlanktoScope segmenter, which are both described in later sections of this document), such as picamera2 and opencv-python-headless, can only be installed as pre-built wheels from piwheels (which is used instead of PyPi because the PlanktoScope OS is not yet able to run as a 64-bit operating system) when certain versions of system libraries are installed, or else they must be re-compiled from source (which is prohitively slow on the Raspberry Pi for the affected Python packages). This makes dependencies more complicated to manage in maintenance of the PlanktoScope OS for creating and releasing new SD card images with updated software. The reliance on system libraries also increases the risk that a user-initiated upgrade or removal of some of the system's installed APT packages could cause breakage of some <code>pip</code>-managed Python packages which had been installed before the change.</p> </li> </ul> <p>All of the factors listed above increase the perceived risk (and/or the required effort for sufficient mitigation of that risk) of accidentally degrading system integrity by keeping all software on the OS up-to-date, which makes it harder for users to receive bugfixes, security patches, and new features in a timely manner. Indeed, outside of systems like phones and Chromebooks (whose operating systems automatically update themselves), it is common for users of operating systems to avoid installing security updates or OS upgrades out of a fear of breaking their installed software; this is especially common for users who rely on software to operate other scientific instruments, and for good reasons! But the PlanktoScope project currently does not have enough resources to be able to support users stuck on old versions of the PlanktoScope OS; instead, we want to make it easy and safe for all users to always keep their PlanktoScopes - even with customizations to the OS - automatically updated to the latest version of the PlanktoScope OS. We intend to achieve this by:</p> <ul> <li> <p>Running all PlanktoScope-specific programs which require system libraries (e.g. the PlanktoScope's Python-based programs) in Docker containers - with the required versions of the required system libraries bundled inside those containers - to isolate them from the host OS's libraries installed via APT. This way, APT packages will always be safe to add, upgrade, and remove on the host OS with negligible risk of interfering with PlanktoScope-specific software.</p> </li> <li> <p>Enabling (almost) all software and OS configuration files not provided by the default installation of the Raspberry Pi OS to be upgraded and downgraded in-place - either as container images or as replacements of files on the filesystem - with just a reboot. This way, software upgrades can be (perhaps even automatically, for certain kinds of bugs) reverted in-place in case new bugs are introduced, and SD cards will only need to be re-flashed with new images once every few years (i.e. after a new major version of the Raspberry Pi OS is released).</p> </li> <li> <p>Enabling most types of user-initiated OS customizations to be version-controlled (in a Git repository) and applied (as a system upgrade/downgrade) together with most of the default configurations added by the PlanktoScope OS over what is already present from the default installation of the Raspberry Pi OS. This way, user-initiated OS customizations can be easy to re-apply automatically even after an SD card is re-flashed with a fresh SD card image of the PlanktoScope OS.</p> </li> </ul> <p>We have implemented most of the systems necessary for these goals. Much of the PlanktoScope's software is not installed or upgraded directly on the host OS via APT or <code>pip</code>; instead, we use a (mostly-complete) tool called <code>forklift</code> which we're developing specifically to support the goals listed above, and which provides a robust way for us to fully manage deployment, configuration, and upgrading of:</p> <ul> <li>All software which we run using Docker.</li> <li>PlanktoScope-specific systemd services.</li> <li>PlanktoScope-specific OS configuration files.</li> </ul> <p>Everything managed by <code>forklift</code> is version-controlled in a Git repository with a special file structure (so that the repository is called a pallet), enabling easy backup and restoration of <code>forklift</code>-managed configurations even if the PlanktoScope's SD card is wiped and re-flashed. Forklift is designed so that a pallet is effectively a version-controlled, configurable, declarative bill of materials for software/configuration modules which are composed together by Forklift into a significant layer of the PlanktoScope OS. Performing an OS upgrade/downgrade with Forklift is just a matter of running a <code>forklift</code> command to switch to a different version of a pallet, as described in our OS upgrade operations guide.</p> <p>Info</p> <p>Forklift was created mostly because the PlanktoScope OS really needs to be built around the Raspberry Pi OS, and because the Raspberry Pi OS is not yet compatible with bootc (and not even OSTree), and because the Raspberry Pi OS also does not yet have mature support for systemd-sysext, and those systems also don't meet the PlanktoScope OS's full set of requirements - so we don't yet have a sufficiently simple (and free-and-easy-for-project-maintainers-to-operate) alternative to facilitate system upgrades+downgrades and system customization for the PlanktoScope OS.</p> <p>In an ideal world, we would not need to use/maintain Forklift in the PlanktoScope OS for achieving the goals which originally motivated the creation of Forklift...or at least Forklift could outsource so much functionality to externally-maintained systems that Forklift could be reduced to a UI wrapper. Or maybe the PlanktoScope OS's goals will later be reduced to the point that Forklift will no longer be very useful for the PlanktoScope OS.</p>"},{"location":"reference/software/architecture/os/#package-management-with-forklift","title":"Package management with <code>forklift</code>","text":"<p>When you're just experimenting and you can tolerate the challenges mentioned above, it's fine to customize the PlanktoScope OS by installing software packages using <code>pip</code> directly on the OS and/or by making extensive changes to OS configuration files. However, once you actually care about keeping your customizations around - and especially if/when you want to share your customizations with other people - we recommend migrating those customizations into Forklift packages, which are just files and configuration files stored in a specially-structured Git repository which is also published online (e.g. on GitHub, GitLab, Gitea, etc.). <code>forklift</code> provides an easy way to package, publish, combine, and apply customizations via YAML configuration files in Git repositories; this enables easy sharing, configuration, (re-)composition, and downloading of Docker Compose applications, systemd services, and OS configuration files. Configurations of all deployments of Forklift packages on a computer running the PlanktoScope OS are specified and integrated in a single Git repository, a Forklift pallet. At any given time, each PlanktoScope has exactly one Forklift pallet applied; switching between Forklift pallets (whether to try out a different set of customizations or to upgrade/downgrade all programs and OS configurations managed by Forklift) is easy and can be done by running just one command (<code>forklift pallet switch</code>, described below in the Applying published customizations subsection).</p> <p><code>forklift</code> is used very differently compared to traditional Linux system package managers like APT, for which you must run step-by-step commands in order to modify the state of your system (e.g. to install some package or install some other package). When using <code>forklift</code>, you instead edit configuration files which declare the desired state of your system (or you can instead run some commands provided by <code>forklift</code> for common operations, such as in this example), and then you ask <code>forklift</code> to prepare to make your system match the desired state on its next boot.</p>"},{"location":"reference/software/architecture/os/#no-traditional-dependency-management","title":"(No traditional) dependency management","text":"<p><code>forklift</code> is simpler than traditional package managers in some notable ways (because <code>forklift</code> is designed to be much less than a traditional package manager), including in the concept of dependencies between packages. For example, Forklift packages cannot specify dependencies on other Forklift packages; instead, they may declare that they depend on certain resources - and you must declare a deployment of some other package which provides those resources. And although <code>forklift</code> checks whether resource dependencies between package deployments are satisfied, it does not attempt to solve unmet dependencies (as that is an NP-complete problem which also happens to be a major source of complexity in traditional package managers). If you've worked with the Go programming language before,  resource dependency relationships among Forklift packages are analogous to the relationships between functions which require arguments with particular interfaces and the types which implement those interfaces, with Forklift resources being analogous to Go interfaces.</p> <p>This design is intended to facilitate replacement of particular programs with modified or customized versions of those programs. For example, a Forklift package could be declared as providing the same API on the same network port as some other package, so that one package can be substituted for the other while still being treated by Forklift as being compatible with some other program which relies on the existence of that API. <code>forklift</code> also checks these resource declarations to ensure that any two packages which would conflict with each other (e.g. by trying to listen on the same network port) will be prevented from being deployed together.</p>"},{"location":"reference/software/architecture/os/#making-publishing-customizations","title":"Making &amp; publishing customizations","text":"<p>The workflow with <code>forklift</code> for developing/testing OS customizations, such as new package deployments or non-standard configurations of existing package deployments or substitutions of existing package deployments, is as follows:</p> <ul> <li> <p>Initialize a custom pallet based on (i.e. layered over) an existing pallet, using the <code>forklift pallet init</code> command (e.g. <code>forklift pallet init --from github.com/PlanktoScope/pallet-standard@stable --as github.com/ethanjli/custom-pallet</code> to make a starter which will be a customization of the latest stable version of the github.com/PlanktoScope/pallet-standard pallet, and which can be published to <code>github.com/ethanjli/custom-pallet</code>). (Note: the <code>forklift pallet init</code> command is not yet implemented, so currently a new pallet can only be created by manually initializing a new Git repository and creating a few YAML files inside it)</p> </li> <li> <p>Optionally, create new Forklift packages with definitions of Docker Compose applications and/or systemd services and/or OS configuration files, and configure the deployment of those packages by creating particular files in the pallet.</p> </li> <li> <p>Optionally, add one or more files which override files from the existing pallet, in order to override the configurations specified by those files.</p> </li> <li> <p>Stage the pallet to be applied on the next boot of the PlanktoScope OS, with the <code>forklift pallet stage</code> command; when Forklift applies a pallet, it makes the PlanktoScope OS match the configuration of Forklift package deployments specified by the pallet.</p> </li> <li> <p>Use <code>git</code> to commit changes and (ideally) push them to GitHub, in order to publish your customizations for other people to try out.</p> </li> </ul> <p>(TODO: create a \"tutorial\"-style page elsewhere in this docs site, and link to it from here; it could be as simple as creating a new pallet which adds a new helloworld-style Node-RED dashboard)</p>"},{"location":"reference/software/architecture/os/#applying-published-customizations","title":"Applying published customizations","text":"<p>To apply published customizations (which you or someone else already developed and pushed to a Git repository served by an online host such as GitHub):</p> <ol> <li> <p>Stage the customized pallet to be applied on the next boot of the PlanktoScope OS, using the <code>forklift pallet switch</code> command (e.g. <code>forklift pallet switch github.com/PlanktoScope/pallet-segmenter@edge</code> to use the latest development/unstable version of the github.com/PlanktoScope/pallet-segmenter pallet). </p> </li> <li> <p>Reboot the Raspberry Pi computer to apply the staged pallet. If the staged pallet cannot be successfully applied during boot, on subsequent boots <code>forklift</code> will instead apply the last staged pallet which was successfully applied. (Note: only a failure to update the Docker containers running on the OS is detected as a failed attempt to apply the staged pallet; if you cause problems with the systemd services or other OS configurations provided by your pallet but the Docker containers are all correctly updated, the pallet will still be considered to have been successfully applied.)</p> </li> </ol> <p>Note: currently all of <code>forklift</code>'s functionality is only exposed through a command-line interface, but after the <code>forklift</code> tool stabilizes we will consider the possibility of adding a web browser-based graphical interface for use by a general audience.</p>"},{"location":"reference/software/architecture/os/#planktoscope-specific-hardware-abstraction","title":"PlanktoScope-specific hardware abstraction","text":"<p>PlanktoScope-specific hardware modules are abstracted by PlanktoScope-specific programs which expose high-level network APIs (typically using MQTT and/or HTTP); other programs should use these APIs in order to interact with the PlanktoScope-specific hardware modules. To provide these APIs, the PlanktoScope OS adds the following services (beyond what is already provided by the default installation of the Raspberry Pi OS):</p> <ul> <li> <p><code>gpsd</code>: for providing an abstraction for the PlanktoScope's GPS receiver.</p> </li> <li> <p><code>chronyd</code>: for managing synchronization of the Raspberry Pi's system clock with the PlanktoScope's GPS receiver and with any time sources available over the Internet.</p> </li> <li> <p>The PlanktoScope hardware controller: for controlling PlanktoScope-specific hardware modules and abstracting them into high-level network APIs for other programs to interact with.</p> </li> </ul>"},{"location":"reference/software/architecture/os/#user-interface","title":"User interface","text":"<p>Traditional operating systems provide a desktop environment with a graphical user interface for operating the computer. By contrast, the PlanktoScope OS provides a set of web browser-based graphical user interfaces for operating the PlanktoScope. This approach was chosen for the following reasons:</p> <ul> <li> <p>Most people already have a personal computing device (e.g. a phone or laptop). By relying on the user's personal computing device as the graphical interface for the PlanktoScope's software, the PlanktoScope project can reduce hardware costs by omitting a display from the PlanktoScope hardware.</p> </li> <li> <p>The PlanktoScope's computational resources are limited and may often need to be fully used for data processing tasks. By offloading real-time interaction (such as rendering of the graphical display, and handling of mouse and keyboard events) to a separate device, we can ensure a smooth user experience even when the PlanktoScope's Raspberry Pi computer is busy with other work.</p> </li> <li> <p>When the PlanktoScope is connected to the internet, its web browser-based graphical interfaces can be accessed remotely over the internet from other web browsers. This can be easier to set up - and have lower bandwidth requirements and higher responsiveness - compared to a remote-desktop system for remotely accessing a Raspberry Pi's graphical desktop. This is especially relevant when the PlanktoScope is deployed in a setting where it only has a relatively low-bandwidth internet connection.</p> </li> </ul> <p>The PlanktoScope OS adds the following network services which provide web browser-based graphical user interfaces to help users operate the PlanktoScope:</p> <ul> <li> <p>A Node-RED server which serves over HTTP the PlanktoScope Node-RED dashboard, a graphical interface for end-users to operate the PlanktoScope for image acquisition and image processing.</p> </li> <li> <p>A datasets file browser for viewing, managing, uploading, and downloading image dataset files on the PlanktoScope. These files are generated and used by the PlanktoScope hardware controller and the PlanktoScope segmenter.</p> </li> <li> <p>device-portal: a landing page with links for end-users to quickly access the various web browser-based interfaces mentioned above.</p> </li> </ul> <p>Note: we will probably simplify things by consolidating some of these components together into the PlanktoScope's Node-RED dashboard.</p> <p>The PlanktoScope OS also provides various tools with web browser-based interfaces to aid with system administration and troubleshooting:</p> <ul> <li> <p>Cockpit: for performing system-administration tasks such as monitoring system resources, managing system services, viewing system logs, and executing commands in a terminal.</p> </li> <li> <p>A system file browser for viewing, managing, editing, uploading, and downloading any file on the PlanktoScope.</p> </li> <li> <p>A log file browser for viewing, downloading, and deleting log files files generated by the PlanktoScope hardware controller.</p> </li> <li> <p>Dozzle: for viewing and monitoring logs of Docker containers.</p> </li> <li> <p>Grafana: for monitoring and exploring metrics stored in Prometheus.</p> </li> </ul> <p>Finally, the PlanktoScope OS adds some command-line tools (beyond what is already provided by the default installation of the Raspberry Pi OS) for administrative tasks which system administrators, software developers, and advanced users may need to use:</p> <ul> <li> <p><code>vim</code>: for editing text files.</p> </li> <li> <p><code>byobu</code>: for running processes persistently across ephemeral terminal sessions.</p> </li> <li> <p><code>git</code>: for interacting with Git repositories.</p> </li> <li> <p><code>w3m</code> and <code>lynx</code>: for interacting with web pages (such as Wi-Fi network captive portals) from the PlanktoScope.</p> </li> <li> <p><code>docker</code>: for managing and inspecting Docker containers.</p> </li> </ul>"},{"location":"reference/software/architecture/os/#networking","title":"Networking","text":"<p>The PlanktoScope is often deployed in settings with limited or unstable internet access, and also in settings with no internet access at all. The PlanktoScope also needs to be deployable in remote settings where the user needs to control the PlanktoScope without being physically present. In both types of situations, the PlanktoScope's web browser-based interfaces need to remain accessible.</p> <p>We solve this problem by allowing the PlanktoScope to connect to the internet over a known Wi-Fi network, and/or over Ethernet, so that the PlanktoScope's web browser-based interfaces can be accessed over the internet; and by making the PlanktoScope bring up a Wi-Fi hotspot (more formally, a wireless access point) using the Raspberry Pi's integrated Wi-Fi module in the absence of any known Wi-Fi network, so that the web browser-based interfaces can be accessed over the Wi-Fi hotspot.</p> <p>When a device connects directly to the PlanktoScope (e.g. via the PlanktoScope's Wi-Fi hotspot, or via an Ethernet cable), the PlanktoScope acts as a DHCP server to assign itself certain static IP addresses (e.g. 192.168.4.1) and as a DNS server to assign itself certain domain names (e.g. <code>home.pkscope</code>), so that user can locate and open the PlanktoScope's web browser-based interfaces via those domain names. The PlanktoScope also announces itself under certain mDNS names (e.g. <code>planktoscope.local</code>) which may work on networks where the PlanktoScope does not have a static IP address (e.g. because the PlanktoScope is connected to an existing Wi-Fi network).</p> <p>When the PlanktoScope both has internet access and has devices connected to it (e.g. over a Wi-Fi hotspot or over Ethernet), the PlanktoScope shares its internet access with all connected devices, to enable the user to access web pages even when connected to the PlanktoScope. This is implemented in the PlanktoScope OS with network configurations for the PlanktoScope to act as a network router using Network Address Translation when it has internet access.</p> <p>The standard PlanktoScope OS adds the following systemd services (beyond what is already provided by the default installation of the Raspberry Pi OS) for managing the PlanktoScope's network connectivity:</p> <ul> <li> <p><code>autohotspot</code> (which in turn launches <code>hostapd</code>): a PlanktoScope-specific daemon for automatically checking the presence of known Wi-Fi networks, automatically connecting to any known Wi-Fi networks, and falling back to creating a Wi-Fi hotspot when no known Wi-Fi networks are present.</p> </li> <li> <p><code>enable-interface-forwarding</code>: configures the Linux kernel firewall's IP packet filter rules to forward packets between the Raspberry Pi's network interfaces, to allow the Raspberry Pi to act as a network router.</p> </li> <li> <p><code>dnsmasq</code>: for allowing computers connected to the PlanktoScope over a network to access the PlanktoScope using domain names defined on the PlanktoScope.</p> </li> <li> <p><code>firewalld</code>: a network firewall (currently disabled by default).</p> </li> </ul> <p>The standard PlanktoScope OS also adds the following systemd services for dynamically updating the system's network configuration during boot:</p> <ul> <li> <p><code>generate-machine-name</code>: generates a human-readable machine name  at <code>/run/machine-name</code> from the Raspberry Pi's serial number (or, if that's missing, from <code>/etc/machine-d</code>).</p> </li> <li> <p><code>generate-hostname-templated</code>: generates a temporary hostname file (which is used by a symlink at <code>/etc/hostname</code>) from <code>/etc/hostname-template</code>, which can include the machine name from <code>/run/machine-name</code>.</p> </li> <li> <p><code>update-hostname</code>: updates <code>systemd-hostnamed</code> so that the hostname matches what is specified by <code>/etc/hostname</code>.</p> </li> <li> <p><code>assemble-dnsmasq-config-templated</code>: generates a temporary dnsmasq drop-in config file (which is used by a symlink at <code>/etc/dnsmasq.d/40-generated-templated-config</code>) from drop-in config file templates at <code>/etc/dnsmasq-templates.d</code>. </p> </li> <li> <p><code>assemble-hostapd-config-templated</code>: generates a temporary hostapd drop-in config file (which is used by a symlink at <code>/etc/hostapd/hostapd.conf.d/60-generated-templated.conf</code>) from drop-in config file templates at <code>/etc/hostapd/hostapd.conf-templates.d</code>.</p> </li> <li> <p><code>assemble-hostapd-config</code>: generates a temporary hostapd config file (which is used by a symlink at <code>/etc/hostapd/hostapd.conf</code>) from drop-in config files at <code>/etc/hostapd/hostapd.conf.d</code>.</p> </li> <li> <p><code>assemble-hosts-templated</code>: generates a temporary hosts drop-in snippet (which is used by a symlink at <code>/etc/hosts.d/50-generated-templated</code>) from drop-in hosts snippet templates at <code>/etc/hosts-templates.d</code>.</p> </li> <li> <p><code>assemble-hosts</code> generates a temporary hosts file (which is used by a symlink at <code>/etc/hosts</code>) from drop-in snippets at <code>/etc/hosts-templates.d</code>.</p> </li> </ul> <p>The PlanktoScope OS also adds the following common services for integrating network APIs provided by various programs, and to facilitate communication among programs running on the PlanktoScope OS:</p> <ul> <li> <p>Mosquito: a server which acts as an MQTT broker. This is used by the PlanktoScope hardware controller and segmenter (described below) to receive commands and broadcast notifications. This is also used by the PlanktoScope's Node-RED dashboard (described below) to send commands and receive notifications.</p> </li> <li> <p>Caddy with the caddy-docker-proxy plugin: an HTTP server which acts as a reverse proxy to route all HTTP requests on port 80 from HTTP clients (e.g. web browsers) to the appropriate HTTP servers (e.g. the Node-RED server, Prometheus, and the PlanktoScope hardware controller's HTTP-MJPEG camera preview stream) running on the PlanktoScope.</p> </li> </ul>"},{"location":"reference/software/architecture/os/#filesystem","title":"Filesystem","text":"<p>The PlanktoScope OS's filesystem makes some changes from the default Debian/Raspberry Pi OS filesystem structure so that various sets of files in <code>/etc</code> and <code>/usr</code> can be atomically upgraded/downgraded/replaced together (using Forklift) while still being directly customizable by the system administrator. Specifically, a number of systemd services in the PlanktoScope OS run during early boot to:</p> <ul> <li> <p>Make a read-only mount (via the <code>overlay-sysroot</code> systemd service) of the initial root filesystem, at <code>/sysroot</code> (this layout is loosely inspired by OSTree's filesystem layout).</p> </li> <li> <p>Make a read-only mount of the next Forklift pallet to be applied (via the <code>bindro-run-forklift-stages-current.service</code>) from a subdirectory within <code>/var/lib/forklift/stages</code> to <code>/run/forklift/stages/current</code>.</p> </li> <li> <p>Remount <code>/usr</code> (via the <code>overlay-usr</code> systemd service) as a writable overlay with a Forklift-managed intermediate layer (in a subdirectory within <code>/var/lib/forklift/stages</code> which can also be accessed at <code>/run/forklift/stages/current/exports/overlays/usr</code>) and <code>/sysroot/usr</code> as a base layer; any changes made by the system administrator to files in <code>/usr</code> will be transparently stored by the overlay in <code>/var/lib/overlays/overrides/usr</code>. This allows Forklift to provide extra files in <code>/usr</code> in an atomic way, while overrides made by the system administrator are stored separately.</p> </li> <li> <p>Remount <code>/etc</code> (via the <code>overlay-etc</code> systemd service) as a writable overlay with a Forklift-managed intermediate layer (in a subdirectory within <code>/var/lib/forklift/stages</code> which can also be accessed at <code>/run/forklift/stages/current/exports/overlays/etc</code>) and <code>/sysroot/etc</code> as a base layer; any changes made by the system administrator to files in <code>/etc</code> will be transparently stored by the overlay in <code>/var/lib/overlays/overrides/etc</code>. This allows Forklift to provide extra files in <code>/etc</code> in an atomic way, while overrides made by the system administrator are stored separately.</p> </li> <li> <p>Make a writable mount of <code>/var/lib/forklift/stages</code> to <code>/home/pi/.local/share/forklift/stages</code> (via the <code>bind-.local-share-forklift-stages@home-pi</code> systemd service) so that, when the <code>pi</code> user runs <code>forklift</code> commands like <code>forklift pallet switch</code>, those commands will update <code>/var/lib/forklift/stages</code> - and without requiring the use of <code>sudo</code>.</p> </li> <li> <p>Update systemd (via the <code>start-overlaid-units</code> systemd service) with any new systemd units provided via Forklift, so that they will run during boot.</p> </li> </ul> <p>Beyond what is required by the Linux Filesystem Hierarchy Standard, the PlanktoScope OS sets the following conventions related to filesystem paths:</p> <ul> <li> <p>Scripts which are provided by Forklift and only used as part of systemd services should be provided in <code>/usr/libexec</code>, Forklift packages should export those scripts to <code>overlays/usr/libexec</code> (so, for example, they will be accessible in <code>/run/forklift/stages/current/exports/overlays/usr/libexec</code>).</p> </li> <li> <p>Systemd units provided by Forklift should be provided in <code>/usr/lib/systemd/system</code>, and Forklift packages should export those units to <code>overlays/usr/lib/systemd/system</code>. Symlinks to enable those units should be provided in <code>/etc/systemd/system</code>, and Forklift packages should export those scripts to <code>overlays/etc/systemd/system</code>.</p> </li> <li> <p>Forklift-provided systemd services which dynamically generate temporary files meant to be used in <code>/etc</code> should generate those temporary files at stable paths in <code>/run/overlays/generated/etc</code>. Forklift packages which provide such systemd services should also provide relative symlinks into those temporary files in <code>/run/overlays/generated/etc</code> to be exported into <code>overlays/etc</code> as overlays for the corresponding paths in <code>/etc</code>. For example, if a package provides a service to dynamically generate a hosts file meant to be used as <code>/etc/hosts</code>, that service should generate the file in <code>/run/overlays/generated/etc/hosts</code> and the package should export a symlink at <code>overlays/etc/hosts</code> which points to <code>../../run/overlays/generated/etc/hosts</code>, so that <code>/etc/hosts</code> will be a symlink pointing to <code>/run/overlays/generated/etc/hosts</code>.</p> </li> </ul>"},{"location":"reference/software/architecture/os/#observability-telemetry","title":"Observability &amp; telemetry","text":"<p>Although it is not a high priority yet, we would like to enable operators of large (&gt;10) collections of PlanktoScopes to easily log and monitor the health and utilization of each PlanktoScope and to investigate issues with their PlanktoScopes, regardless of whether each PlanktoScope is deployed locally or remotely. The PlanktoScope OS currently includes the following common services to support system observability and telemetry both for the PlanktoScope OS as a system and for programs running on the PlanktoScope OS:</p> <ul> <li> <p>Prometheus: a server for collecting and storing metrics and for exposing metrics over an HTTP API.</p> </li> <li> <p>Prometheus node exporter: for measuring computer hardware and OS monitoring metrics and exposing them over a Prometheus-compatible HTTP API.</p> </li> </ul> <p>In the future, we will instrument other PlanktoScope-specific programs (especially the PlanktoScope hardware controller) to export various metrics for Prometheus to collect and expose.</p>"},{"location":"reference/software/architecture/os/#data-processing","title":"Data processing","text":"<p>Because the PlanktoScope collects raw image datasets which are often too large to transfer efficiently over low-bandwidth or intermittent internet connections, the PlanktoScope needs to be able to process raw image data into lower-bandwidth data (e.g. cropped and segmented images of particles in the raw images, or even just counts of different classes of particles) without internet access. In other words, the PlanktoScope must support on-board data processing at the edge. The PlanktoScope OS adds the following services for on-board processing of data generated by the PlanktoScope:</p> <ul> <li>The PlanktoScope segmenter: for processing raw image datasets acquired by the PlanktoScope hardware controller to detect and extract particles from raw images.</li> </ul> <p>Note: in the future, the PlanktoScope OS will add more on-board services for processing the outputs of the PlanktoScope segmenter, and the PlanktoScope OS may also provide hardware abstractions (such as for AI accelerator modules) to support the deployment of neural-network models for data processing.</p>"},{"location":"reference/software/architecture/os/#security","title":"Security","text":"<p>Currently, the PlanktoScope OS lacks basic security measures to make it safe for them to be connected to the internet; currently it is the responsibility of system administrators to add extremely basic risk mitigations, for example by:</p> <ul> <li> <p>Changing the password of the <code>pi</code> user away from the default of <code>copepode</code>.</p> </li> <li> <p>Password-protecting the Node-RED dashboard editor, which can be used to execute arbitrary commands with root permissions.</p> </li> <li> <p>Setting firewall rules.</p> </li> <li> <p>Changing the password of the Wi-Fi hotspot away from the default of <code>copepode</code>, or disabling Wi-Fi hotspot functionality.</p> </li> </ul> <p>Other risk mitigations will require deeper changes to the PlanktoScope OS, such as:</p> <ul> <li> <p>Limiting the permissions and capabilities made available to various system services which currently run with root permissions</p> </li> <li> <p>Password-protecting web browser-based user interfaces</p> </li> <li> <p>Password-protecting network APIs.</p> </li> </ul> <p>We would like to start taking even just the very basic steps listed above to improve security, but security is not yet a high-enough priority for us to work on it with the limited resources available to us \ud83d\ude43 - if you're interested in computer/network security and you'd like to help us as a volunteer on this project, please contact us!</p>"},{"location":"reference/software/functionalities/camera-settings/","title":"Camera Settings","text":"<p>This document explains how the PlanktoScope software controls the PlanktoScope's camera using the camera settings exposed by the \"Optic Configuration\" page of the PlanktoScope's Node-RED dashboard.</p> <p>The following camera settings can be adjusted via the Node-RED dashboard:</p> <ul> <li> <p>\"ISO\" &amp; \"Shutter Speed\" control the brightness of images captured by the camera.</p> </li> <li> <p>\"Auto White Balance\", \"WB: Red\", and \"WB: Blue\" control the color balance of images captured by the camera.</p> </li> </ul>"},{"location":"reference/software/functionalities/camera-settings/#image-brightness","title":"Image brightness","text":""},{"location":"reference/software/functionalities/camera-settings/#shutter-speed-actually-exposure-time","title":"\"Shutter Speed\" (actually exposure time)","text":"<p>The Node-RED dashboard's \"Shutter Speed\" setting, which is specified in units of microseconds (\u03bcs), is used to set the <code>ExposureTime</code> control with the picamera2 library; a higher value for this setting will make captured images brighter and - when objects are moving - blurrier. To prevent the camera from capturing blurry images of moving objects, the value of this setting should be minimized; usually the default value of 125 \u03bcs is appropriate. For a detailed explanation of the exposure time of the camera sensor, refer to the picamera library's discussion of \"exposure time\".</p>"},{"location":"reference/software/functionalities/camera-settings/#iso-actually-sensor-gain","title":"\"ISO\" (actually sensor gain)","text":"<p>The Node-RED dashboard's \"ISO\" setting is multiplied by a camera-dependent conversion factor (0.0184 for the Pi Camera v2 Module found in PlanktoScope hardware v2.1; and 0.023125 for the Pi HQ Camera Module found in PlanktoScope hardware v2.5 and subsequent hardware versions); the result is used to set the <code>AnalogueGain</code> control with the picamera2 library. A higher value for this setting will make the camera sensor more sensitive to light, and thus make captured images brighter and noisier. To prevent the camera from capturing excessively dark images - which will prevent the PlanktoScope's segmenter from correctly detecting objects - the value of this setting should not be too low. To prevent the camera from \"washing out\" images by making everything excessively bright - which will destroy visual detail in the images - the value of this setting should not be too high, either. For a detailed explanation of the analog gain of the camera sensor, refer to the picamera library's discussion of \"sensor gain\" and the picamera2 library's discussion of the <code>AnalogueGain</code> control and the <code>DigitalGain</code> property.</p>"},{"location":"reference/software/functionalities/camera-settings/#image-color-balance","title":"Image color balance","text":"<p>The PlanktoScope's camera can operate with \"Automatic White Balance\" mode either enabled or disabled. In \"Automatic White Balance\" mode, the camera ignores any manually-set white-balance settings and instead applies an adaptive algorithm to automatically (and gradually) correct the color balance of the images to prevent them from appearing more red or more blue than we would expect the images to be. However, \"Automatic White Balance\" mode prevents images from having consistent calibrations, so we recommend always disabling \"Automatic White Balance\" mode when collecting data with the PlanktoScope, and instead manually calibrating the camera's white-balance settings.</p> <p>The camera's manual white-balance settings consist of two normalized color values, which are the red gain (\"WB: Red\" in the Node-RED dashboard) and the blue gain (\"WB: Blue\" in the Node-RED dashboard). The red gain can be understood as a multiplier applied to the image to achieve the desired ratio between the redness of the image and the greenness of the image, so a higher value will make the image appear redder. Similarly, the blue gain can be understood as a multiplier applied to the image to achieve the desired ratio between the blueness of the image and the greenness of the image, so a higher value will make the image appear bluer. For a deeper conceptual explanation of white balance, refer to the first two pages of Freescale Semiconductor's application note on white balance and color correction in digital cameras.</p>"},{"location":"reference/software/functionalities/sample-imaging/","title":"Sample Imaging","text":"<p>This document explains how the PlanktoScope software captures images of samples and how it uses the image-acquisition settings exposed by the \"Fluidic Acquisition\" page of the PlanktoScope's Node-RED dashboard.</p> <p>Currently, the PlanktoScope software only has one sample-imaging mode, which we call \"stop-flow imaging\":</p>"},{"location":"reference/software/functionalities/sample-imaging/#stop-flow-imaging","title":"Stop-flow imaging","text":"<p>This imaging mode is optimized to allow capture of high-quality images using low-cost, high-resolution camera modules such as the Raspberry Pi Camera Module 2 and the Raspberry Pi High Quality Camera (refer to the hardware product specifications to see which camera modules are used in each version of the PlanktoScope hardware), whose rolling-shutter designs can introduce artifacts around moving objects while the camera is capturing an image.</p> <p>When this imaging mode is started, the PlanktoScope will repeatedly perform the following sequence of actions until a desired number of images (\"Number of images to acquire\" in the Node-RED dashboard) is captured:</p> <ol> <li> <p>The PlanktoScope's pump will pull some fixed volume of sample (\"Pumped volume\" in the Node-RED dashboard, in units of mL) from the sample intake and move the same volume of sample down through the PlanktoScope's flowcell.</p> </li> <li> <p>After the PlanktoScope's pump finishes pumping the specified volume, the pump will stop and the PlanktoScope will wait for some short fixed duration of time (\"Delay to stabilize image\" in the Node-RED dashboard, in units of seconds). This waiting period is intended to allow the sample in the PlanktoScope's flowcell to stop flowing, so that all objects in the camera's field-of-view will (hopefully) stop moving - because moving objects will cause distortion effects to appear in images captured with rolling-shutter cameras such as those used in the PlanktoScope.</p> </li> <li> <p>The PlanktoScope will capture and save an image of its entire field-of-view.</p> </li> </ol>"},{"location":"reference/software/functionalities/segmentation/","title":"Image Segmentation","text":"<p>This document explains how the PlanktoScope software's segmenter program processes raw images (captured by the PlanktoScope's sample-imaging functionality) in order to detect objects - such as plankton, microplastics, and other particles - and to extract each object into its own segmented image for downstream use, such as for uploading to EcoTaxa. This document also lists and explains the metadata fields added by the PlanktoScope segmenter for uploading to EcoTaxa.</p> <p>Currently, the segmenter only operates in batch-processing mode: the segmenter takes as input a complete raw image dataset, and it produces as output a complete segmented object dataset as well as an export archive of segmented objects which can be uploaded to EcoTaxa.</p> <p>When the segmenter starts, it will perform a median-calculation step on the first ten images of the dataset of raw images. The median-calculation step outputs a median image which is then used as an input for an image-correction step on each raw image; the median image will occasionally be recalculated (conditions triggering a recalculation are described below). Each image-cleaning step outputs a median-corrected image is then used as the input for a mask-calculation step. Each mask-calculation step outputs a segmentation mask which is then used as an input for an object-extraction step.</p> <p>For each raw image from the input dataset, after the object-extraction step outputs a set of objects, the number of extracted objects is accumulated into a cumulative moving average of the number of objects extracted per raw image. However, before the cumulative moving average is updated, the number of extracted objects is compared against the previous value of the cumulative moving average (calculated after the previous raw image was processed): if the number of extracted objects is greater than the previous value of the cumulative moving average by more than 20, then the median image will be recalculated for the next raw image. The input for the next median-calculation step will usually be the next 10 consecutive raw images, unless the next raw image is one of the last 10 raw images - in which case the previous ten images will instead be used as the input for the next median-calculation step. Yes, this logic is complicated, and yes, for some reason we don't center the sequence of raw images around the next raw image as our input to the median-calculation step.</p>"},{"location":"reference/software/functionalities/segmentation/#median-calculation-step","title":"Median-calculation step","text":"<p>The median-calculation step takes as input a sequence of consecutive raw images, but if the image sequence consists of an even number of images then the last image is excluded from the calculation. The median-calculation step uses the raw images to calculate a median image, in which the color of each pixel of the output is calculated as the median of the colors of the corresponding pixels in the input images.</p> <p>The output of this step is supposed to be an estimate of what the the \"background\" of the image would be if there were no objects within the field-of-view. However, this step is not robust to sample density: if a sample is dense enough that certain pixel locations overlap with objects in more than half of any consecutive sequence of ten images, the color of the \"background\" in those pixel locations will be estimated as the color of an object in one of those images.</p>"},{"location":"reference/software/functionalities/segmentation/#image-correction-step","title":"Image-correction step","text":"<p>The image-correction step takes as input a median image and a raw image. First, the image-correction step divides the color of each pixel of the raw image by the color of the corresponding pixel of the median image; this is probably intended to correct for inhomogeneous illumination in the raw image, and to remove any objects which had been stuck to the flow cell (and thus were included in the median image) from the raw image. Next, the image-correction step slightly rescales the intensity range of the resulting image (TODO: determine what the effect of this intensity-rescaling operation is - does it make the image brighter or dimmer? Does it increase or decrease the contrast? Does it clip the white value? Why is this step performed???). The final result is a median-corrected image.</p>"},{"location":"reference/software/functionalities/segmentation/#mask-calculation-step","title":"Mask-calculation step","text":"<p>The mask-calculation step takes as input a median-corrected image and the result from the previous mask-calculation step. It consists of the following operations:</p> <ol> <li> <p>\"Simple threshold\": this operation applies a global threshold to the input corrected image, using the triangle algorithm to calculate an optimal threshold value for the image; the output is a mask in which each pixel is set to 0 if the corresponding pixel of the input image is greater than the threshold, and to 255 otherwise. The resulting mask should select for objects which appear darker than the background of the image.</p> </li> <li> <p>\"Erode\": this operation erodes the mask with a 2-pixel-by-2-pixel square kernel. In the resulting mask, small regions (such as thresholded noise) are eliminated.</p> </li> <li> <p>\"Dilate\": this operation dilates the mask with an 8-pixel-diameter circular kernel. In the resulting mask, regions remaining after the previous \"erode\" operation are padded with a margin.</p> </li> <li> <p>\"Close\": this operation dilates and then erodes the mask with an 8-pixel-diameter circular kernel. In the resulting mask, small holes in regions remaining after the previous \"dilate\" operation are eliminated.</p> </li> <li> <p>\"Erode2\": this operation erodes the mask with an 8-pixel-diameter circular kernel, inverting the effect of the previous \"dilate\" operation.</p> </li> </ol> <p>The final result these operations is a spatially-filtered segmentation mask where the value of each pixel represents whether that pixel is part of an object or part of the background of the input corrected image.</p>"},{"location":"reference/software/functionalities/segmentation/#object-extraction-step","title":"Object-extraction step","text":"<p>The object-extraction step takes the following inputs:</p> <ul> <li> <p>A median-corrected image</p> </li> <li> <p>A segmentation mask</p> </li> <li> <p>The sample metadata field <code>acq_minimum_mesh</code>: the diameter of the smallest spherical object which is expected to be in the sample, usually 20 \u00b5m. This value is set on the \"Fluidic Acquisition\" page of the PlanktoScope's Node-RED dashboard as the \"Min fraction size\" field.</p> </li> <li> <p>The sample metadata field <code>process_pixel</code>: the pixel size calibration of the PlanktoScope, in units of \u00b5m per pixel; then the area (in units of \u00b5m<sup>2</sup>) per pixel is <code>process_pixel * process_pixel</code>. This value is set on the \"Hardware Settings\" page of the PlanktoScope's Node-RED dashboard as the \"Pixel size calibration: um per pixel\" field.</p> </li> </ul> <p>First, the object-extraction step calculates a minimum-area threshold for objects to extract using the input segmentation mask: the threshold (in units of pixel<sup>2</sup>) is calculated as <code>pi * (acq_minimum_mesh / 2 / process_pixel) ^ 2</code>.</p> <p>Next, the object-extraction step identifies all connected regions of the input segmentation mask and measures properties of those regions. The object-extraction step then discards any region whose filled area (<code>area_filled</code> in scikit-image) is less than the minimum-area threshold.</p>"},{"location":"reference/software/functionalities/segmentation/#metadata-calculation","title":"Metadata calculation","text":"<p>For each resulting region after the minimum-area threshold is applied, that region will be used to extract a segmented and cropped image of the object (including pixels in any holes in the object) from the input median-corrected image. This cropped image is used to calculate some metadata fields about the distribution of colors in the object's segmented image:</p> <ul> <li> <p><code>MeanHue</code>: the mean of the hue channel of the image in a hue-saturation-value (HSV) representation of the image</p> </li> <li> <p><code>StdHue</code>: the standard deviation of the hue channel of the image in an HSV representation of the image</p> </li> <li> <p><code>MeanSaturation</code>: the standard deviation of the saturation channel of the image in an HSV representation of the image</p> </li> <li> <p><code>StdSaturation</code>: the standard deviation of the saturation channel of the image in an HSV representation of the image</p> </li> <li> <p><code>MeanValue</code>: the standard deviation of the value channel of the image in an HSV representation of the image</p> </li> <li> <p><code>StdValue</code>: the standard deviation of the value channel of the image in an HSV representation of the image</p> </li> </ul> <p>Additionally, some metadata for the object is calculated from the region properties calculated by scikit-image for that object's region:</p> <ul> <li><code>label</code>: The identifier of the object's region, as assigned by scikit-image. This corresponds to the <code>label</code> region property in scikit-image.</li> </ul>"},{"location":"reference/software/functionalities/segmentation/#basic-area-properties","title":"Basic area properties","text":"<ul> <li> <p><code>area_exc</code>: Number of pixels in the region (excluding pixels in any holes). This corresponds to the <code>area</code> region property in scikit-image.</p> </li> <li> <p><code>area</code>: Number of pixels of the region with all holes filled in (i.e. including pixels in any holes). This corresponds to the <code>area_filled</code> region property in scikit-image. Yes, it's somewhat confusing that the PlanktoScope segmenter renames scikit-image's <code>area</code> region property to <code>area_exc</code> and renames scikit-image's <code>area_filled</code> region property to <code>area</code>.</p> </li> <li> <p><code>%area</code>: Ratio between the number of pixels in any holes in the region and the total number of pixels of the region with all holes filled in; calculated as <code>1 - area_exc / area</code>. In other words, this represents the proportion of the region which consists of holes. Yes, <code>%area</code> is a misleading name both because of the <code>%</code> in the name and because of the <code>area</code> in the name.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#equivalent-circle-properties","title":"Equivalent-circle properties","text":"<ul> <li><code>equivalent_diameter</code>: The diameter (in pixels) of a circle with the same number of pixels in its area as the number of pixels in the region (excluding pixels in any holes). This corresponds to the <code>equivalent_diameter_area</code> property in scikit-image.</li> </ul>"},{"location":"reference/software/functionalities/segmentation/#equivalent-ellipse-properties","title":"Equivalent-ellipse properties","text":"<ul> <li> <p><code>eccentricity</code>: Eccentricity of the ellipse that has the same second-moments as the region; eccentricity is the ratio of the focal distance (distance between focal points) over the major axis length. The value is in the interval [0, 1), where a value of 0 represents a circle. This corresponds to the <code>eccentricity</code> property in scikit-image.</p> </li> <li> <p><code>major</code>: The length (in pixels) of the major axis of region's equivalent ellipse. This corresponds to the <code>axis_major_length</code> property in scikit-image.</p> </li> <li> <p><code>minor</code>: The length (in pixels) of the minor axis of the region's equivalent ellipse. This corresponds to the <code>axis_minor_length</code> property in scikit-image.</p> </li> <li> <p><code>elongation</code>: The ratio between <code>major</code> and <code>minor</code>.</p> </li> <li> <p><code>angle</code>: Angle (in degrees) between the x-axis of the input median-corrected image and the major axis of the region's equivalent ellipse. Values range from 0 deg to 180 deg counter-clockwise. This is calculated from the <code>orientation</code> property in scikit-image.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#equivalent-object-perimeter-properties","title":"Equivalent-object perimeter properties","text":"<ul> <li> <p><code>perim.</code>: Perimeter (in pixels) of an object which approximates the region's contour as a line through the centers of border pixels using a 4-connectivity. This corresponds to the <code>perimeter</code> property in scikit-image.</p> </li> <li> <p><code>perimareaexc</code>: Ratio between the perimeter and the number of pixels in the region (excluding pixels in any holes). Calculated as <code>perim. / area_exc</code>.</p> </li> <li> <p><code>perimmajor</code>: Ratio between the perimeter and the length of the major axis of the region's equivalent ellipse. Calculated as <code>perim. / major</code>.</p> </li> <li> <p><code>circ.</code>: The roundness of the region's equivalent object, including pixels in any holes. Calculated as <code>4 * \u03c0 * area / (perim. * perim.)</code>. Ranges from 1 for a perfect circle to 0 for highly non-circular shapes.</p> </li> <li> <p><code>circex</code>: The roundness of the region's equivalent object, excluding pixels in any holes. Calculated as <code>4 * \u03c0 * area_exc / (perim. * perim.)</code>. Ranges from 1 for a perfect circle to 0 for highly non-circular shapes or shapes with many large holes.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#bounding-box-properties","title":"Bounding box properties","text":"<p>The bounding box is the smallest rectangle which includes all pixels of the region, under the constraint that the edges of the box are parallel to the x- and y-axes of the input median-corrected image.</p> <ul> <li> <p><code>bx</code>: x-position (in pixels) of the top-left corner of the region's bounding box, relative to the top-left corner of the input median-corrected image. This corresponds to the second element of the <code>bbox</code> property in scikit-image.</p> </li> <li> <p><code>by</code>: y-position (in pixels) of the top-left corner of the region's bounding box, relative to the top-left corner of the input median-corrected image. This corresponds to the first element of the <code>bbox</code> property in scikit-image.</p> </li> <li> <p><code>width</code>: Width (in number of pixels) of the region's bounding box. This is calculated from the elements of the <code>bbox</code> property in scikit-image.</p> </li> <li> <p><code>height</code>: Height (in number of pixels) of the region's bounding box. This is calculated from the elements of the <code>bbox</code> property in scikit-image.</p> </li> <li> <p><code>bounding_box_area</code>: Number of pixels in the region's bounding box; equivalent to <code>width * height</code>. This corresponds to the <code>area_bbox</code> region property in scikit-image.</p> </li> <li> <p><code>extent</code>: Ratio between the number of pixels in the region (excluding pixels in any holes) and the number of pixels in the region's bounding box; equivalent to <code>area_exc / bounding_box_area</code>. This corresponds to the <code>extent</code> region property in scikit-image.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#convex-hull-properties","title":"Convex hull properties","text":"<p>The convex hull is the smallest convex polygon which encloses the region.</p> <ul> <li> <p><code>convex_area</code>: Number of pixels in the convex hull of the region. This corresponds to the <code>area_convex</code> region property in scikit-image.</p> </li> <li> <p><code>solidity</code>: Ratio between the number of pixels in the region (excluding pixels in any holes) and the number of pixels in the convex hull of the region. Equivalent to <code>area_exc / convex_area</code>. This corresponds to the <code>solidity</code> region property in scikit-image.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#unweighted-centroid-properties","title":"Unweighted centroid properties","text":"<ul> <li> <p><code>x</code>: x-position (in pixels) of the centroid of the object, relative to the top-left corner of the input median-corrected image. This corresponds to the second element of the <code>centroid</code> region property in scikit-image.</p> </li> <li> <p><code>y</code>: y-position (in pixels) of the centroid of the object, relative to the top-left corner of the input median-corrected image. This corresponds to the first element of the <code>centroid</code> region property in scikit-image.</p> </li> <li> <p><code>local_centroid_col</code>: x-position (in pixels) of the centroid of the object, relative to the top-left corner of the region's bounding box; equivalent to <code>x - bx</code>. This corresponds to the second element of the <code>centroid_local</code> region property in scikit-image.</p> </li> <li> <p><code>local_centroid_row</code>: y-position (in pixels) of the centroid of the object, relative to the top-left corner of the region's bounding box; equivalent to <code>y - by</code>. This corresponds to the first element of the <code>centroid_local</code> region property in scikit-image.</p> </li> </ul>"},{"location":"reference/software/functionalities/segmentation/#topological-properties","title":"Topological properties","text":"<ul> <li><code>euler_number</code>: The Euler characteristic of the set of non-zero pixels. Computed as the number of connected components subtracted by the number of holes (with 2-connectivity). This corresponds to the <code>euler_number</code> property in scikit-image.</li> </ul>"},{"location":"reference/software/functionalities/segmentation/#output-image-cropping","title":"Output image cropping","text":"<p>Finally, a segmented and cropped image of the object (including pixels in any holes in the object) is saved from the input median-corrected image, but with the crop expanded by up to 10 pixels in each direction (TODO: check whether this description is accurate - the corresponding code is extremely unreadable).</p> <p>Thus, the output of the output-extraction step is a set of objects, each with a corresponding cropped image saved to file and with a corresponding list of metadata values.</p>"},{"location":"reference/software/interfaces/exported-metadata/","title":"Exported Metadata","text":"<p>TODO</p>"},{"location":"reference/software/interfaces/mqtt/","title":"Planktoscope MQTT API Reference","text":"<p>The MQTT API is the primary programming interface for controlling the PlanktoScope. The API is served by the PlanktoScope's Python backend, and data is sent across the API with the following architecture:</p> <pre><code>flowchart TD\n    API[API Client] --&gt;|Command| Broker[MQTT Broker]\n    Broker --&gt;|Command| Backend[Python Backend]\n    Backend --&gt;|Status Update| Broker[MQTT Broker]\n    Broker --&gt;|Status Update| API</code></pre> <p>Most messages in the MQTT API are organized according to a request-response pattern in which the API client sends a command as a request to take some action, and then the Python backend sends one or more responses as status updates about how the Python backend's state has changed as a result of the command:</p> <ul> <li>API clients send commands to the Python backend (via the MQTT broker), and receive status updates from the Python backend (also via the MQTT broker). The PlanktoScope's Node-RED dashboard is an API client, but other programs are also allowed to act as API clients.</li> <li>The MQTT broker passes commands and status updates between the API client(s) and the Python backend. The MQTT broker runs on the PlanktoScope and accepts connections from API clients on port 1883.</li> <li>The Python backend handles commands, takes actions (e.g. changing the state of hardware actuators), and publishes status updates both in response to commands and in response to changes in internal state. Currently, parts of the Python backend also act as MQTT API clients to other parts of the Python backend.</li> </ul> <p>Every MQTT message in the PlanktoScope's MQTT API is published on a specific topic, which is a slash-delimited path of strings (e.g. <code>actuator/pump</code>). Every MQTT message in the PlanktoScope's MQTT API carries a payload, which is a JSON object serialized as a string:</p> <ul> <li>Messages which are commands usually specify the type of command in an <code>action</code> field of the payload object; other fields of the payload object are parameters of the command.</li> <li>Messages which are status updates have a single field in the payload object, <code>status</code>, which is a string containing a status or error message.</li> </ul> <p>In the rest of this reference document, we organize our description of the MQTT API into sections corresponding to distinct functionalities of the Python backend:</p>"},{"location":"reference/software/interfaces/mqtt/#pump","title":"Pump","text":"<p>The Pump API controls the movement of fluid through the PlanktoScope:</p> <ul> <li>MQTT topics for commands: <code>actuator/pump</code></li> <li>MQTT topics for status updates: <code>status/pump</code></li> <li>Commands: <code>move</code>, <code>stop</code></li> </ul>"},{"location":"reference/software/interfaces/mqtt/#move-command","title":"<code>move</code> command","text":"<p>The <code>move</code> command initiates movement of fluid through the PlanktoScope by driving the PlanktoScope pump's stepper motor. For example, this command makes the pump move 10 mL of fluid forwards through the PlanktoScope's fluidic path, at a rate of 1 mL/min:</p> <pre><code>{\n  \"action\": \"move\",\n  \"direction\": \"FORWARD\",\n  \"volume\": 10,\n  \"flowrate\": 1\n}\n</code></pre> <p>The <code>move</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>move</code> command. string <code>move</code> <code>direction</code> Direction to run the pump. string <code>FORWARD</code>, <code>BACKWARD</code> <code>volume</code> Total volume of sample to pump before stopping automatically (mL). float 0 &lt; <code>volume</code> <code>flowrate</code> Speed of pumping (mL/min). float 0 &lt; <code>flowrate</code> \u2264 45 mL/min"},{"location":"reference/software/interfaces/mqtt/#move-command-responses","title":"<code>move</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/pump</code> topic, in response to the <code>move</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Started</code> The pump has started moving in response to a valid <code>move</code> command. <code>Error, the message is missing an argument</code> One or more required parameters (<code>direction</code>, <code>volume</code>, <code>flowrate</code>) are missing in the <code>move</code> command. <code>Error, The flowrate should not be == 0</code> An invalid value (0) was provided for the <code>flowrate</code> field. <code>Done</code> The pump has successfully stopped after fully pumping the specified volume of sample. <p>Note: the MQTT API does not yet completely specify error messages in response to invalid values for the <code>direction</code>, <code>volume</code>, and <code>flowrate</code> parameters.</p>"},{"location":"reference/software/interfaces/mqtt/#stop-command","title":"<code>stop</code> command","text":"<p>The <code>stop</code> command interrupts any ongoing movement of fluid through the PlanktoScope and cuts off power to the PlanktoScope pump's stepper motor:</p> <pre><code>{\n  \"action\": \"stop\"\n}\n</code></pre> <p>The <code>stop</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>stop</code> command. string <code>stop</code>"},{"location":"reference/software/interfaces/mqtt/#stop-command-responses","title":"<code>stop</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/pump</code> topic, in response to the <code>stop</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Interrupted</code> The pump has stopped moving in response to a valid <code>stop</code> command, interrupting any ongoing <code>move</code> command.Sent in response to any Pump <code>stop</code> command, and any Imager <code>stop</code> command."},{"location":"reference/software/interfaces/mqtt/#non-response-status-updates","title":"Non-response status updates","text":"<p>The Python backend can send status updates on the <code>status/pump</code> topic which are not triggered by any command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Ready</code> The backend has become ready to respond to Pump commands. <code>Dead</code> The backend will no longer respond to Pump commands."},{"location":"reference/software/interfaces/mqtt/#focus","title":"Focus","text":"<p>The Focus API controls the movement of the sample stage focusing motors in the PlanktoScope:</p> <ul> <li>MQTT topics for commands: <code>actuator/focus</code></li> <li>MQTT topics for status updates: <code>status/focus</code></li> <li>Commands: <code>move</code>, <code>stop</code></li> </ul>"},{"location":"reference/software/interfaces/mqtt/#move-command_1","title":"<code>move</code> command","text":"<p>The <code>move</code> command initiates movement of the focusing stage by a specified displacement. For example, this command makes the stage move up by 0.26 mm at a speed of 1 mm/s:</p> <pre><code>{\n  \"action\": \"move\",\n  \"direction\": \"UP\",\n  \"distance\": 0.26,\n  \"speed\": 1\n}\n</code></pre> <p>The <code>move</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>move</code> command. string <code>move</code> <code>direction</code> Direction to move the sample stage. string <code>UP</code>, <code>DOWN</code> <code>distance</code> Total distance to move the stage before stopping automatically (in mm). float 0 &lt; <code>distance</code> \u2264 45.0 <code>speed</code> Speed of movement (in mm/s).Defaults to 5. float 0 &lt; <code>speed</code> \u2264 5.0 (optional)"},{"location":"reference/software/interfaces/mqtt/#move-command-responses_1","title":"<code>move</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/focus</code> topic in response to the <code>move</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Started</code> The focusing motors have started moving in response to a valid <code>move</code> command. <code>Error</code> The <code>move</code> command is missing the <code>distance</code> and/or <code>direction</code> fields. <code>Done</code> The focusing motors have successfully stopped after moving the specified distance."},{"location":"reference/software/interfaces/mqtt/#stop-command_1","title":"<code>stop</code> command","text":"<p>The <code>stop</code> command interrupts any ongoing movement of the focusing stage and cuts off power to the focusing motors:</p> <pre><code>{\n  \"action\": \"stop\"\n}\n</code></pre> <p>The <code>stop</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>stop</code> command. string <code>stop</code>"},{"location":"reference/software/interfaces/mqtt/#stop-command-responses_1","title":"<code>stop</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/focus</code> topic, in response to the <code>stop</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Interrupted</code> The focusing motors have stopped moving in response to a valid <code>stop</code> command, interrupting any ongoing <code>stop</code> command."},{"location":"reference/software/interfaces/mqtt/#non-response-status-updates_1","title":"Non-response status updates","text":"<p>The Python backend can send status updates on the <code>status/focus</code> topic which are not triggered by any command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Ready</code> The backend has become ready to respond to Focus commands. <code>Dead</code> The backend will no longer respond to Focus commands."},{"location":"reference/software/interfaces/mqtt/#light","title":"Light","text":"<p>The Light API controls the state of the LED lighting system in the PlanktoScope:</p> <ul> <li>MQTT topics for commands: <code>actuator/light</code></li> <li>MQTT topics for status updates: <code>status/light</code></li> <li>Commands: <code>on</code>, <code>off</code></li> </ul>"},{"location":"reference/software/interfaces/mqtt/#on-command","title":"<code>on</code> command","text":"<p>The <code>on</code> command turns on the sample illumination LED. For example:</p> <pre><code>{\n  \"action\": \"on\"\n  \"led\": \"1\"\n}\n</code></pre> <p>The <code>on</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>on</code> command. string <code>on</code> <code>led</code> Specifies the LED to turn on.Defaults to <code>1</code>. integer <code>1</code>\u00a0(optional)"},{"location":"reference/software/interfaces/mqtt/#on-command-responses","title":"<code>on</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/light</code> topic in response to the <code>on</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Led 1: On</code> The LED turned on successfully. <code>Error with LED number</code> An invalid value was provided for the <code>led</code> field of the command."},{"location":"reference/software/interfaces/mqtt/#off-command","title":"<code>off</code> command","text":"<p>The <code>off</code> command turns off the sample illumination LED. For example:</p> <pre><code>{\n  \"action\": \"off\"\n}\n</code></pre> <p>The <code>off</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>off</code> command. string <code>off</code> <code>led</code> Specifies the LED to turn on.Defaults to <code>1</code> integer <code>1</code>"},{"location":"reference/software/interfaces/mqtt/#off-command-responses","title":"<code>off</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/light</code> topic in response to the <code>off</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Led 1: Off</code> The LED turned off successfully. <code>Error with LED number</code> An invalid value was provided for the <code>led</code> field of the command."},{"location":"reference/software/interfaces/mqtt/#non-response-status-updates_2","title":"Non-response status updates","text":"<p>The Python backend can send status updates on the <code>status/light</code> topic which are not triggered by any command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Ready</code> The backend has become ready to respond to Light commands. <code>Dead</code> The backend will no longer respond to Light commands."},{"location":"reference/software/interfaces/mqtt/#imager","title":"Imager","text":"<p>The Imager API controls image acquisition with the PlanktoScope's hardware, as well as the PlanktoScope's camera:</p> <ul> <li>MQTT topics for commands: <code>imager/image</code></li> <li>MQTT topics for status updates: <code>status/imager</code></li> <li>Commands: <code>settings</code>, <code>update_config</code>, <code>image</code>, <code>stop</code></li> </ul> <p>For details on how images are acquired, refer to our technical reference on sample imaging in the PlanktoScope.</p> <p>Generally, commands should be sent in the following order:</p> <ol> <li><code>settings</code> command: Configure the camera settings.</li> <li><code>update_config</code> command: Update the dataset metadata for the next image acquisition.</li> <li><code>image</code> command: Initiate image acquisition.</li> <li><code>stop</code> command: Stop any in-progress image acquisition.</li> </ol>"},{"location":"reference/software/interfaces/mqtt/#settings-command","title":"<code>settings</code> command","text":"<p>The <code>settings</code> command changes the camera settings. The fields <code>iso</code>, <code>shutter_speed</code>, <code>white_balance_gain</code> and <code>white_balance</code> are optional - if a field is omitted, its setting will not be changed. Here's an example of a command with values specified for all fields:</p> <pre><code>{\n  \"action\": \"settings\",\n  \"settings\": {\n    \"iso\": 100,\n    \"shutter_speed\": 40,\n    \"white_balance_gain\": { \"red\": 100, \"blue\": 100 },\n    \"white_balance\": \"auto\",\n  }\n}\n</code></pre> <p>The <code>settings</code> command has the following parameters:</p> Parameter Description Type Accepted Values <code>action</code> Specifies the <code>settings</code> command. string <code>settings</code> <code>iso</code> Simulated ISO image sensitivity. int 0 &lt; <code>iso</code> \u2264 650 (higher values may be accepted for certain cameras) (optional) <code>shutter_speed</code> Exposure time (in \u03bcs). int 125 \u2264 <code>shutter_speed</code>\u00a0(optional) <code>white_balance_gain.red</code> White balance red gain. float 0.0 \u2264 <code>white_balance_gain.red</code>\u00a0\u2264 32.0 (optional) <code>white_balance_gain.blue</code> White balance blue gain. float 0.0\u00a0\u2264\u00a0<code>white_balance_gain.blue</code>\u00a0\u2264 32.0 (optional) <code>white_balance</code> White balance mode. (<code>off</code>\u00a0specifies the use of manual white balance gains) string <code>auto</code>, <code>off</code>\u00a0(optional)"},{"location":"reference/software/interfaces/mqtt/#settings-command-responses","title":"<code>settings</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/imager</code> topic in response to the <code>settings</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Cause <code>Camera settings updated</code> The camera settings have been successfully updated. <code>Camera settings error</code> The settings command is missing required parameters. <code>Iso number not valid</code> The provided <code>iso</code>\u00a0value is not allowed. <code>Shutter speed not valid</code> The provided <code>shutter_speed</code>\u00a0value is not allowed. <code>White balance gain not valid</code> The provided <code>white_balance_gain</code>\u00a0object is not valid or has an invalid value. <code>White balance mode {white_balance} not valid</code> The provided <code>white_balance</code>\u00a0value is not allowed."},{"location":"reference/software/interfaces/mqtt/#update_config-command","title":"<code>update_config</code> command","text":"<p>The <code>update_config</code> command sets/changes the metadata which will be saved with the dataset which to be acquired by the next <code>image</code> command. For example:</p> <pre><code>{\n  \"action\": \"update_config\",\n  \"config\": {\n    \"sample_project\": \"fairscope bzh\",\n    \"sample_id\": \"fairscope_bzh_estacade\",\n    \"sample_uuid\": \"uuid-1234\",\n    \"sample_ship\": \"Fairscope\",\n    \"sample_operator\": \"jeremy\",\n    \"sample_sampling_gear\": \"net\",\n    \"sample_concentrated_sample_volume\": 70,\n    \"sample_total_volume\": 100,\n    \"sample_dilution_factor\": 10,\n    \"sample_speed_through_water\": \"5 knots\",\n    \"sample_instrument\": \"PlanktoScope v2.6\",\n    \"sample_bottom_depth\": \"N/A\",\n    \"sample_depth_min\": 0.1,\n    \"sample_depth_max\": 0.5,\n    \"sample_temperature\": \"N/A\",\n    \"sample_salinity\": \"N/A\",\n    \"sample_date\": \"2024-05-15\",\n    \"acq_id\": \"fairscope_bzh_estacade_2\",\n    \"acq_instrument\": \"PlanktoScope v2.6\",\n    \"acq_magnification\": \"1.2\",\n    \"acq_camera_id\": \"deep-point-8125\",\n    \"acq_camera_lens\": \"N/A\",\n    \"acq_software\": \"PlanktoScope v2024.0.0-alpha.1\",\n    \"acq_atlas_id\": \"N/A\",\n    \"acq_resolution\": \"1080p\",\n    \"acq_stacks_count\": \"N/A\",\n    \"acq_time_between_frames\": 0.3,\n    \"acq_brightness\": \"N/A\",\n    \"acq_contrast\": \"N/A\",\n    \"acq_sharpness\": \"N/A\",\n    \"acq_saturation\": \"N/A\",\n    \"acq_gamma\": \"N/A\",\n    \"acq_uuid\": \"acq-uuid-5678\",\n    \"acq_volume\": 2.50,\n    \"acq_imaged_volume\": 1.04,\n    \"acq_minimum_mesh\": 300,\n    \"acq_maximum_mesh\": 300,\n    \"acq_min_esd\": 300,\n    \"acq_max_esd\": 300,\n    \"acq_camera_name\": \"HQ Camera\",\n    \"acq_nb_frame\": 500,\n    \"acq_local_datetime\": \"2024-05-15T09:00:00Z\",\n    \"acq_caamera_iso\": 400,\n    \"acq_camera_shutter_speed\": 500,\n    \"object_date\": \"2024-05-15\",\n    \"object_time\": \"09:00:00Z\",\n    \"object_lat\": 48.7273,\n    \"object_lon\": -3.9814,\n    \"object_depth_min\": 0.1,\n    \"object_depth_max\": 0.5,\n    \"process_pixel\": 0.75,\n    \"process_datetime\": \"2024-05-15T09:00:00Z\",\n    \"process_id\": \"Process01\",\n    \"process_uuid\": \"proc-uuid-7890\",\n    \"process_source\": \"https://www.github.com/PlanktonPlanet/PlanktoScope\",\n    \"process_commit\": \"CommitHash\",\n    \"sample_gear_net_opening\": 300,\n    \"object_date_end\": \"2024-05-15\",\n    \"object_time_end\": \"10:00:00Z\",\n    \"object_lat_end\": 48.7274,\n    \"object_lon_end\": -3.9815\n  }\n}\n</code></pre> <p>The metadata should contain comprehensive information about the sample, acquisition process, object details, and processing parameters to ensure accurate tracking and reproducibility of the dataset. The <code>update_config</code> command has the following parameters:</p> <p>Sample information:</p> Field Description Type <code>sample_project</code> Project name. string <code>sample_id</code> Sample identifier. integer <code>sample_uuid</code> Sample UUID. string <code>sample_ship</code> Ship name. string <code>sample_operator</code> Operator name. string <code>sample_sampling_gear</code> Sampling gear description. string <code>sample_concentrated_sample_volume</code> Concentrated sample volume. float <code>sample_total_volume</code> Total volume. float <code>sample_dilution_factor</code> Dilution factor. float <code>sample_speed_through_water</code> Speed through water. float <p>Acquisition information:</p> Field Description Type <code>acq_id</code> Acquisition identifier. integer <code>acq_instrument</code> Acquisition instrument. string <code>acq_magnification</code> Magnification level. string <code>acq_camera_id</code> Camera identifier. integer <code>acq_camera_lens</code> Camera lens. string <code>acq_software</code> Acquisition software. string <code>acq_volume</code> Acquisition volume. float <code>acq_imaged_volume</code> Imaged volume. float <code>acq_minimum_mesh</code> Minimum mesh size. float <code>acq_maximum_mesh</code> Maximum mesh size. float <code>acq_min_esd</code> Minimum equivalent spherical diameter. float <code>acq_max_esd</code> Maximum equivalent spherical diameter. float <code>acq_camera_name</code> Camera name. string <code>acq_nb_frame</code> Number of frames captured. integer <code>acq_local_datetime</code> Local date and time of acquisition. string <code>acq_camera_resolution</code> Camera resolution. string <code>acq_camera_iso</code> Camera ISO setting. float <code>acq_camera_shutter_speed</code> Camera shutter speed. float <p>Object information:</p> Field Description Type <code>object_date</code> Date of the object recording. string <code>object_time</code> Time of the object recording. string <code>object_lat</code> Latitude of the sample location. float <code>object_lon</code> Longitude of the sample location. float <code>object_depth_min</code> Minimum depth of the sample location. float <code>object_depth_max</code> Maximum depth of the sample location. float <code>object_date_end</code> End date of the object recording. string <code>object_time_end</code> End time of the object recording. string <code>object_lat_end</code> End latitude of the sample location. float <code>object_lon_end</code> End longitude of the sample location. float <p>Processing information:</p> Field Description Type <code>process_pixel</code> Pixel processing method. string <code>process_datetime</code> Date and time of processing. string <code>process_id</code> Processing identifier. integer <code>process_uuid</code> Processing UUID. string <code>process_source</code> Source of processing software or method. string <code>process_commit</code> Commit hash of the software used. string"},{"location":"reference/software/interfaces/mqtt/#update_config-command-responses","title":"<code>update_config</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/imager</code> topic in response to the <code>update_config</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Config updated</code> The metadata has been successfully updated. <code>Configuration message error</code> The command is missing the required\u00a0<code>config</code> field. <code>Busy</code> Image acquisition is already in progress, so dataset metadata cannot be changed."},{"location":"reference/software/interfaces/mqtt/#image-command","title":"<code>image</code> command","text":"<p>The <code>image</code> command initiates acquisition of one raw image dataset consisting of a specified number of images, via stop-flow imaging. For example, this command initiates acquisition of 200 images, with 1 mL of sample pumped between each image and an image stabilization period of 0.1 seconds between the end of pumping and the triggering of the image capture for each acquired image:</p> <pre><code>{\n  \"action\": \"image\",\n  \"pump_direction\": \"FORWARD\",\n  \"volume\": 1,\n  \"nb_frame\": 200,\n  \"sleep\": 0.1\n}\n</code></pre> <p>A valid <code>update_config</code> command with a unique <code>(object_date, sample_id, acq_id)</code> combination must be sent some time before each <code>image</code> command. If an <code>update_config</code> command has not been sent before the <code>image</code> command, the <code>image</code> command will trigger a \u201cStarted\u201d response status and then do nothing (this is a software bug which needs to be fixed so that an error status is reported instead).</p> <p>The <code>image</code> command has the following parameters:</p> Parameter Description Type Accepted Values <code>pump_direction</code> Direction of sample pumping. string <code>FORWARD</code>, <code>BACKWARD</code>. <code>volume</code> Volume (in mL) of sample to pump between each captured image. float 0 &lt; <code>volume</code> <code>nb_frame</code> Number of frames to capture. integer 0 &lt; <code>nb_frame</code> <code>sleep</code> Duration (in s) to wait after pumping has stopped before saving an image, to allow the sample objects to stabilize in the image. float 0 &lt; <code>sleep</code>"},{"location":"reference/software/interfaces/mqtt/#image-command-responses","title":"<code>image</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/imager</code> topic, in response to the <code>image</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Started</code> The image capture process has started successfully. <code>Error</code> At least one field of the\u00a0<code>image</code>\u00a0command is missing or has an invalid value. <code>Error: missing camera</code> No camera is available to use for image acquisition. <code>Configuration update error: object_date is missing!</code> The last time the <code>update_config</code>\u00a0command was sent, it did not have an <code>object_date</code>\u00a0parameter. <code>Configuration update error: Chosen id are already in use!</code> The\u00a0<code>(object_date, sample_id, acq_id)</code>\u00a0combination for the dataset (set by the last <code>update_config</code>\u00a0command) is already used by a previous dataset. <code>Image {index}/{nb_frame} saved to {filename}</code> An image has been successfully captured and saved. <code>Image {index}/{nb_frame} WAS NOT CAPTURED! STOPPING THE PROCESS!</code> An error occurred during image capture; the ongoing image acquisition has finished with failure, resulting in an incomplete dataset. <code>Done</code> The image acquisition finished successfully, resulting in a complete dataset."},{"location":"reference/software/interfaces/mqtt/#stop-command_2","title":"<code>stop</code> command","text":"<p>This message interrupts any in-progress image acquisition routine and stops any ongoing sample pumping.</p> <pre><code>{\n  \"action\": \"stop\"\n}\n</code></pre> <p>The <code>stop</code> command has the following parameters:</p> Field Description Type Accepted Values <code>action</code> Specifies the <code>stop</code>\u00a0command. string <code>stop</code>"},{"location":"reference/software/interfaces/mqtt/#stop-command-responses_2","title":"<code>stop</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/imager</code> topic, in response to the <code>stop</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error message Description <code>Interrupted</code> The image capture process was stopped successfully."},{"location":"reference/software/interfaces/mqtt/#non-response-status-updates_3","title":"Non-response status updates","text":"<p>The Python backend can send status updates on the <code>status/imager</code> topic which are not triggered by any command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Starting up</code> The backend will soon attempt to initialize the camera. <code>Error: missing camera</code> A camera was not detected. <code>Ready</code> The camera is now operational, and the backend has become ready to respond to Imager commands. <code>Dead</code> The backend will no longer respond to Imager commands."},{"location":"reference/software/interfaces/mqtt/#segmenter","title":"Segmenter","text":"<p>The Segmenter API controls the processing of acquired images:</p> <ul> <li>MQTT topics for commands: <code>segmenter/segment</code></li> <li>MQTT topics for status updates: <code>status/segmenter</code>, <code>status/segmenter/object_id</code>, <code>status/segmenter/metric</code></li> <li>Commands: <code>segment</code></li> </ul> <p>For details on how images are processed, refer to our technical reference on image segmentation in the PlanktoScope.</p>"},{"location":"reference/software/interfaces/mqtt/#segment-command","title":"<code>segment</code> command","text":"<p>The <code>segment</code> command initiates processing of images stored in the specified path, optionally exporting the results to an EcoTaxa-compatible archive. The various <code>settings</code> parameters of this command provide control over the behavior of image processing. For example, this command initiates processing of all images in the <code>/path/to/segment</code> directory:</p> <pre><code>{\n  \"action\": \"segment\",\n  \"path\": \"/path/to/segment\",\n  \"settings\": {\n    \"force\": false,\n    \"recursive\": true,\n    \"ecotaxa\": true,\n    \"keep\": true\n  }\n}\n</code></pre> <p>The <code>segment</code> command has the following parameters:</p> Parameter Description Type Accepted Values <code>path</code> Path to the directory of images to process.Defaults to <code>/home/pi/data/img</code>. file path (string) any subdirectory of\u00a0<code>/home/pi/data/img</code> (optional) <code>settings</code>.<code>force</code> Force re-segmentation of already-processed directories, ignoring the existence of\u00a0<code>done</code>\u00a0files which otherwise prevent already-segmented directories from being processed again.Defaults to <code>false</code>. boolean <code>true</code>, <code>false</code> (optional) <code>settings</code>.<code>recursive</code> Process datasets in all subdirectories of\u00a0<code>path</code>.Defaults to <code>true</code>. boolean <code>true</code>, <code>false</code> (optional) <code>settings</code>.<code>ecotaxa</code> Export an EcoTaxa-compatible archive.Defaults to <code>true</code>. boolean <code>true</code>, <code>false</code> (optional) <code>settings.keep</code> Keep ROI files generated when exporting an EcoTaxa-compatible archive. It has no effect if <code>settings.ecotaxa</code>\u00a0is <code>false</code>.Defaults to <code>true</code>. boolean <code>true</code>, <code>false</code> (optional)"},{"location":"reference/software/interfaces/mqtt/#segment-command-responses","title":"<code>segment</code> command responses","text":"<p>The Python backend can send status updates on the <code>status/segmenter</code> topic, in response to the <code>segment</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error message Description <code>Started</code> The segmentation process has begun. <code>Busy</code> The segmenter is currently running and cannot update configurations. <code>Calculating flat</code> The frame background is being calculated. <code>Segmenting image %s, image %d/%d</code> Segmentation of a specific image is in progress. <code>An exception was raised during the segmentation: %s.</code> An error occurred during segmentation. <code>Done</code> Processing has finished for the specified datasets. <p>As the Python backend performs segmentation, it will repeatedly send additional status updates on the <code>status/segmenter/object_id</code> topic, once for each object isolated by the segmenter. Each status update is a JSON object with the following fields:</p> Field Description Type <code>object_id</code> A scikit-image region label. integer <p>As the Python backend performs segmentation, it will repeatedly send additional status updates on the <code>status/segmenter/metric</code> topic, once for each object isolated by the segmenter. Each status update is a JSON object with the following fields:</p> Field Description Type <code>name</code> An object ID, which is a undersctore-delimited concatenation of the name of the raw image which was processed and the object ID reported by <code>status/segmenter/object_id</code>. string <code>metadata</code> Metadata for the object. struct <p>The <code>metadata</code> field of status updates sent on the <code>status/segmenter/metric</code> topic is an object with the following fields:</p> Field Description Type <code>label</code> Label of the object. integer <code>width</code> Width of the smallest rectangle enclosing the object. integer <code>height</code> Height of the smallest rectangle enclosing the object. integer <code>bx</code> X coordinate of the top left point of the smallest rectangle enclosing the object. integer <code>by</code> Y coordinate of the top left point of the smallest rectangle enclosing the object. integer <code>circ</code> Circularity: (4 \u2217 \u03c0 \u2217 Area) / Perimeter^2. A value of 1 indicates a perfect circle, approaching 0 indicates an elongated polygon. float <code>area_exc</code> Surface area of the object excluding holes, in square pixels. integer <code>area</code> Surface area of the object in square pixels. integer <code>%area</code> Percentage of object\u2019s surface area that is comprised of holes. float <code>major</code> Primary axis of the best fitting ellipse for the object. float <code>minor</code> Secondary axis of the best fitting ellipse for the object. float <code>y</code> Y position of the center of gravity of the object. float <code>x</code> X position of the center of gravity of the object. float <code>convex_area</code> The area of the smallest polygon within which all points in the object fit. integer <code>perim</code> The length of the outside boundary of the object. float <code>elongation</code> The result of dividing the <code>major</code> parameter by the <code>minor</code> parameter. float <code>perimareaexc</code> The result of dividing the <code>perim</code> parameter by the <code>area_exc</code> parameter. float <code>perimmajor</code> The result of dividing the <code>perim</code> parameter by the <code>major</code> parameter. float <code>circex</code> (4 \u2217 \u03c0 \u2217 area_exc) / perim^2. float <code>angle</code> Angle between the primary axis and a line parallel to the x-axis of the image. float <code>bounding_box_area</code> Area of the bounding box enclosing the object. integer <code>eccentricity</code> Eccentricity of the object. float <code>equivalent_diameter</code> Diameter of a circle with the same area as the object. float <code>euler_number</code> Euler number of the object. integer <code>extent</code> Ratio of object area to bounding box area. float <code>local_centroid_col</code> Column position of the local centroid. float <code>local_centroid_row</code> Row position of the local centroid. float <code>solidity</code> Ratio of object area to convex area. float <code>MeanHue</code> Mean hue value of the object. float <code>MeanSaturation</code> Mean saturation value of the object. float <code>MeanValue</code> Mean value (brightness) of the object. float <code>StdHue</code> Standard deviation of the hue value of the object. float <code>StdSaturation</code> Standard deviation of the saturation value of the object. float <code>StdValue</code> Standard deviation of the value (brightness) of the object. float"},{"location":"reference/software/interfaces/mqtt/#stop-command_3","title":"<code>stop</code> command","text":"<p>The <code>stop</code> command interrupts any ongoing image processing. For example:</p> <pre><code>{\n  \"action\": \"stop\"\n}\n</code></pre> <p>The <code>stop</code> command has the following parameters:</p> Parameter Type Accepted Values Description <code>action</code> string \"stop\" Specifies the action to stop segmentation. <p>Warning</p> <p>The functionality for this command has not yet been implemented. Currently an <code>Interrupted</code> status is sent as a response on the <code>segmenter/segment</code> topic even though no interruption will actual happen.</p>"},{"location":"reference/software/interfaces/mqtt/#stop-command-responses_3","title":"<code>stop</code> command responses","text":"<p>The Python backend can send status updates on the <code>segmenter/segment</code> topic, in response to the <code>stop</code> command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error message Description <code>Interrupted</code> The segmentation process was interrupted."},{"location":"reference/software/interfaces/mqtt/#non-response-status-updates_4","title":"Non-response status updates","text":"<p>The Python backend can send status updates on the <code>status/segmenter</code> topic which are not triggered by any command. The <code>status</code> field of such status updates can have any of the following values:</p> Status/Error Description <code>Ready</code> The backend has become ready to respond to Segmenter commands. <code>Dead</code> The backend will no longer respond to Segmenter commands."},{"location":"reference/software/subsystems/installation/","title":"Installation","text":"<p>This document explains how the PlanktoScope OS's installation process works, as a companion to our non-standard installation guide which carries out the process explained below.</p> <p>The installation process is initiated by booting into an appropriate installation of the Raspberry Pi OS and then downloading and running the installation bootstrap script, which in turn downloads and runs the appropriate distro setup scripts according to the installation parameters provided to the installation bootstrap script.</p>"},{"location":"reference/software/subsystems/installation/#installation-bootstrap-script","title":"Installation bootstrap script","text":"<p>The installation bootstrap script is provided so that a one-line command can be executed to  automatically perform the entire process of installing the PlanktoScope OS on top of the Raspberry Pi OS. The GitHub repository which contains that script always publishes the latest version on its <code>stable</code> branch to install.planktoscope.community/distro.sh via GitHub Pages; other versions can be downloaded from GitHub via the corresponding permalinks for those versions of the file (e.g. https://github.com/PlanktoScope/install.planktoscope.community/raw/v2023.9.0/distro.sh for the version from the v2023.9.0 tag in the repository). The installation bootstrap script performs the following steps:</p> <ol> <li> <p>The script loads some parameters (set by environment variables and/or corresponding command-line arguments) which set the behavior of the script.</p> </li> <li> <p>The script installs <code>git</code>, if it was not already installed (as is the case on the \"Lite\" image of the Raspberry Pi OS); if the <code>yes</code> parameter was not set and <code>git</code> was not already installed, the script will first ask the user to confirm that they wish to install <code>git</code> before the script continues. <code>git</code> is required to resolve version query parameters provided to the script, so that the script can determine how to download the requested version of the PlanktoScope OS's distro setup scripts.</p> </li> <li> <p>The script clones a minimal \"mirror\" copy of the specified repository (set by the <code>repo</code> parameter) of distro setup scripts to a temporary directory (i.e. a directory created in <code>/tmp</code>). This \"mirror\" copy is used to:</p> <ul> <li> <p>Resolve the version query parameters (<code>version-query</code>, <code>query-type</code>, and - when <code>query-type</code> is <code>tag</code> - <code>tag-prefix</code>) into a specific commit hash for the repository.</p> </li> <li> <p>Determine a (pseudo-)version string for the resolved commit based on the last release tag (whose name is prefixed with the <code>tag-prefix</code> parameter) ancestral to that commit.</p> </li> </ul> </li> <li> <p>The script clones a copy of the specified repository (set by the <code>repo</code> parameter) to a temporary directory and checks out the specific commit which was resolved by the previous step; if the <code>yes</code> parameter was not set, the script will first ask the user to confirm that they wish to download the resolved commit of the distro setup scripts before the script continues. Because the repository containing the distro setup scripts may have many large files (e.g. image files for documentation) which are unrelated to the distro setup scripts, this step only downloads files in the specific commit needed for the distro setup scripts.</p> </li> <li> <p>The script records versioning information for the downloaded installation scripts, saving that information in two YAML files in a particular directory; if that directory already exists and the <code>yes</code> parameter was not set, the script will first ask the user to confirm that they wish to delete and re-create that directory before the script continues. Installed programs can read these files in order to determine the installed version of the PlanktoScope OS.</p> </li> <li> <p>The script runs the specified script (set by the <code>setup-entrypoint</code> parameter) within the downloaded copy of the specified repository; if the <code>yes</code> parameter was not set, the script will first ask the user to confirm that they wish to run the downloaded distro scripts before the script continues.</p> </li> </ol>"},{"location":"reference/software/subsystems/installation/#script-parameters","title":"Script parameters","text":"Command-Line Flags Environment Variable Name Description <code>-r</code><code>--repo</code> <code>REPO</code> URL of the Git repository used for downloading the distro setup scripts. If a protocol is not specified, the URL will be assumed to use HTTPS.Default value:\u00a0<code>github.com/PlanktoScope/PlanktoScope</code> <code>-v</code><code>--version-query</code> <code>VERSION_QUERY</code> The version of the repository to download. The version query is interpreted differently depending on the query type set by the\u00a0<code>query-type</code>\u00a0parameter:<ul><li>Query type\u00a0\u00a0<code>branch</code>: query should be a branch name (e.g. <code>software/beta</code>).</li><li>Query type\u00a0<code>tag</code>: query should be a Git tag name, excluding the tag prefix specified by the <code>tag-prefix</code>\u00a0parameter (e.g. <code>v2024.0.0</code>\u00a0if <code>tag-prefix</code>\u00a0is <code>software</code>\u00a0and the Git tag is\u00a0<code>software/v2024.0.0</code>).</li><li>Query type\u00a0<code>hash</code>: query should be a commit hash and may be abbreviated (e.g. <code>2d6928e</code>).</li></ul>Default value: <code>software/stable</code> <code>-t</code><code>--query-type</code> <code>QUERY_TYPE</code> The type of version query set by the <code>version-query</code>\u00a0parameter.Allowed values: <code>branch</code>, <code>tag</code>, <code>hash</code>.Default value: <code>branch</code> <code>-H</code><code>--hardware</code> <code>HARDWARE</code> The hardware configuration, passed as the first argument to the entrypoint of the distro setup scripts. The distro setup scripts in the\u00a0<code>github.com/PlanktoScope/PlanktoScope</code>\u00a0repo currently expect either <code>none</code>, <code>segmenter-only</code>,\u00a0<code>adafruithat</code>,\u00a0<code>planktoscopehat</code>, or <code>fairscope-latest</code>.Default value: <code>planktoscopehat</code> <code>--tag-prefix</code> <code>TAG_PREFIX</code> The prefix for Git version tags when resolving the version query (with query type\u00a0<code>tag</code>) and when resolving tags (for pseudoversion strings).\u00a0Default value: <code>software/</code> <code>--setup-entrypoint</code> <code>SETUP_ENTRYPOINT</code> The entrypoint of the distro setup scripts, which will be executed in order to run the downloaded distro setup scripts. This should be a subdirectory path within the repository (set by the <code>repo</code>\u00a0parameter) which will be downloaded at the specified commit (set by the <code>version-query</code>\u00a0and <code>query-type</code>\u00a0parameters and - when <code>query-type</code>\u00a0is <code>tag</code>\u00a0- by the <code>tag-prefix</code>\u00a0parameter) to obtain the distro setup scripts.Default value: <code>software/distro/setup/setup.sh</code> <code>-y</code><code>-f</code><code>--yes</code><code>--force</code> <code>FORCE</code> Whether to automatically confirm all user confirmation prompts:<ul><li><code>FORCE=1</code>\u00a0(or including the command-line flag) automatically confirms all prompts.</li><li>Not setting <code>FORCE</code> (or not including the command-line flag) requires user input for confirmation on all prompts.</li></ul>Default: User input required <code>-V</code><code>--verbose</code> <code>VERBOSE</code> Whether to display additional (verbose) output:<ul><li><code>VERBOSE=1</code>\u00a0(or including the command-line flag) enables verbose output.</li><li>Not setting <code>VERBOSE</code> (or not including the command-line flag) disables verbose output.</li></ul>Default: Don't display verbose output <code>-h</code><code>--help</code> Whether to display a help message (which includes this parameter reference table and a list of example commands using this script) and quit without doing any work. <p>Example combinations of command-line arguments using the above parameters:</p> <ul> <li> <p><code>-v software/stable -H planktoscopehat</code> or <code>-H planktoscopehat</code>: install the latest stable release of the standard PlanktoScope OS (i.e. from the <code>software/stable</code> branch) for a PlanktoScope with the PlanktoScope HAT.</p> </li> <li> <p><code>-v software/beta -H adafruithat</code>: install the latest beta pre-release or stable release of the standard PlanktoScope OS (i.e. from the <code>software/beta</code> branch) for a PlanktoScope with the Adafruit HAT.</p> </li> <li> <p><code>-v master -H planktoscopehat</code>: install the latest development version of the standard PlanktoScope OS (i.e. from the <code>master</code> branch) for a PlanktoScope with the PlanktoScope HAT.</p> </li> <li> <p><code>-t tag -v v2024.0.0-alpha.1 -H adafruithat</code>: install the v2024.0.0-alpha.1 pre-release of the standard PlanktoScope OS (i.e. from the <code>software/v2024.0.0-alpha.1</code> tag) for a PlanktoScope with the Adafruit HAT.</p> </li> <li> <p><code>-t hash -v 2d6928e -H planktoscopehat</code>: install <code>2d6928e</code> commit of the standard PlanktoScope OS for a PlanktoScope with the PlanktoScope HAT.</p> </li> <li> <p><code>-v master -r github.com/LaurentPV/PlanktoScope -H adafruithat</code>: install the latest development commit of <code>master</code> branch of the <code>github.com/LaurentPV/PlanktoScope</code> fork of the PlanktoScope OS for a PlanktoScope with the Adafruit HAT.</p> </li> </ul>"},{"location":"reference/software/subsystems/installation/#recorded-versioning-information","title":"Recorded versioning information","text":"<p>Currently the installer script creates two YAML files, both in the <code>/usr/share/planktoscope</code> directory.</p> <p><code>/usr/share/planktoscope/installer-config.yml</code> records the values of the parameters with which the installer script was invoked:</p> YAML Field Name Corresponding Script Parameter Example Value <code>repo</code> <code>repo</code> <code>\"github.com/PlanktoScope/PlanktoScope\"</code> <code>version-query</code> <code>version-query</code> <code>\"v2024.0.0-alpha.1\"</code> <code>query-type</code> <code>query-type</code> <code>\"tag\"</code> <code>hardware</code> <code>hardware</code> <code>\"adafruithat\"</code> <code>tag-prefix</code> <code>tag-prefix</code> <code>\"software/\"</code> <code>setup-entrypoint</code> <code>setup-entrypoint</code> <code>\"software/distro/setup/setup.sh\"</code> <p><code>/usr/share/planktoscope/installer-versioning.yml</code> records information about the version of the PlanktoScope OS's distro setup scripts which was used to install the PlanktoScope OS:</p> Field Name Description <code>repo</code> The path of the Git repository which provided the distro setup scripts, with any leading protocol string (e.g. <code>https://</code>) removed.Example Values: <ol><li><code>\"github.com/PlanktoScope/PlanktoScope\"</code></li><li><code>\"github.com/PlanktoScope/PlanktoScope\"</code></li></ol> <code>commit</code> The full hash of the exact commit which provided the distro setup scripts.Example Values: <ol><li><code>\"2d6928e596b28f0c4c268fecb588c85215b1027e\"</code>\u00a0(for commit <code>2d6928e</code>)</li><li><code>\"4d8b882616a8374918730bc1c6d300edfd7a523a\"</code>\u00a0(for commit <code>4d8b882</code>)</li></ol> <code>tag</code> The full name of the Git tag (whose name starts with the prefix set by the <code>tag-prefix</code>\u00a0script parameter) at the exact commit which provided the distro setup scripts, if such a tag exists; otherwise, the empty string (<code>\"\"</code>).Example Values: <ol><li><code>\"software/v2024.0.0-alpha.1\"</code>\u00a0(so commit <code>2d6928e</code>\u00a0has Git tag <code>software/v2024.0.0-alpha.1</code>)</li><li><code>\"\"</code>\u00a0(so commit <code>4d8b882</code>\u00a0has no Git tag)</li></ol> <code>version</code> A version string or pseudo-version string describing the exact commit which provided the distro setup scripts. If a Git tag (with a name starting with the prefix set by the <code>tag-prefix</code>\u00a0script parameter) exists at that commit, this is a version string which just the name of that tag, but with the <code>tag-prefix</code>\u00a0stripped from the name. Otherwise, this is a pseudo-version string with format <code>\"{tag}-{distance}-g{commit}\"</code>, where:<ul><li><code>{tag}</code>\u00a0is the name of the most recent ancestral tag (with a name starting with the prefix set by the <code>tag-prefix</code>\u00a0script parameter) reachable from the commit, but with the <code>tag-prefix</code>\u00a0stripped from the name.<li><code>{distance}</code>\u00a0distance (in number of commits) between the commit and the most recent ancestral tag.</li><li><code>{commit}</code>\u00a0consists of the first seven characters of the hash of the commit.</li>Example Values: <ol><li><code>\"v2024.0.0-alpha.1\"</code>\u00a0(so commit <code>2d6928e</code>\u00a0has Git tag <code>software/v2024.0.0-alpha.1</code>)</li><li><code>\"v2024.0.0-alpha.1-4-g4d8b882\"</code>\u00a0(so commit <code>4d8b882</code>\u00a0is 4 commits above the commit with Git tag <code>software/v2024.0.0-alpha.1</code>, which was the last tag in the ancestry of the commit)</li></ol>"},{"location":"reference/software/subsystems/installation/#distro-setup-scripts","title":"Distro setup scripts","text":"<p>Currently, the entrypoint of the distro setup scripts, at <code>software/distro/setup/setup.sh</code>, takes exactly one command-line argument which must be one of the following values:</p> <ul> <li> <p><code>adafruithat</code>: this will cause the distro setup scripts to install a version of the PlanktoScope hardware controller and the PlanktoScope Node-RED dashboard specific to PlanktoScopes using the Adafruit HAT, and to set the default hardware configuration files accordingly.</p> </li> <li> <p><code>planktoscopehat</code>: this will cause the distro setup scripts to install a version of the PlanktoScope hardware controller and the PlanktoScope Node-RED dashboard specific to PlanktoScopes using the PlanktoScope HAT, and to set the default hardware configuration files accordingly.</p> </li> </ul> <p>Currently, the distro setup scripts must be run by a user named <code>pi</code>. The scripts should not be run with <code>sudo</code>!</p> <p>Currently, the distro setup scripts are split into two phases: setup of the base operating system, and setup of the PlanktoScope application environment. In the future, as we remove various setup steps from these scripts (and instead manage those steps using <code>forklift</code>), we may consolidate these two phases into a single phase.</p>"},{"location":"reference/software/subsystems/installation/#base-system-setup","title":"Base system setup","text":"<p>This phase performs steps which might (in theory) be useful for other projects which don't use the PlanktoScope hardware but would still benefit from many of the functionalities provided by the PlanktoScope OS. This phase consists of the following steps:</p> <ul> <li> <p>Installation of base tools: Docker, Cockpit, and various command-line tools are installed.</p> </li> <li> <p>Installation of <code>forklift</code> and a Forklift pallet: a hard-coded version of <code>forklift</code> is downloaded to <code>/usr/bin/forklift</code> , a hard-coded version of a hard-coded pallet (namely, github.com/PlanktoScope/pallet-standard) is downloaded and prepared for deployment, and the <code>forklift-apply.service</code> systemd service is created and enabled. (Note: in the future, it will be possible to specify the pallet to be installed as a command-line argument.)</p> </li> <li> <p>Partial configuration of Raspberry Pi-specific hardware: the SPI and I2C hardware interfaces are enabled, and the serial port and serial port console are enabled (note: the serial port console will be disabled by the PlanktoScope application environment setup phase so that the serial port can be used for the PlanktoScope's GPS receiver instead), and legacy camera support is disabled.</p> </li> <li> <p>Configuration of the system locale: the system's language is changed to <code>en_US.UTF-8</code>, but the time and measurement formats are changed to <code>en_DK.UTF-8</code> so that the date format is <code>yyyy-mm-dd</code> and units are metric. The system timezone is set to UTC.</p> </li> <li> <p>Partial configuration of networking: various system services are installed and configured, namely <code>dhcpcd</code>, <code>dnsmasq</code>, <code>hostapd</code>, and <code>firewalld</code>. The <code>enable-interface-forwarding.service</code> and <code>autohotspot.service</code> systemd services are created and enabled. The Raspberry Pi's Wi-Fi country is set to the US.</p> </li> <li> <p>Cleanup: SSH keys are reset to be regenerated on the next boot, unnecessary APT files are removed, and the OS machine ID is reset to be regenerated on the next boot.</p> </li> </ul>"},{"location":"reference/software/subsystems/installation/#planktoscope-application-environment-setup","title":"PlanktoScope application environment setup","text":"<p>This phase performs steps specific to the PlanktoScope's hardware:</p> <ul> <li> <p>Remaining configuration of networking: a hard-coded version of <code>machine-name</code> is downloaded to <code>/usr/bin/machine-name</code>, <code>avahi-utils</code> is installed using APT, and various systemd services are created and enabled to update the PlanktoScope OS's networking configurations based on a machine name which will be determined by <code>machine-name</code> from the Raspberry Pi's serial number at every boot. Additional systemd services are created and enabled so that the PlanktoScope will be accessible over some additional mDNS names (namely, <code>pkscope.local</code> and <code>planktoscope.local</code>).</p> </li> <li> <p>Setup of the PlanktoScope hardware controller: various Python tools (<code>pip</code>, <code>venv</code>, and <code>poetry</code>) are installed using APT, a hard-coded version of a hard-coded Git repository (namely github.com/PlanktoScope/device-backend) is cloned, and various dependencies (both system libraries and Python packages) of the hardware controller are installed. The <code>planktoscope-org.device-backend.controller-adafruithat.service</code> and <code>planktoscope-org.device-backend.controller-planktoscopehat.service</code> systemd services are created, and the appropriate one is enabled depending on which HAT the PlanktoScope OS is being installed for. The appropriate hardware configuration file will also be copied into the location expected by the hardware controller. (Note: once the PlanktoScope hardware controller is containerized and managed in Forklift, this step will be eliminated.)</p> </li> <li> <p>Setup of GPIO stepper initialization at boot: a systemd service is created to release the stepper motors at startup. (Note: this service currently doesn't work and will eventually be deleted or replaced.)</p> </li> <li> <p>Setup of the PlanktoScope Node-RED dashboard: Node-RED is installed, as well as a Python package required by the <code>adafruithat</code> version of the PlanktoScope Node-RED dashboard (Note: the dependency on that package will eventually be removed.). The appropriate version of the PlanktoScope Node-RED dashboard and will be copied to the location expected by Node-RED depending on which HAT the PlanktoScope OS is being installed for, along with the appropriate configuration file. Finally, <code>npm</code> packages required by the Node-RED dashboard are installed. (Note: once the Node-RED dashboard is containerized and managed in Forklift, this step will be eliminated.)</p> </li> <li> <p>Setup of hardware support for the PlanktoScope's real-time clock module: A kernel devicetree overlay is enabled. (Note: this currently enables support for the wrong hardware real-time clock chip, so it doesn't work yet.)</p> </li> <li> <p>Setup of hardware support for the PlanktoScope's GPS receiver: <code>gpsd</code> and <code>chrony</code> are installed and configured. (Note: currently the configurations may be incorrect.)</p> </li> <li> <p>Configuration of CPU overclocking: the CPU is overclocked so that the PlanktoScope segmenter will run more quickly. (Note: in the future, this will be removed.)</p> </li> <li> <p>Cleanup: unnecessary APT and <code>pip</code> files are removed.</p> </li> </ul>"},{"location":"reference/software/subsystems/startup/","title":"Startup","text":"<p>This reference document is a companion to our explanation about the PlanktoScope software as an operating system, particularly its discussion of the operating system's boot sequence and its explanation of the various system services provided with the operating system. Specifically, this document lists information about what happens when the PlanktoScope is powered on.</p>"},{"location":"reference/software/subsystems/startup/#services","title":"Services","text":"<p>The PlanktoScope OS's daemons and system services (beyond what is already provided by the default installation of the Raspberry Pi OS) are defined with the following boot sequencing relationships:</p>"},{"location":"reference/software/subsystems/startup/#software-deployment-execution","title":"Software deployment &amp; execution","text":"<p>In general:</p> <ul> <li> <p><code>dockerd</code> (managed by <code>docker.service</code>) can start before network connectivity has been established; this is not the default behavior for <code>dockerd</code>.</p> </li> <li> <p>All daemons &amp; background processes not described in the rest of this page are sequenced by systemd according to the systemd unit dependency relationships specified by the default systemd service files installed with the APT packages which provide those programs.</p> </li> </ul> <p>The PlanktoScope OS's setup scripts provide some system services which are not managed by Forklift, because they are used to integrate Forklift into the OS in order to bootstrap the system services and config files provided by Forklift:</p> <ul> <li> <p><code>overlay-sysroot.service</code> runs after <code>-.mount</code> and <code>systemd-remount-fs.service</code>.</p> </li> <li> <p><code>bindro-run-forklift-stages-current.service</code> runs after <code>-mount</code> and <code>systemd-remount-fs.service</code> and before <code>overlay-fs.target</code>.</p> </li> <li> <p><code>overlay-usr.service</code> runs after <code>overlay-sysroot.service</code> and before <code>overlay-fs.target</code>.</p> </li> <li> <p><code>overlay-etc.service</code> runs after <code>overlay-sysroot.service</code> and  <code>systemd-machine-id-commit.service</code> , and before <code>systemd-sysctl.service</code> and <code>overlay-fs.target</code>.</p> </li> <li> <p><code>start-overlaid-units.service</code> runs after <code>overlay-fs.target</code> and <code>basic.target</code>.</p> </li> <li> <p><code>bind-.local-share-forklift-stages@home-pi.service</code> runs after <code>-.mount</code>, <code>home.mount</code>, and <code>basic.target</code>.</p> </li> <li> <p><code>forklift-apply.service</code>, which uses the <code>forklift</code> tool to start all Docker Compose applications, runs after <code>docker.service</code> has started. Docker Compose applications managed with <code>forklift</code> are sequenced by <code>forklift-apply.service</code> according to the resource dependency relationships declared by the Forklift packages which provide those applications.</p> </li> </ul>"},{"location":"reference/software/subsystems/startup/#networking","title":"Networking","text":"<p>For descriptions of the various targets (e.g. <code>sysinit.target</code>, <code>network-pre.target</code>) referred to below, see systemd's bootup process and systemd's special targets:</p> <ul> <li> <p><code>generate-machine-name.service</code> and <code>generate-hostname-templated.service</code> runs before <code>sysinit.target</code>.</p> </li> <li> <p><code>update-hostname.service</code> runs after <code>generate-hostname-templated.service</code> and <code>systemd-hostnamed.service</code> but before <code>network-pre.target</code>.</p> </li> <li> <p><code>assemble-dnsmasq-config-templated.service</code> runs after <code>generate-machine-name.service</code> and <code>generate-hostname-templated.service</code> but before <code>dnsmasq.service</code>.</p> </li> <li> <p><code>assemble-hosts-templated.service</code> and <code>assemble-hosts.service</code> run after <code>generate-machine-name.service</code> and <code>generate-hostname-templated.service</code> but before <code>dnsmasq.service</code> and <code>network-pre.target</code>.</p> </li> <li> <p><code>enable-interface-forwarding.service</code> runs before <code>network-online.target</code>.</p> </li> <li> <p><code>assemble-hostapd-config-templated.service</code> and <code>assemble-hostapd-config.service</code> run after <code>generate-machine-name.service</code> and <code>generate-hostname-templated.service</code> but before <code>hostapd.service</code>.</p> </li> <li> <p>The <code>hostapd</code> daemon is manually started and stopped by <code>autohotspot.service</code>.</p> </li> <li> <p><code>autohotspot.service</code> runs after <code>forklift-apply.service</code> and <code>enable-interface-forwarding.service</code> have started (so that the PlanktoScope's web browser-based user interfaces are ready for connections before the PlanktoScope's Wi-Fi hotspot is started) and before network connectivity is considered to have been established. It is re-run every one or two minutes by <code>autohotspot.timer</code>.</p> </li> <li> <p><code>planktoscope-mdns-alias@pkscope.service</code> and <code>planktoscopemdns-alias@planktoscope.service</code> configure the Avahi daemon (provided by the Raspberry Pi OS) to also resolve mDNS names <code>pkscope.local</code> and <code>planktoscope.local</code>, respectively, to an IP address (192.168.4.1) which is usable by devices connected to the PlanktoScope by a direct connection between their respective network interfaces.</p> </li> </ul>"},{"location":"reference/software/subsystems/startup/#user-interface","title":"User interface","text":"<ul> <li> <p><code>assemble-cockpit-config.service</code>, <code>assemble-cockpit-origins.service</code>, and <code>assemble-cockpit-origins-templated.service</code> update Cockpit's configuration file  from drop-in config file fragments in <code>/etc/cockpit/cockpit.conf.d</code>, <code>/etc/cockpit/origins.d</code>, and <code>/etc/cockpit/origins-templates.d</code>, respectively. They run after <code>generate-machine-name.service</code> and <code>generate-hostname-templated.service</code> and before <code>cockpit.service</code>.</p> </li> <li> <p><code>ensure-ssh-host-keys.service</code> regenerates the SSH server's host keys if the keys are missing, and runs before <code>ssh.service</code>.</p> </li> <li> <p>The PlanktoScope Node-RED dashboard (managed by <code>nodered.service</code>) starts after <code>planktoscope-org.update-machine-name.service</code> has started, to ensure that the Node-RED dashboard has the correct machine name. (In the future the PlanktoScope Node-RED dashboard will instead be run as a Docker container and will be managed by <code>forklift</code>.)</p> </li> </ul>"},{"location":"reference/software/subsystems/startup/#planktoscope-specific-hardware-abstraction","title":"PlanktoScope-specific hardware abstraction","text":"<ul> <li>The PlanktoScope hardware controller (managed by <code>planktoscope-org.device-backend.controller-{adafruithat or planktoscopehat}.service</code>) starts after <code>forklift-apply.service</code> (which manages Mosquitto) and <code>nodered.service</code> have started, to ensure that the PlanktoScope hardware controller broadcasts the detected camera model name only after the PlanktoScope Node-RED dashboard is ready to receive that broadcast. (In the future the PlanktoScope hardware controller will instead be run as a Docker container and will be managed by <code>forklift</code>.)</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>This section of the PlanktoScope documentation will help you get to a working PlanktoScope. Every PlanktoScope has two aspects which have to work together: the hardware and the software. Depending on what hardware you already have, you should start at different places in the documentation:</p> <ul> <li>\"I have a product from FairScope\": you probably received either a fully-assembled Planktoscope or a PlanktoScope do-it-yourself assembly kit. For more information, see the FairScope product section of this page.</li> <li>\"I have a fully assembled PlanktoScope, and it was not assembled by FairScope\": you will need to ensure that you have the latest version of the PlanktoScope software installed on the PlanktoScope, and that the PlanktoScope hardware works. For more information, see the Fully-assembled PlanktoScope section of this page.</li> <li>\"I have a kit of hardware parts to assemble into a PlanktoScope, and it was not provided by FairScope\": you will need to assemble your PlanktoScope hardware and then set up the software on it. For more information, see the DIY kit section of this page.</li> <li>\"I don't have any of the hardware for the PlanktoScope\": you have several options for getting the PlanktoScope hardware. For more information, see the No hardware yet section of this page.</li> </ul>"},{"location":"setup/#fairscope-product","title":"FairScope product","text":"<p>You probably purchased either a fully-assembled PlanktoScope or a do-it-yourself assembly kit from FairScope. The various sections of this documentation will provide you with instructions for how to proceed:</p> <ul> <li>If you purchased a fully-assembled PlanktoScope, it is ready for you to use! You should go to our operation guide to learn how to operate your PlanktoScope.</li> <li>If you purchased a do-it-yourself assembly kit from FairScope, you should go to our hardware setup guide to learn how to assemble your kit into a working PlanktoScope. The software will already have been set up for you, so after you finish setting up the hardware you can proceed to our operation guide to learn how to operate your PlanktoScope.</li> </ul>"},{"location":"setup/#fully-assembled-planktoscope","title":"Fully-assembled PlanktoScope","text":"<p>If you have a fully-assembled PlanktoScope which was provided to you by FairScope, please refer instead to the Fairscope product section of this page. If someone else provided you with a PlanktoScope, you might need to do some additional hardware setup, software setup, calibration, and/or troubleshooting - please talk to them to figure out what might be needed. The various sections of this documentation site may be a useful resource for you:</p> <ul> <li>Depending on what software is pre-installed on your PlanktoScope, and how old the software is, our software setup guide may be useful to help you update the software. You should always ensure that you are running the most recent available version of the PlanktoScope software.</li> <li>Depending on what software configuration your PlanktoScope is running, our operation guide may be useful to help you operate your PlanktoScope.</li> </ul>"},{"location":"setup/#diy-kit","title":"DIY kit","text":"<p>If you have a DIY assembly kit which was provided to you by FairScope, please refer instead to the Fairscope product section of this page. If someone else provided you with a DIY assembly kit, the process for assembling it into a PlanktoScope may be different from what is described in this documentation site - please talk to them to figure out what you should do. The various sections of this documentation site may be a useful resource for you:</p> <ul> <li>Depending on what is included in your DIY kit, our hardware setup guide may be useful to assemble a PlanktoScope from your kit.</li> <li>Depending on what is on the micro-SD card included with your DIY kit (if it includes a micro-SD card), our software setup guide may be useful to help you update the software. You should always ensure that you are running the most recent available version of the PlanktoScope software.</li> <li>Depending on what software configuration your PlanktoScope is running, our operation guide may be useful to help you operate your PlanktoScope.</li> </ul>"},{"location":"setup/#no-hardware-yet","title":"No hardware yet","text":"<p>If you don't have any hardware for a PlanktoScope yet, you have a few options depending on how much work you want to do, what your budget is, and how much troubleshooting you are willing to do:</p> <ol> <li>Purchase a fully pre-assembled PlanktoScope.</li> <li>Purchase a DIY kit of parts to assemble into a PlanktoScope.</li> <li>Both make your own kit of parts and assemble it into a PlanktoScope.</li> </ol>"},{"location":"setup/#buy-a-pre-assembled-planktoscope","title":"Buy a pre-assembled PlanktoScope","text":"<p>You can buy a PlanktoScope from FairScope, which is a small business started by the inventor of the PlanktoScope in order to make it easier for people to obtain PlanktoScopes. If you buy a PlanktoScope from FairScope, it will be fully standard, fully assembled, and fully tested. It will already have been calibrated in order to produce scientific data which can be compared with data from other PlanktoScopes, without requiring you to perform any additional calibration steps. The software will be pre-installed, so that once you receive your PlanktoScope you can immediately start using it.</p> <p>We recommend this approach for:</p> <ul> <li>Anyone who wants a PlanktoScope which \"just works\" out-of-the-box.</li> <li>Scientists who just want to collect data and don't want to become engineers.</li> <li>Anyone who just wants to use the PlanktoScope as a tool, rather than tinkering with their PlanktoScope as a project.</li> </ul>"},{"location":"setup/#buy-a-diy-kit","title":"Buy a DIY kit","text":"<p>If you are on a budget which does not allow you to buy a fully-assembled PlanktoScope from FairScope, you can instead buy a do-it-yourself assembly kit from FairScope. By assembling your PlanktoScope yourself, you will gain a deeper understanding of how it works, how to troubleshoot any problems you might encounter, and how to repair your PlanktoScope if you damage its hardware. If you make any mistakes while assembling the PlanktoScope, you will have to do some troubleshooting. You will also need to calibrate your PlanktoScope if you want to use it to produce data useful for scientists.</p> <p>We recommend this approach for:</p> <ul> <li>Anyone who wants a standard PlanktoScope but is on a limited budget, and has some interest in building things and troubleshooting problems.</li> <li>Anyone who wants to approach the PlanktoScope as a project and not just a tool, but who has a limited tolerance of technical complexity.</li> <li>Anyone who wants a do-it-yourself experience but does not have access to a laser cutter or CNC mill.</li> <li>Anyone who wants a standard set of parts as the foundation for customizing their PlanktoScope.</li> <li>Engineers and makers who don't want to worry about figuring out suppliers and making their own one-time supply chain in order to obtain all the hardware parts needed to build a single PlanktoScope.</li> </ul>"},{"location":"setup/#make-a-kit-and-assemble-it","title":"Make a kit and assemble it","text":"<p>If you don't want to purchase a pre-assembled PlanktoScope or a DIY assembly kit from FairScope, you will need to make your own assembly kit, and then assemble it into a PlanktoScope. This will require identifying sellers who will provide you with the necessary parts, and it will require identifying a way either to fabricate various mechanical parts yourself or to use a commercial service to fabricate those parts for you. Depending on which version of the PlanktoScope hardware you want to build, you might also need to assemble a custom printed circuit board (or work with a commercial service to assemble it for you). Once you have a kit, you can begin to assemble your PlanktoScope from it. You will almost certainly have to do some troubleshooting of problems with how you assembled your hardware, which is a great learning opportunity - but only if you're interested in it.</p> <p>We recommend this approach for:</p> <ul> <li>Anyone who is on an extremely limited budget but has lots of time and some hardware engineering experience.</li> <li>Makers who are already familiar with laser cutting or CNC milling, and with soldering or PCB assembly (the necessary skills will depend on the version of PlanktoScope hardware being built).</li> <li>Hobbyists and students who are primarily interested in the PlanktoScope as an engineering project and want to figure out everything by themselves.</li> <li>Anyone who wants to design and build an extremely non-standard PlanktoScope, whether for fun or to use it for unconventional purposes.</li> </ul>"},{"location":"setup/#next-steps","title":"Next steps","text":"<p>After finishing any necessary hardware setup and all necessary software setup for your PlanktoScope, you can proceed to our guide on how to operate your PlanktoScope.</p>"},{"location":"setup/hardware/","title":"PlanktoScope Hardware","text":"<p>This section of the PlanktoScope documentation will help you to build the hardware of a PlanktoScope. Our documentation splits this PlanktoScope production process into two phases: making a kit of parts, and assembling a PlanktoScope from that kit of parts.</p> <p>If you do not already have a kit of parts, you will need to either purchase a kit or make a kit yourself. You will need to choose a PlanktoScope hardware version and obtain the hardware components necessary for that hardware version; your assembly kit will consist of those components. You can purchase a kit from FairScope, a small business started by the inventor of the PlanktoScope in order to make it easier for people to obtain PlanktoScopes. Once you have selected a hardware version, you can proceed to our instructions for making your kit.</p> <p>If you do already have a kit of parts, you can proceed to our instructions for assembling your kit into a PlanktoScope. However, you will first need to determine the PlanktoScope hardware version which your kit is made for, so that you can choose the correct assembly guide for your kit.</p>"},{"location":"setup/hardware/#hardware-versions","title":"Hardware versions","text":"<p>The design of the PlanktoScope's hardware has been evolving to fix usability issues and improve the quality of images captured by the PlanktoScope. Thus, multiple versions of the hardware have been developed. This page only describes hardware versions for which documentation has been published  for anyone to manufacture the hardware, and here we only describe aspects of each hardware version relevant to choosing a version to manufacture. Due to a lack of time by the people developing the PlanktoScope hardware, documentation for other versions of the PlanktoScope hardware has not yet been created; for information on these other versions of the PlanktoScope hardware, please refer to the technical reference section of our documentation site.</p>"},{"location":"setup/hardware/#hardware-v21","title":"Hardware v2.1","text":"<p>This was the first publicly released version of the PlanktoScope hardware. The electronic components of this design are all available from commercial off-the-shelf sources, using an Adafruit Stepper Motor HAT to control various actuators and a Yahboom RGB Cooling HAT to cool the PlanktoScope's embedded Raspberry Pi 4 computer. The mechanical structure was designed for fabrication using a laser cutter. This hardware version has some design flaws, such as providing no way to replace the Raspberry Pi's micro-SD card without partially disassembling the PlanktoScope; these problems have been fixed in later versions of the PlanktoScope hardware.</p> <p>This version of the PlanktoScope hardware is the only version which has been widely replicated by independent makers so far. Note that this hardware design specifies a peristaltic pump which is no longer commercially available, so anyone making an assembly kit for this version will have to identify a different pump to use as a substitute.</p>"},{"location":"setup/hardware/#hardware-v25","title":"Hardware v2.5","text":"<p>This version includes many design improvements to solve various problems with the v2.1 hardware design, including:</p> <ul> <li> <p>Replacing the ibidi flowcell with a simpler glass capillary flowcell.</p> </li> <li> <p>Replacing the Adafruit Stepper Motor HAT with a HAT designed specifically for the PlanktoScope (the PlanktoScope HAT).</p> </li> <li> <p>Replacing the linear actuators for sample focusing with a more mechanically robust pair of linear actuators.</p> </li> <li> <p>Replacing the peristaltic pump with a more accurate pump which is commercially available.</p> </li> <li> <p>Making the Raspberry Pi's micro-SD card accessible without requiring disassembly of the PlanktoScope.</p> </li> </ul> <p>The mechanical structure of this design uses CNC-milled parts rather than laser-cut parts.</p> <p>Our documentation site provides manufacturing documentation to make assembly kits for this hardware version, and to assemble kits for this version into PlanktoScopes.</p>"},{"location":"setup/hardware/#choosing-a-version","title":"Choosing a version","text":"<p>We recommend building a PlanktoScope of the latest available hardware version (currently v2.5). However, if you are making your own assembly kit and the following limitations apply to you, you may need to choose an older hardware version such as v2.1:</p> <ul> <li> <p>You do not have access to a CNC mill, or to a commercial fabrication service with a CNC mill.</p> </li> <li> <p>You do not have access to manufacturing capabilities for assembling a custom printed circuit board, and you cannot buy a pre-assembled HAT from FairScope.</p> </li> </ul>"},{"location":"setup/hardware/#building-a-planktoscope","title":"Building a PlanktoScope","text":"<p>If you received a PlanktoScope hardware assembly kit from someone but you are not sure what hardware version the kit is for, you should check with the person who gave the kit to you.</p> <p>Once you have figured out what hardware version of the PlanktoScope you will build, you can proceed to our version-specific hardware setup guides:</p> <ul> <li> <p>If you are building a PlanktoScope with the v2.5 hardware, please proceed to our page for Hardware v2.5 to find instructions for making an assembly kit, as well as instructions for building a PlanktoScope from an assembly kit for v2.5 of the hardware.</p> </li> <li> <p>If you are building a PlanktoScope with the v2.1 hardware, please proceed to our page for Hardware v2.1 to find instructions for making an assembly kit, as well as instructions for building a PlanktoScope from an assembly kit for v2.1 of the hardware.</p> </li> </ul>"},{"location":"setup/hardware/#next-steps","title":"Next steps","text":"<p>After making an assembly kit (if necessary) and building a PlanktoScope from your assembly kit, you should proceed to our software setup guide.</p>"},{"location":"setup/hardware/index-noguides/","title":"PlanktoScope Hardware","text":"<p>You are viewing a copy of the PlanktoScope project documentation without the hardware setup guides, probably because you're viewing an offline, reduced-size copy of the PlanktoScope documentation served by your PlanktoScope. You should go to an online copy of the PlanktoScope documentation to find the hardware setup guides. Or, if you can temporarily connect your PlanktoScope to the internet, then you can download the hardware setup guides to your PlanktoScope for future offline access.</p>"},{"location":"setup/hardware/v2.1/","title":"Hardware v2.1","text":"<p>This page will help you to build the v2.1 hardware for a PlanktoScope.</p>"},{"location":"setup/hardware/v2.1/#make-an-assembly-kit","title":"Make an assembly kit","text":"<p>If you do not already have an assembly kit, you will need to make a kit for yourself. Note: you will need to set up the PlanktoScope software on the micro-SD card of your PlanktoScope's Raspberry Pi, as part of the assembly kit.</p> <p>You should be aware that some of the parts required for the kit, especially the peristaltic pump, are no longer commercially available; you will have to identify alternatives to substitute for those parts.</p>"},{"location":"setup/hardware/v2.1/#assemble-a-planktoscope-from-a-kit","title":"Assemble a PlanktoScope from a kit","text":"<p>Once you have an assembly kit, you will need to assemble it into a PlanktoScope.</p>"},{"location":"setup/hardware/v2.1/#next-steps","title":"Next steps","text":"<p>Once you have assembled your PlanktoScope, you can proceed to our operation guide\u00a0to learn how to operate your PlanktoScope.</p>"},{"location":"setup/hardware/v2.1/assembly/","title":"Assembly guide of the PlanktoScope","text":"<p>You can also use CAD renders and photos from the following links as a supplementary material for this assembly guide:</p> <ul> <li>CAD renders for the assembly guide</li> <li>Photos for the assembly guide</li> </ul> <p>For the assembly guide below, the pieces of the laser-cut structure are referred to by single-letter labels (A, J, L, K, H, F, E, C, B, N, M, D, G, I) according to the following assignments:</p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-1-gather-everything-you-need","title":"Step 1: Gather everything you need","text":"<p>For the full list of all required tools and parts, please refer to the v2.1 hardware kit production guide.</p> <ul> <li>Laser cut structure</li> <li>M12 lenses</li> <li>Peristaltic pump and tubing</li> <li>Raspberry Pi, motor driver board, GPIO connectors</li> <li>Flashed SD card</li> <li>Stepper motors</li> <li>PiCam and flex cable</li> <li>GPIO ribbon connector, headers, HATs, LED</li> <li>DC Power terminal</li> <li>Magnets</li> <li>Super glue</li> <li>Standoffs (M2.5), M3 screws and nuts</li> </ul> <p>Make sure you have your screwdriver kit, soldering iron, and components ready. Also, remember to flash the PlanktoScope image disk on the SD card before installing the Raspberry Pi.</p> <p>If you are not familiar with any process, such as soldering, tapping, or wiring, try and familiarize yourself with the topics first.</p> <p>Soldering deals with high heat and potentially toxic materials, so make sure to use the proper precautions.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-2-standoff-installation","title":"Step 2: Standoff installation","text":"<p>Place 8 standoffs (M2.5 6mm) into the designated holes on the laser-cut base A. A pair of pliers make the job more comfortable. Do not overtighten as it is possible to crack the base material.</p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-3-motor-hat-preparation","title":"Step 3: Motor HAT preparation","text":"<p>Insert and solder the terminal blocks and headers onto the motor driver PCB. </p> <p></p> <p>Place the motor driver PCB on to the indicated standoffs.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-4-magnets-setup","title":"Step 4: Magnets setup","text":"<p>Now is a good time to think about how the magnets will function within the microscope. The magnets in the sample stage will need to attract to the magnets on the flow cell holder. The magnets in the objective holder will need to attract the magnets on the mount. Keep this in mind as you are adding your magnets and tapping your respective M12 holders so your orientation will be correct.</p> <p></p> <p>You can now fix your magnets into their appropriate holes on sample stage B. It is recommended to glue the magnets in place. If the magnets are too large to fit in, the holes can be widened with a handheld drill. However, they should be quite snug in place. Before you glue them in place make sure that the polarity is maintained, as they will be impossible to remove after gluing.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-5-sample-stage-assembly","title":"Step 5: Sample stage assembly","text":"<p>Don\u2019t be alarmed by the color swap, this is the sample stage B. You can now fit the pegs on the driver mounts into the corresponding holes on the sample stage. They should be glued in place with superglue or epoxy. You can spin the shaft to align the driver mounts on the 2 steppers if it helps making the process easier.</p> <p></p> <p>You should now have a sample stage and motor assembly that looks like this.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-6-lenses-tapping-and-mounting","title":"Step 6: Lenses tapping and mounting","text":"<p>You now need to tap the holes for the M12 lenses in stage and mount M and D. It is helpful for alignment to do both the objeDtive and tube lens mount together. It is important to do this as straight as possible. A drop of mineral or olive oil can help the process. Be careful to use a right-hand tap (that goes down when turning clockwise).</p> <p> </p> <p></p> <p>You can now screw the objective lens (the 25mm one) in part D. </p>"},{"location":"setup/hardware/v2.1/assembly/#step-7-camera-preparation","title":"Step 7: Camera preparation","text":"<p>You can now unscrew the lens from the Pi camera, being careful not to disturb the sensor below.  </p>"},{"location":"setup/hardware/v2.1/assembly/#step-8-camera-mount","title":"Step 8: Camera mount","text":"<p>You can mount the camera using the appropriate holes on the camera mount G. Be careful to avoid getting oil or dust on the sensor.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-9-led-preparation","title":"Step 9: LED preparation","text":"<p>The LED can then be wired up and put into its mount F. If you wire the LED yourself, remember to give enough length to reach the motor driver on the other end of the microscope. You can also add a bit of glue to fix F to the motor mount E at this time to make assembly easier, though it is not required.</p> <p>Warning</p> <p></p> <p>This picture shows the correct wiring for the LED. Please make sure the red wire is on the long pin of the LED.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-10-vertical-slices-assembly","title":"Step 10: Vertical slices assembly","text":"<p>You can now start placing the motor mount/LED assembly- B, </p> <p>C, </p> <p>D, </p> <p>E, </p> <p>F, </p> <p>and G into the base A.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-11-pump-setup","title":"Step 11: Pump setup","text":"<p>The pump can then be mounted in place on H. Thread the wires through the hole with the pump tubing pointed toward the holes on the mount. </p> <p>Fix the pump in place. </p>"},{"location":"setup/hardware/v2.1/assembly/#step-12-pump-mounting","title":"Step 12: Pump mounting","text":"<p>You can now mount the pump on base A. </p> <p>Your setup should look like this. Don't worry about the wiring, we'll have a look at it in the next step!</p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-13-motor-hat-wiring","title":"Step 13: Motor HAT wiring","text":"<p>You will now want to wire the steppers and pump to the terminals on the motor driver board.</p> <p>Info</p> <p>The PlanktoScope uses only bipolar stepper motors (with 4 wires coming out, and two coils inside), so you need to identify the two wires working together for each coil. The RepRap Wiki has great information on how to do this, either with a multimeter or without.</p> <p>You can find more information about stepper motors and how they work in this document.</p> <p>Tip</p> <p>If your wires are too short, you can invert the pump and the focus wiring. However, you will have to remember to change the configuration later on.</p> <p>Tip</p> <p>Make sure the wires are properly connected by pulling on them a little. They should not come loose.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-14-raspberry-pi-setup-and-installation","title":"Step 14: Raspberry Pi setup and installation","text":"<p>At this point, you can insert your flashed SD card into your Raspberry Pi. If you did not already flash your SD card with the PlanktoScope OS, refer to our guide for doing so. The heat sink can also be added to the processor.</p> <p></p> <p>Mount the Raspberry Pi containing the flashed SD card on the standoffs attached to the laser cut base A.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-15-standoffs","title":"Step 15: Standoffs","text":"<p>Add 8 standoffs (M2.5 15mm) to fix the motor driver board and the Raspberry Pi to the base. </p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-16-camera-flex-cable","title":"Step 16: Camera flex cable","text":"<p>At this point you can use the Pi camera flex cable to connect the camera to the Pi. This is done by gently pulling up the tensioners, inserting the cable in the right orientation, then pushing the tensioners back in place to set the cable. Try not to kink or fold the flex cable too much as it is possible to damage it.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-17-power-supply-wiring","title":"Step 17: Power supply wiring","text":"<p>The power wires can be wired into place on the motor driver board.</p> <p>Tip</p> <p>Make sure the wires are properly connected by pulling on them a little. They should not come loose.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-18-prepare-the-gps-hat","title":"Step 18: Prepare the GPS HAT","text":"<p>Tip</p> <p>If you don't have a GPS HAT, you can just skip the assembly steps related to the GPS HAT - the PlanktoScope software will still work without GPS.</p> <p></p> <p>Insert the battery to power the GPS HAT and solder the terminal mounts in place.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-19-install-the-gps-hat","title":"Step 19: Install the GPS HAT","text":"<p>Mount the GPS HAT over the motor driver PCB using the standoffs attached to the laser cut base A.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-20-install-the-fan-hat","title":"Step 20: Install the Fan HAT","text":"<p>Place the cooling fan HAT above the Raspberry Pi by mounting it to the standoffs on base A.</p> <p>Warning</p> <p>Be careful to slide the camera flat cable in the slot in the HAT above the connector.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-21-secure-the-hats","title":"Step 21: Secure the HATS","text":"<p>Secure the cooling fan HAT and GPS HAT by tightening the 8 screws to the standoffs on base A</p>"},{"location":"setup/hardware/v2.1/assembly/#step-22-install-back-panel","title":"Step 22: Install back panel","text":"<p>Insert the laser cut border I into base A.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-23-gps-output-connector","title":"Step 23: GPS output connector","text":"<p>Insert the power and GPS connectors into side plate J.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-24-install-side-panel","title":"Step 24: Install side panel","text":"<p>Place the side plate J into the designated slots on the base. You can connect the GPS cable to its connector on the board.</p> <p>Warning</p> <p>The GPS connector is quite fragile, make sure to align it properly before inserting it.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-25-install-the-other-side-panel","title":"Step 25: Install the other side panel","text":"<p>Mount the side plate K on base A using the assigned slots.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-26-secure-the-sides-together","title":"Step 26: Secure the sides together","text":"<p>Secure the laser cut sides with the screws and nuts.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-27-secure-the-sides-to-the-base-plate","title":"Step 27: Secure the sides to the base plate","text":"<p>Secure the laser cut sides to the base plate A with the screws and nuts.</p> <p>Warning</p> <p>To make this easier, you can turn the assembly upside down or on its side. Be careful when doing so as the plates may fall.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-28-insert-the-camera-ribbon-cable-in-the-camera","title":"Step 28: Insert the camera ribbon cable in the camera","text":"<p>You can now connect the camera flex cable into the connector on the camera board. Once again, gently pull up the tensioners, insert the cable in the right orientation, and push the tensioners back in place to set the cable. Try not to kink or fold the flex cable too much as it is possible to damage it.</p>"},{"location":"setup/hardware/v2.1/assembly/#step-29-assemble-the-gpio-ribbon-cable","title":"Step 29: Assemble the GPIO ribbon cable","text":"<p>If you didn't get an already assembled ribbon cable, you need to build it yourself.</p> <p>The orientation of the connector does not really matter. However, you need to make sure that both connectors are oriented in the same direction and are on the same side of the ribbon.</p> <p>To assemble, slide the ribbon in its connector and close it off. You need to tighten it really hard. It's very warmly recommended to use a vice to do so.</p> <p>Warning</p> <p>Once assembled, the ribbon should NOT look like this: </p> <p>It should rather look like this: </p>"},{"location":"setup/hardware/v2.1/assembly/#step-30-insert-the-ribbon-cable","title":"Step 30: Insert the ribbon cable","text":"<p>Attach the GPIO ribbon to connect the cooling fan HAT to the GPS HAT.</p> <p>Tip</p> <p>You can try to route the flat ribbon from the camera under the ribbon cable you are connecting now. </p>"},{"location":"setup/hardware/v2.1/assembly/#step-31-fluidic-assembly","title":"Step 31: Fluidic assembly","text":"<p>Feed in the tubing from syringe 1 to form the fluidic path as shown.</p> <p></p> <p>Feed in the tubing from syringe 2 to form the fluidic path as shown</p> <p></p> <p>Feed in a length of tubing as shown through motor mount H and illumination mount FE</p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-32-close-your-planktoscope","title":"Step 32: Close your PlanktoScope","text":"<p>Warning</p> <p>Take a moment to check your wiring one last time. Also check the routing, make sure the LED wires and the pump stepper wires are in their dedicated channel.</p> <p></p> <p>Place the top L into the slots on the PlanktoScope body. Secure it in place with screws and nuts.</p> <p></p>"},{"location":"setup/hardware/v2.1/assembly/#step-33-enjoy","title":"Step 33: Enjoy!","text":"<p>Congratulations on a job well done. You can have some rest, get a tea and some biscuits!</p> <p></p> <p>Warning</p> <p>If this was your first time assembling a PlanktoScope, you will probably need to do some troubleshooting of problems with the hardware assembly before your PlanktoScope will fully work. Refer to our troubleshooting documentation for assistance.</p>"},{"location":"setup/hardware/v2.1/assembly/#next-steps","title":"Next steps","text":"<p>Once your PlanktoScope fully works, you can proceed to our operation guide\u00a0to learn how to operate your PlanktoScope.</p>"},{"location":"setup/hardware/v2.1/kit/","title":"Kit Production","text":""},{"location":"setup/hardware/v2.1/kit/#required-tools","title":"Required Tools","text":"<p>Building the PlanktoScope involves components that can be sourced from various vendors, both online and locally. The assembly process is straightforward and can be completed within a few hours. Our website offers detailed guides for both hardware and software assembly, and the PlanktoScope community is ready to assist you with any questions or issues.</p>"},{"location":"setup/hardware/v2.1/kit/#soldering-station","title":"Soldering Station","text":"<p> A soldering station with flux, or flux core solder, is necessary for making a few electrical connections. Purchase here.</p>"},{"location":"setup/hardware/v2.1/kit/#tap-wrench","title":"Tap Wrench","text":"<p> Any tap wrench compatible with the M12x0.5 tap will work. Purchase here.</p>"},{"location":"setup/hardware/v2.1/kit/#m12-x-05-tap","title":"M12 x 0.5 Tap","text":"<p> An M12x0.5 tap is required to secure the objective and tube lenses. Purchase here.</p>"},{"location":"setup/hardware/v2.1/kit/#screwdriver-kit","title":"Screwdriver Kit","text":"<p> A screwdriver kit with multiple drivers simplifies many assembly operations. Purchase here.</p>"},{"location":"setup/hardware/v2.1/kit/#required-components","title":"Required Components","text":"<p>Below is a comprehensive list of components required to build the PlanktoScope V2.1, along with links to purchase them in both the US and France.</p>"},{"location":"setup/hardware/v2.1/kit/#electronic-components","title":"Electronic Components","text":"Quantity Name Details US Link FR Link 1 Raspberry Pi 4 B (4GB) The single board computer from Raspberry Pi with 4GB of memory Amazon US DigiKey FR 1 Adafruit Stepper Motor HAT Controls 2 steppers: focus and pump stepper motors Amazon US Amazon FR 1 Adafruit Ultimate GPS HAT Stores date &amp; time and logs GPS coordinates Amazon US DigiKey FR 1 Yahboom Cooling Fan HAT Cools and provides visual feedback with LEDs Amazon US Kubii FR 1 Hammer Header Male 2x20 Only one needed Amazon US Mouser FR 1 Stacking Header 2x20 Only one needed Amazon US Mouser FR 2 Pitch IDC Sockets 2x20 Two needed Amazon US Mouser FR 10cm GPIO Ribbon IDC 40P Only 10 cm needed Amazon US Amazon FR 1 Flex Cable for Pi Camera Longer flex cable needed Amazon US Amazon FR 1 DC Power Jack Socket Only one needed Amazon US Amazon FR 1 GPS Active Antenna Includes uPF to SMA adapter Amazon US Amazon FR 1 Micro HDMI Cable Optional, for development purposes Amazon US Amazon FR 1 Power Supply 3A (USB) Needs to provide 3A 5V Amazon US Amazon FR 1 Power Supply 1A (USB) Needs to provide 1A 5V Amazon US Mouser FR 1 USB Type-C to USB-A 2.0 To power the Raspberry Pi Amazon US Amazon FR 1 USB 5v to DC 12v Step Up Make sure this USB 5V / DC 12V step up converter limits the current at 0.8A Amazon US Amazon FR 1 Maschinenreich peristaltic pump 12V XP88-ST01 This pump can be replaced by others depending on its availability Amazon US 2 Linear Stepper Motor Make sure to select two linear stepper Amazon US 1 MicroSD Card + Adapter Minimum size is 32GB Amazon US Amazon FR 1 kit Heat sink kit for Raspberry Pi Only one kit needed Amazon US Mouser FR"},{"location":"setup/hardware/v2.1/kit/#fluidic-components","title":"Fluidic Components","text":"Quantity Name Details US Link FR Link 1 kit \u00b5-Slide I Luer Variety Pack Make sure to select uncoated Ibidi US Ibidi FR 2 HSW 20ml Syringe Two syringes needed Grainger US Darwin Microfluidics FR 1 kit \u00dcberStrainer Set 3 Optional strainer kit to filter the samples Pluriselect US 1m Silicone Tubing ID 1.6mm Ibidi website provides good but expensive tubing Ibidi US Darwin Microfluidics FR 2 Luer Lock Connector Female 1.6 mm Make sure to select the proper diameter Ibidi US Darwin Microfluidics FR 2 Luer Connector Male 1.6 mm Make sure to select the proper diameter Ibidi US Darwin Microfluidics FR"},{"location":"setup/hardware/v2.1/kit/#optic-components","title":"Optic Components","text":"Quantity Name Details US Link FR Link 1 LED white 5mm Intensity: 23,000 mcd, Forward Voltage: 3.5V, Current: 20mA, Beam Angle: 15\u00b0 DigiKey US Gotronic FR 1 kit Arducam M12 Lens Kit Includes 10 M12 Lenses for various angles of view Amazon US 1 M12 Lens 25mm IR 1/2\" 5MP Additional essential 25mm M12 lens Amazon US AliExpress 1 Pi Camera v2.1 Amazon US"},{"location":"setup/hardware/v2.1/kit/#hardware-components","title":"Hardware Components","text":"Quantity Name Details US Link FR Link 1 M2.5 Standoff Assortment Kit 6mm and 15mm standoffs Amazon US 1 M2 M3 M4 Screw Assortment Kit M2x8mm and M3x12mm screws and M3 nuts Amazon US 1 CR1220 Battery For the Adafruit Ultimate GPS HAT Amazon US Amazon FR 16 Magnets 6 x 2 mm Neodynium magnets to connect functional layers Amazon US"},{"location":"setup/hardware/v2.1/kit/#machine-your-structure","title":"Machine Your Structure","text":"<p>To complete your PlanktoScope kit, you'll need to fabricate the structure. This can be done using laser cutting or CNC machining from a sheet of material. You can machine the structure locally at a FabLab or through a company specializing in laser cutting or CNC machining. The cost will vary depending on the material chosen and whether you machine it yourself or use a company.</p>"},{"location":"setup/hardware/v2.1/kit/#suggested-materials","title":"Suggested Materials","text":"Material Easy to Machine Robustness Water Resistance Price Recyclable Ideal For Transparent Acrylic \u2605\u2605\u2605\u2605\u2605 \u2605\u2606\u2606\u2606\u2606 \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2606\u2606\u2606 \u2606\u2606\u2606\u2606\u2606 Seeing internal electronics Black Acrylic \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2606\u2606\u2606 \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2606\u2606 \u2606\u2606\u2606\u2606\u2606 Removing surrounding light Marine Plywood \u2605\u2605\u2605\u2605\u2606 \u2605\u2605\u2605\u2605\u2606 \u2605\u2605\u2605\u2605\u2606 \u2605\u2605\u2605\u2605\u2606 \u2605\u2606\u2606\u2606\u2606 Deploying at sea Basic Plywood \u2605\u2605\u2605\u2606\u2606 \u2605\u2605\u2606\u2606\u2606 \u2605\u2605\u2606\u2606\u2606 \u2605\u2606\u2606\u2606\u2606 \u2605\u2605\u2606\u2606\u2606 Cheap prototyping HDF Forescolor \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2605\u2606 \u2605\u2605\u2605\u2606\u2606 \u2605\u2605\u2605\u2606\u2606 \u2605\u2605\u2605\u2605\u2605 Feeling good about recycling PP Waste, 100% Recycled \u2606\u2606\u2606\u2606\u2606 \u2606\u2606\u2606\u2606\u2606 \u2606\u2606\u2606\u2606\u2606 \u2605\u2605\u2605\u2605\u2606 \u2605\u2605\u2605\u2605\u2605 Feeling good about recycling Aluminum \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2605\u2605 \u2605\u2605\u2605\u2605\u2605 Robust professional setup"},{"location":"setup/hardware/v2.1/kit/#get-the-plan-and-machine-it","title":"Get the Plan and Machine It","text":"<p>You can download the necessary fabrication patterns for the structure here; two versions are available, one for material with 5 mm thickness, and the other for material with 1/4 inch thickness:</p> <ul> <li>5 mm thickness: SVG file (recommended), DXF file</li> <li>1/4 inch thickness: DXF file</li> </ul> <p>Since DXF files don't include unit information, when you open or import one of these DXF files you may need to rescale all dimensions to achieve the correct sizes. You can check whether dimensions are correct by checking the length and width of part M against the actual dimensions shown below:</p> <p></p> <p>You can also compare the approximate dimensions of parts in the SVG file (for 5 mm thickness material) with the sizes of parts in your imported DXF file to check whether the rescaling result looks approximately correct.</p>"},{"location":"setup/hardware/v2.5/","title":"Hardware v2.5","text":"<p>This page will help you to build the v2.5 hardware for a PlanktoScope.</p>"},{"location":"setup/hardware/v2.5/#make-an-assembly-kit","title":"Make an assembly kit","text":"<p>If you do not already have an assembly kit, you will need to make a kit for yourself.</p>"},{"location":"setup/hardware/v2.5/#assemble-a-planktoscope-from-a-kit","title":"Assemble a PlanktoScope from a kit","text":"<p>Once you have an assembly kit, you will need to assemble it into a PlanktoScope.</p>"},{"location":"setup/hardware/v2.5/#next-steps","title":"Next steps","text":"<p>If you assembled your PlanktoScope from a kit provided by FairScope, you can proceed to our operation guide\u00a0to learn how to operate your PlanktoScope. Otherwise, you will first need to set up the PlanktoScope software on the micro-SD card of your PlanktoScope's Raspberry Pi.</p>"},{"location":"setup/hardware/v2.5/assembly/","title":"Assembly of the PlanktoScope kit","text":""},{"location":"setup/hardware/v2.5/assembly/#content-of-the-kit","title":"Content of the Kit","text":"<p>It is important to ensure that you have all of the necessary components before beginning the assembly of your PlanktoScope. To do so, please check that all bags are present as part of the kit.</p> <p></p> Bag Content A Scews B Tools C Adhesive Pads D Tubing, Glass Cuvettes E Bubbler Pump F Peristaltic Pump G Linear Stepper Motor H Raspberry PI Chip cooler I Raspberry HAT J Camera Lens K MicroSD Card, DC Power Jack Socket L DC Power Supply and Cable M Syringe and Falcon Tube X1 Raspberry PI 4 X2 Pipet X3 Cable ties X4 Raspberry PI HQ Camera Modul X5 Sandpaper <p>If any bags are missing, please go back to the BOM (Bill of Materials) and reorder the required components.</p>"},{"location":"setup/hardware/v2.5/assembly/#about-this-document","title":"About this document","text":"<p>To read this document, follow these guidelines:</p>"},{"location":"setup/hardware/v2.5/assembly/#color-codes","title":"Color codes","text":"<ul> <li>\ud83d\udd34\u00a0Look to the color red</li> <li>\ud83d\udfe0\u00a0Look to the color orange</li> <li>\ud83d\udfe1\u00a0Look to the color yellow</li> <li>\ud83d\udfe2\u00a0Look to the color green</li> <li>\ud83d\udd35\u00a0Look to the color blue</li> <li>\ud83d\udfe3\u00a0Look to the color purple</li> </ul>"},{"location":"setup/hardware/v2.5/assembly/#icons","title":"Icons","text":"<ul> <li>\ud83d\udc41\u00a0Pay attention to this</li> <li>\u26a0\u00a0Be careful with this</li> <li>\ud83d\udcdc\u00a0The book says</li> <li>\ud83c\udfac\u00a0Action !</li> <li>\u274c\u00a0Don't focus on that location</li> </ul> <p>As you read through the document, be sure to pay attention to these visual cues to guide you through the build process.</p>"},{"location":"setup/hardware/v2.5/assembly/#requirements","title":"Requirements","text":""},{"location":"setup/hardware/v2.5/assembly/#tools","title":"Tools","text":"<p>Content of\u00a0Bag B:</p> <ul> <li>\ud83d\udd34\u00a0B1. Small flat screwdriver 2mm</li> <li>\ud83d\udfe0\u00a0B2. Razor blade</li> <li>\ud83d\udfe1\u00a0B3. Allen key 2mm</li> <li>\ud83d\udfe2 B4. Wrenches for standoffs</li> </ul>"},{"location":"setup/hardware/v2.5/assembly/#components","title":"Components","text":"<p>Content of\u00a0Bag A:</p> <ul> <li>\ud83d\udfe2\u00a0A1. Standoff M2.5 - 6mm - Brass</li> <li>\ud83d\udd35\u00a0A2. Standoff M2.5 - 15mm - \u00a0Brass</li> <li>\ud83d\udfe3\u00a0A3. Standoff M2.5 - 16mm - SS</li> <li>\ud83d\udfe0\u00a0A4. Screw M2.5x5mm CHC - SS</li> <li>\ud83d\udfe1\u00a0A5. Screw M2.5x10mm CHC - SS</li> <li>\ud83d\udd34\u00a0A6. Screw M3x12mm BHC - SS</li> </ul>"},{"location":"setup/hardware/v2.5/assembly/#chapter-1-detach-the-parts-from-panels-by-cutting-the-tabs","title":"Chapter 1: Detach the Parts from panels by cutting the tabs","text":"<p> \ud83d\udc41 Locate the panel S1 and discover the 5 differents Parts F, P, K, J and I.</p> <p> \ud83c\udfac Flip your panel S1.</p> <p> \ud83d\udd34 Locate the outer tabs on the edges of the different Parts. These are typically small projections of material that are used to secure the case parts to the panels.</p> <p> Gather all the necessary tools. You will need the B2 \ud83d\udfe0 Razor blade to cut the tabs.</p> <p></p> <ul> <li>\ud83d\udfe3 Use the razor blade to cut the outer tabs located on the edges of the different Parts</li> <li>\u274c Do not cut the inner tabs present inside the different Parts for now and focus on the outer tabs attaching the Parts to the main panel.</li> </ul> <p></p> <ul> <li>Position your razor blade on the tab as close to the piece as possible to avoid residual tab after cutting.</li> <li>Press firmly on the razor blade, being very careful with your finger, to cut your first tab.</li> <li>Make sure you don't damage your table by placing a flat, rigid support under the S1 panel.</li> <li>Keep going with the other tabs of this piece F.</li> </ul> <p>Once all of the tabs are cut, gently lift the case parts away from the panels. If the case parts are stuck or difficult to remove, you may need to gently wiggle or pry them loose using a flat tool such as a screwdriver.</p> <p>Warning</p> <p>Be extremely careful because this is very sharp.</p> <p></p> <p>Once you have removed your Part from the main panel by cutting off all the tabs holding it, inspect it for potential residual tabs.</p> <ul> <li>\ud83d\udfe3 Here is a residual tab that will need to be removed.</li> <li>\ud83d\udfe0 Here there is no residual tab which is perfect.</li> </ul> <p></p> <p>\ud83d\udfe3 Place your razor blade flat on the edge of your piece being very careful with your fingers and cut the residual tab.</p> <p>Warning</p> <p>Be extremely careful because this is very sharp.</p> <p></p> <p>Repeat the cutting of the tabs on all the Parts F, P, K, J and I present on the panel S1.</p> <p>Warning</p> <p>Be extremely careful because this is very sharp.</p> <p></p> <p>\ud83d\udd34 Locate the inner tabs on the edges of the different Parts.</p> <p></p> <p>Cut out the tabs inside of all the Parts F, P, K, J and I detached from the panel S1.</p> <p>Dispose of the cut tabs and any other debris that may have been created during the detachment process.</p> <p>Warning</p> <p>Be extremely careful because this is very sharp.</p> <p></p> <ul> <li>\u2705 Good way of cutting inner tabs</li> <li>\u274c Wrong way of cutting inner tabs</li> </ul> <p></p> <p>Repeat the process on the panel S2.</p> <p>Warning</p> <p>Be extremely careful because this is very sharp.</p> <p></p> <p>Discover the 11 differents Parts.</p> <p></p> <p>Dispose of the cut tabs and any other debris that may have been created during the detachment process. Inspect the case parts and panels for any damage or imperfections that may have occurred during the detachment process. If any damage is found, it may be necessary to repair or replace the affected parts.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-2-place-the-4-adhesive-pads-under-the-part-i","title":"Chapter 2: Place the 4 Adhesive Pads under the Part I","text":"<p> To secure the PlanktoScope on slippery grounds using the adhesive pads, follow these steps. Gather all the necessary materials. You will need:</p> <ul> <li>Time: 1 min</li> <li>\ud83d\udc41 and Take the Part I</li> <li>\ud83d\udfe0 Take the four adhesive pads present in the bag A.</li> <li>\ud83d\udfe3 Locate the four pockets that will receive the four adhesive pads.</li> </ul> <p></p> <ul> <li>Clean the bottom of the case part I. Make sure the surface is free of dirt, debris, and any other substances that may prevent the adhesive pads from sticking properly.</li> <li>Remove the paper and place the four adhesive pads in the pockets by pressing firmly on them, sticky-side down.</li> <li>Test the stability of the PlanktoScope by gently shaking or tilting it. If it feels secure and does not slip or slide, the adhesive pads have been successfully installed.</li> </ul> <p>Note</p> <p>\ud83c\udfac Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-3-screw-the-four-standoffs-into-part-a","title":"Chapter 3: Screw the four Standoffs into Part A","text":"<p>Now it's time to assemble the ground plate for the Raspberry Pi as the PlanktoScope main processing unit.</p> <ul> <li>Time: 5 min</li> </ul> <p></p> <ul> <li>\ud83d\udc41 Grab the Part A.</li> <li>\ud83d\udfe3 Locate the four holes on Part A.</li> </ul> <p></p> <p>\ud83d\udfe2 A1. Standoff M2.5 - 6mm- Brass</p> <p></p> <p>\ud83d\udfe2 B4. Wrenches for standoffs</p> <p></p> <ul> <li>\ud83d\udfe3 Place the Standoff M2.5 - 6mm in the small side of the wrenches for   standoffs B4.</li> <li>\ud83d\udfe0 Do not use the big side of the wrenches for standoffs since the standoff will be loose in it.</li> </ul> <p></p> <ul> <li>Place the standoff in the hole and start rotating by hand in a clockwise direction until secure.</li> <li>Then tighten with the wrench.</li> </ul> <p></p> <ul> <li>\u2705 Make sure to screw until the standoff is properly inserted in the hole.</li> <li>\u274c Do not stop screwing before.</li> </ul> <p></p> <p>Keep going for each of the four holes.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-4-mount-the-heat-sinks-on-the-raspberry-pi","title":"Chapter 4: Mount the Heat Sinks on the Raspberry Pi","text":"<ul> <li>Time: 2 min</li> </ul> <p>Locate the Raspberry Pi 4 Model B packaging.</p> <p>Warning</p> <p>Be careful removing it from its packaging.</p> <p></p> <p>Place the four Heat Sinks next to your Raspberry Pi and mark the locations of the Heat Sinks on the Raspberry Pi.</p> <ul> <li>\ud83d\udfe0 &amp; \ud83d\udd35 Small Heat Sinks</li> <li>\ud83d\udfe2 Medium Heat Sink</li> <li>\ud83d\udfe3 Big Heat Sink</li> </ul> <p></p> <p>Remove the protective labels under a Heat Sink and place the Heat Sink on the slot of the Raspberry Pi.</p> <p></p> <p>Remove the protective labels under all the Heat Sinks and place all the Heat Sinks on the slots of the Raspberry Pi.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-5-insert-the-micro-sd-card-in-the-raspberry-pi","title":"Chapter 5: Insert the micro SD card in the Raspberry Pi","text":"<ul> <li>Locate the SD card adapter in the bag K.</li> <li>The micro SD card is inserted in the SD card adapter.</li> <li>\ud83d\udfe3 Remove the micro SD card from the SD card adapter.</li> </ul> <ul> <li>Flip your Raspberry Pi.</li> <li>\ud83d\udfe0 Locate the micro SD port.</li> <li>\ud83d\udfe3 Insert the micro SD card in the Raspberry Pi.</li> </ul> <p>Push the micro SD card in the Raspberry Pi port to a point of resistance.</p> <p>Note</p> <p>If you notice that the micro SD card protrudes about 2mm from its slot, this is normal.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-6-mount-the-raspberry-pi-on-the-part-a","title":"Chapter 6: Mount the Raspberry Pi on the Part A","text":"<ul> <li>Time: 1 min</li> </ul> <ul> <li>\u2705 Make sure to position the Raspberry Pi properly on the four standoffs screwed on the Part A.</li> <li>\u274c Do not invert the position of the Raspberry Pi on the four standoffs screwed on the Part A.</li> </ul> <p>\ud83d\udfe3 A3. Standoff M2.5 - 16mm - SS</p> <p></p> <p>Screw by hand a Standoff M2.5 - 16mm on the Raspberry Pi.</p> <p></p> <ul> <li>Screw by hand all Standoffs M2.5 - 16mm on the Raspberry Pi.</li> <li>Make sure you insert all four standoffs by hand and tighten slightly.</li> </ul> <p></p> <p>\ud83d\udfe2 B4. Wrenches for standoffs</p> <p></p> <ul> <li>\ud83d\udfe0 Secure the Standoff M2.5 - 16 mm - SS A3 in the big side of the wrenches for standoffs B4.</li> <li>\ud83d\udfe3 Do not use the small side of the wrenches for standoffs since the standoff won\u2019t fit in it.</li> </ul>"},{"location":"setup/hardware/v2.5/assembly/#chapter-7-attach-the-ribbon-cable-to-the-raspberry-pi","title":"Chapter 7: Attach the Ribbon Cable to the Raspberry Pi","text":"<ul> <li>Time: 2 min</li> </ul> <p>Locate the Raspberry Pi Camera HQ packaging.</p> <p>Warning</p> <p>Be careful removing it from its packaging.</p> <p></p> <p>Lay your Raspberry Pi Camera face down on a suitable surface.</p> <p>\ud83d\udd34 The black connector is simply a push/pull fit. To disengage the cable, pull the two corners of the black connector down, away from the camera board. It will unclip to about 3mm, make sure you don't pull it off! If you're struggling, try pulling off one corner of the connector at a time.</p> <p>Warning</p> <p>Be careful with this, this part is delicate. Lift the black connector gently</p> <p></p> <p>Once the connector has been disengaged from the Raspberry Pi camera board, the cable will simply slide out!</p> <ul> <li>\ud83d\udfe3 Put aside Camera the Raspberry Pi</li> <li>\ud83d\udfe2 Keep the Ribbon Cable for next step.</li> </ul> <p></p> <p>\ud83d\udd34 Locate the black connector present on the Raspberry Pi.</p> <p></p> <p>\ud83d\udd34 The black connector is simply a push/pull fit. To disengage the cable, pull the two corners of the black connector down, away from the camera board. It will unclip to about 3mm, make sure you don't pull it off! If you're struggling, try pulling off one corner of the connector at a time.</p> <p>Warning</p> <p>Be careful, this part is delicate. Gently prise the black connector with nail or fingertip and thumb.</p> <p></p> <p>Insert the Ribbon Cable you just detached from the Raspberry Pi Camera in the Raspberry Pi.</p> <ul> <li>Make sure to insert in as much as you can.</li> <li>Blue rectangle on Ribbon Cable should face the same direction as the arrow below.</li> </ul> <p></p> <p>\ud83d\udd34 Secure the Ribbon Cable in the Raspberry Pi by pressing firmly on the black connector.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-8-mount-the-planktoscope-hat-on-the-raspberry-pi","title":"Chapter 8: Mount the PlanktoScope HAT on the Raspberry Pi","text":"<ul> <li>Time: 2 min</li> </ul> <p>Locate the PlanktoScope HAT present in bag I.</p> <p></p> <p>\ud83d\udd34 Thread the Ribbon cable through the PlanktoScope HAT slot from the underside.</p> <p>Warning</p> <p>Make sure the two \ud83d\udfe3 black connectors are aligned before threading through the ribbon.</p> <p></p> <p>\ud83d\udd34 Plug the PlanktoScope HAT into the Raspberry Pi.</p> <p>Warning</p> <p>Make sure the two black connectors are aligned before attaching them together.</p> <p></p> <p>Press the PlanktoScope HAT against the Raspberry Pi until it is no longer possible to move them closer together.</p> <p>Warning</p> <p>Continue to feed through the Ribbon Cable and do not crush it while pressing the PlanktoScope HAT against the standoffs.</p> <p></p> <p>\ud83d\udfe0 A4. Screw M2.5X5mm CHC - SS</p> <p></p> <p>\ud83d\udfe3 Locate the 4 holes on the top of the PlanktoScope HAT and insert the four M2.5X5mm</p> <p></p> <p>\ud83d\udfe1 B3. Allen key 2mm</p> <p></p> <p>Screw the four A4 screws through the PlanktoScope HAT onto the Standoff M2.5 - 16mm.</p> <p>Note</p> <p>\ud83c\udfac Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-9-place-the-power-socket-on-part-m","title":"Chapter 9: Place the Power Socket on Part M","text":"<ul> <li>Time: 2 min</li> <li>Locate the DC Power Jack from the Bag K.</li> <li>Remove the Lock Ring from the DC Power Jack</li> </ul> <ul> <li>\ud83d\udd34 Lay the Part M down and make sure the pockets in these holes are facing upwards.</li> <li>\ud83d\udfe3 Locate the Power Socket hole on Part M.</li> </ul> <p>\ud83d\udd34 Insert the cable inside of the hole by being sure of the orientation of the Part M.</p> <p></p> <p>\ud83d\udfe3 Flip the Part M and secure the DC Power Jack by hand on the Part M by screwing the Lock Ring.</p> <p>Warning</p> <p>Make sure the Lock Ring doesn\u2019t spin on itself.</p> <p>Note</p> <p>\ud83c\udfac Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-10-mount-the-raspberry-pi-camera-hq-on-part-b","title":"Chapter 10: Mount the Raspberry Pi Camera HQ on Part B","text":"<ul> <li>Time: 2 min</li> </ul> <p>\ud83d\udfe3 Locate the 4 holes on the top of the Part B.</p> <p></p> <p>\ud83d\udd35 A2. Standoff M2.5 - 15mm - Brass</p> <p></p> <p>Insert the four Standoff M2.5 - 15mm.</p> <p></p> <p>The result should be similar to the picture.</p> <p></p> <p>\ud83d\udfe2 B4. Wrenches for standoffs</p> <p></p> <p>Using the small side of the Standoff Wrench, secure the 4 M2.5 - 15mm Standoffs</p> <p></p> <ul> <li>\u2705 Make sure to screw until the Standoff is properly tightened into the hole.</li> <li>\u274c Do not stop screwing before.</li> </ul> <p></p> <p>Locate the Raspberry Pi Camera HQ</p> <p></p> <p>Remove the lens cap Raspberry Pi Camera HQ.</p> <p></p> <p>Warning</p> <p>Make sure your camera lens is clean. If it is not, gently wipe using cotton swab for this task.</p> <p></p> <p>Place the Raspberry Pi Camera HQ on top of the four Standoffs installed on Part B.</p> <p>\ud83d\udfe3Ensure correct orientation of the Raspberry Pi Camera HQ. The black connector where the Ribbon Cable was removed is on the same side as the \ud83d\udfe2slot circled in green</p> <p></p> <p>\ud83d\udfe0 A4. Screw M2.5X5mm CHC - SS</p> <p></p> <p>\ud83d\udfe1 B3. Allen key 2mm</p> <p></p> <p>Use the allen key and tighten the Raspberry Pi Camera to the Standoffs.</p> <p></p> <p>The result should be similar to the picture.</p> <p>Note</p> <p>\ud83c\udfac Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-11-mount-the-linear-stepper-motor-on-part-e","title":"Chapter 11: Mount the Linear Stepper Motor on Part E","text":"<p>Locate the Stepper Motors</p> <p>Warning</p> <p>Avoid touching the metal rods on the Stepper Motors</p> <p>Info</p> <p>You can touch the \ud83d\udfe3 gold stands</p> <p></p> <p></p> <p>\ud83d\udfe1 A5. Screw M2.5X10mm CHC - SS</p> <p></p> <p>\ud83d\udfe1 B3. Allen key 2mm</p> <p></p> <ul> <li>\ud83d\udd34 Lay the Part E down and make sure the pockets in these holes are   facing upwards.</li> <li>\ud83d\udfe3 Locate the four holes on Part E and place four M2 Screws in the holes.</li> </ul> <p></p> <p>Attach the stepper motors to the screws we have just placed with the \ud83d\udd34 pockets positioned on opposite to the cabling.</p> <p>The result should be similar to the picture.</p> <p></p> <p>Use the 2mm allen key to fix the Stepper Motors.</p> <p>The result should be similar to that picture.</p> <p></p> <p>The result should be similar to the picture.</p> <p></p> <p>Repeat the process on the other side with the other Stepper Motor.</p> <p></p> <p>Repeat the process on the other side with the other Stepper Motor.</p> <p></p> <p>The result should be similar to the picture.</p> <p>Note</p> <p>\ud83c\udfac Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-12-mount-the-led-on-part-g","title":"Chapter 12: Mount the\u00a0LED\u00a0on\u00a0Part G","text":"<ul> <li>Locate the\u00a0LED\u00a0and\u00a0LED cable\u00a0in Bag K.</li> <li>\ud83d\udfe3\u00a0The LED will go on the end where\u00a0the white plastic connector is\u00a0smallest.</li> </ul> <p>Insert the\u00a0LED into the LED cable.</p> <p></p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p></p> <p>Locate part\u00a0G.</p> <p></p> <p>\ud83d\udfe3\u00a0Locate the LED hole on\u00a0Part G.</p> <p></p> <p>We\u00a0will\u00a0now\u00a0place\u00a0the\u00a0LED\u00a0into\u00a0the\u00a0slot\u00a0on part\u00a0G.</p> <p></p> <p>Warning</p> <p>Gently push the LED into the LED\u00a0hole located on Part\u00a0G. It should be a snug fit.</p> <p></p> <p>The result should be similar to the\u00a0picture.</p> <p>Info</p> <p>\ud83c\udfac\u00a0Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-13-mount-the-peristaltic-pump-on-part-o-and-part-l","title":"Chapter 13: Mount the\u00a0Peristaltic Pump\u00a0on\u00a0Part O and\u00a0Part L","text":"<ul> <li>Locate the\u00a0Kamoer Peristaltic pump\u00a0from the\u00a0Bag F.</li> <li>\ud83d\udfe3\u00a0Put aside the\u00a0tubing contained in\u00a0the little bag.</li> </ul> <p>\ud83d\udfe2\u00a0Insert the cable of the\u00a0Peristaltic Pump\u00a0into the hole on\u00a0Part O\u00a0and\u00a0then insert the motor block assembly\u00a0of the pump into it.</p> <p>Warning</p> <p>\ud83d\udc41 Ensure the correct orientation of\u00a0Part O\u00a0and the\u00a0Peristaltic Pump</p> <p></p> <p>\ud83d\udfe1\u00a0A5. Screw\u00a0M2.5X10mm\u00a0CHC - SS</p> <p></p> <p>\ud83d\udfe1\u00a0B3. Allen key 2mm B3</p> <p></p> <p>\ud83d\udfe2\u00a0Insert the two\u00a0M2.5X10mm\u00a0in the\u00a0two holes.</p> <p></p> <p>Screw the two\u00a0M2.5X10mm\u00a0into the\u00a0two holes.</p> <p></p> <p></p> <p>\ud83d\udd34\u00a0Lay\u00a0the\u00a0Part\u00a0L\u00a0down and make\u00a0sure the pockets in these holes are\u00a0facing upwards.</p> <p></p> <ul> <li>Place\u00a0the\u00a0Peristaltic Pump underneath part L, ensuring the\u00a0correct orientation of these two parts.</li> <li>\ud83d\udd34 Insert the Peristaltic Pump into\u00a0the allocated slot in\u00a0Part L.</li> </ul> <p></p> <p>Insert the\u00a0Peristaltic Pump\u00a0into the\u00a0allocated slot in\u00a0Part L.</p> <p></p> <p>Insert the\u00a0Peristaltic Pump\u00a0into the\u00a0allocated slot in\u00a0Part L.</p> <p></p> <ul> <li>Lay the assembly down.</li> <li>\ud83d\udd34\u00a0Locate the\u00a0four different holes.</li> </ul> <p></p> <p>\ud83d\udfe1\u00a0A5.Screw\u00a0M2.5X10mm\u00a0CHC - SS</p> <p></p> <p>\ud83d\udfe1\u00a0B3.Allen key 2mm</p> <p></p> <p>Screw the four M2.5X10mm in the\u00a0located\u00a0holes\u00a0attaching\u00a0the\u00a0Part\u00a0O\u00a0to\u00a0the\u00a0Part L Peristaltic Pump.</p> <p> The result should be similar to the\u00a0picture.</p> <p>Info</p> <p>We will use this part in the next step.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-14-spiral-wrap-the-led-and-peristaltic-pump-cabling","title":"Chapter 14: Spiral wrap the LED and Peristaltic Pump cabling","text":"<ul> <li>Locate the LED and housing, along\u00a0with the pump and housing.</li> <li>\ud83d\udfe3\u00a0Locate the\u00a0spiral wrap\u00a0from\u00a0bag K.</li> </ul> <ul> <li>Spiral wrap both sets of cables\u00a0together.</li> <li>There should be 4 cm (1.5 inches)\u00a0between\u00a0the\u00a0connectors\u00a0and\u00a0the\u00a0start\u00a0of the spiral wrap.</li> </ul> <p>Continue wrapping around the\u00a0cables until you have used all of the\u00a0spiral wrap, leaving small or no gaps.</p> <p>Info</p> <p>The result should look the same as\u00a0the picture.</p> <p></p> <p>Info</p> <p>The result should look the same as\u00a0the picture.</p> <p>Note</p> <p>\ud83c\udfac\u00a0Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-15-attaching-the-stepper-motors-to-the-raspberry-pi-camera","title":"Chapter 15: Attaching the\u00a0Stepper Motors\u00a0to the\u00a0Raspberry Pi Camera","text":"<p>Locate the Stepper Motors with\u00a0mount, and the Raspberry Pi\u00a0Camera.</p> <p> Feed the Stepper Motor cables into\u00a0the\u00a0slots\u00a0either\u00a0side\u00a0of\u00a0the\u00a0Raspberry\u00a0Pi Camera.</p> <p>Warning</p> <p>Make sure the orientation is\u00a0correct and matches the picture.</p> <p> Feed the Stepper Motor cables into\u00a0the\u00a0slots\u00a0either\u00a0side\u00a0of\u00a0the\u00a0Raspberry\u00a0Pi Camera.</p> <p>Warning</p> <p>Make sure the orientation is\u00a0correct and matches the picture.</p> <p>Then\u00a0insert\u00a0the\u00a0cylindrical\u00a0parts\u00a0of\u00a0the\u00a0Stepper Motor into the slots.</p> <p></p> <p>Feed the Stepper Motor cables into\u00a0the\u00a0slots\u00a0either\u00a0side\u00a0of\u00a0the\u00a0Raspberry\u00a0Pi Camera.</p> <p>Warning</p> <p>Make sure the orientation is\u00a0correct and matches the picture.</p> <p>Then\u00a0insert\u00a0the\u00a0cylindrical\u00a0parts\u00a0of\u00a0the\u00a0Stepper Motor into the slots.</p> <p>Note</p> <p>The\u00a0result\u00a0should\u00a0be\u00a0the\u00a0same\u00a0as\u00a0the\u00a0picture.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-16-connecting-the-raspberry-pi-camera-to-the-raspberry-pi-hat","title":"Chapter 16: Connecting the\u00a0Raspberry Pi Camera\u00a0to the\u00a0Raspberry Pi HAT","text":"<ul> <li>We will need the\u00a0Raspberry Pi HAT with housing and Ribbon Cable along\u00a0\\   with the\u00a0Raspberry Pi Camera with\u00a0Stepper Motors and housing.</li> <li>We will be connecting the\u00a0\ud83d\udfe2Ribbon\u00a0Cableto the\u00a0\ud83d\udfe1black\u00a0Raspberry Pi Camera\u00a0connector\u00a0that we removed\u00a0it from earlier.</li> </ul> <p>Gently feed the\u00a0Ribbon Cable\u00a0into the\u00a0port of the\u00a0Camera.</p> <p>Warning</p> <p>\ud83d\udc41 Ensure the correct orientation of\u00a0the\u00a0Ribbon Cable\u00a0with the blue end\u00a0facing upwards.</p> <p> \ud83d\udd34\u00a0Press down on the black\u00a0connector on the Raspberry Pi\u00a0camera board once the Ribbon\u00a0Cable is in position.</p> <p> \ud83d\udd34\u00a0B1.Small flat screwdriver 2mm</p> <p></p> <ul> <li>Now we will plug in the\u00a0Stepper\u00a0Mounts to the\u00a0HAT.</li> <li>\ud83d\udd34The cables for the\u00a0Stepper Mounts\u00a0will be plugged into the\u00a0HAT\u00a0\ud83d\udfe3here.</li> </ul> <p>Warning</p> <p>Hold tight, a specific order is\u00a0required.</p> <p></p> <p>Starting with the\u00a0red cable, insert the\u00a0cable in the far left port and tighten\u00a0the screw situated above the port.</p> <p>Note</p> <p>The result should look the same as\u00a0the picture.</p> <p></p> <p>Repeat this process with the order\u00a0pictured here from left to right:\u00a0\ud83d\udd34 Red\u00a0\ud83d\udfe1 Yellow\u00a0\ud83d\udd35 Blue\u00a0\u26ab Black.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-17-connect-the-led-and-peristaltic-pump-to-the-raspberry-pi","title":"Chapter 17: Connect the\u00a0LED\u00a0and\u00a0Peristaltic Pump\u00a0to the\u00a0Raspberry Pi","text":"<p>We will now be connecting the LED\u00a0and Peristaltic Pump with the\u00a0Raspberry Pi HAT\u00a0and\u00a0Camera.</p> <p></p> <p>Place the LED housing onto the\u00a0Stepper Mounts.</p> <p>Warning</p> <p>\ud83d\udc41 Ensure correct orientation of both\u00a0\ud83d\udfe3 parts by looking at the\u00a0precut holes.</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>Now we will plug in the\u00a0LED and\u00a0Stepper Mount\u00a0cables to the\u00a0Raspberry Pi.</p> <p></p> <p>Feed the area of cabling that is not\u00a0covered by the\u00a0spiral wrap\u00a0through\u00a0the two holes to start. Then thread\u00a0through to the\u00a0spiral wrap\u00a0so that it\u00a0matches the picture.</p> <p></p> <p>We will now plug the cables into the\u00a0correct ports.</p> <p></p> <p>\ud83d\udfe3\u00a0The four wires (\ud83d\udd34 Red\u00a0\ud83d\udd35 Blue \ud83d\udfe2 Green \u26ab Black) enter the side port on the\u00a0Raspberry Pi HAT.</p> <p></p> <p>\ud83d\udd34 The two wires (LED) enter on the\u00a0port on top of the Raspberry Pi HAT.</p> <p></p> <p>The result should be similar to the\u00a0picture.</p> <p>Note</p> <p>We will use this assembly in the next\u00a0step.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-18-connect-the-dc-power-jack-to-the-raspberry-pi","title":"Chapter 18: Connect the\u00a0DC Power Jack\u00a0to the\u00a0Raspberry Pi","text":"<ul> <li>\ud83d\udfe2\u00a0Locate the\u00a0DC Power Jack</li> <li>We will plug the DC Power Jack\u00a0into the Raspberry Pi via the \ud83d\udd35 blue port.</li> </ul> <p>\ud83d\udd34\u00a0B1.Small flat screwdriver 2mm</p> <p></p> <ul> <li>Insert the \ud83d\udd34 red cable of the DC\u00a0Power Jack into the left side of the\u00a0blue port.</li> <li>Tighten the screw above.</li> </ul> <p></p> <ul> <li>Insert the \u26ab black cable of the DC\u00a0Power\u00a0Jack\u00a0into\u00a0the\u00a0right\u00a0side\u00a0of\u00a0the\u00a0blue port.</li> <li>Tighten the screw above.</li> </ul> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p>Note</p> <p>We will use this assembly in the next\u00a0step.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-19-your-planktoscope-starts-to-take-shape","title":"Chapter 19: Your PlanktoScope starts to take shape","text":"<p>Locate Part I\u00a0and\u00a0Part H.</p> <p></p> <ul> <li>Slot\u00a0Part H\u00a0into\u00a0Part I.</li> <li>\ud83d\udfe3\u00a0Note the orientation.\u00a0Part H\u00a0goes\u00a0into\u00a0Part Iat the end with the\u00a0rectangular slot (as opposed to the\u00a0rectangle with bulbous hole).</li> <li>\ud83d\udfe1\u00a0Also, the deeper slots on\u00a0part H\u00a0should be on the upper side.</li> </ul> <p></p> <p>\ud83d\udd34 Slot the\u00a0Peristaltic Pump\u00a0above\u00a0the\u00a0LED.</p> <p></p> <p>Note</p> <p>The result should be the same as the\u00a0picture.</p> <p></p> <p>Warning</p> <p>\ud83d\udc41 Ensure the correct orientation of\u00a0the housing and the\u00a0Peristaltic Pump.</p> <p></p> <p>At the other end, slot the\u00a0DC Power\u00a0Jack\u00a0housing adjacent to the\u00a0Raspberry Pi.</p> <p> </p> <p>Rotate so that the DC Power Jack is\u00a0facing upwards. We will now slot the Raspberry Pi onto\u00a0the rest of the housing.</p> <p></p> <p>Info</p> <p>The result should be similar to that\u00a0picture.</p> <p>Note</p> <p>\ud83c\udfac\u00a0Store this assembly for later.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-20-inserting-screws","title":"Chapter 20: Inserting screws","text":"<p>\ud83d\udfe3 We\u00a0will\u00a0now\u00a0insert\u00a0eight\u00a0M3\u00a0screws\u00a0to fasten the housing together.</p> <p>Note</p> <p>\ud83c\udfac\u00a0Store this assembly for later.</p> <p></p> <p>\ud83d\udd34\u00a0A6. Screw M3X12mm BHC - SS</p> <p></p> <p>\ud83d\udfe1\u00a0B3. Allen key 2mm</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>We will now turn over the\u00a0PlanktoScope\u00a0and\u00a0repeat\u00a0the\u00a0process\u00a0for the underside.</p> <p></p> <p>\ud83d\udfe3\u00a0Insert eight more M3 screws on the\u00a0underside.</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>Now turn the PlanktoScope on its side.</p> <p></p> <p></p> <p>Warning</p> <p>\ud83d\udc41 Ensure the orientation of your\u00a0PlanktoScope and\u00a0Part K\u00a0matches\u00a0the picture.</p> <p></p> <p>Slot\u00a0Part K\u00a0onto the rest of the\u00a0PlanktoScope.</p> <p>Warning</p> <p>\ud83d\udfe2\u00a0Ensure the correct orientation. The\u00a0result should look the same at the\u00a0picture.</p> <p></p> <p>Content of\u00a0Bag A: \ud83d\udd34\u00a0A6. Screw M3X12mm BHC - SS</p> <p></p> <p>Content of\u00a0Bag B: \ud83d\udfe1\u00a0B3. Allen key 2mm</p> <p></p> <p>\ud83d\udfe3\u00a0Insert eight more M3 screws on the\u00a0side to hold\u00a0Part K\u00a0in place.</p> <p></p> <p></p> <p>We will now place\u00a0Part J\u00a0into position\u00a0as the housing for the side.</p> <p>Warning</p> <p>\ud83d\udc41 Ensure your PlanktoScope matches\u00a0the orientation in the picture.</p> <p></p> <p>\ud83d\udfe2 Place\u00a0Part K\u00a0onto the rest of the\u00a0PlanktoScope and note the position\u00a0of the cutout.</p> <p></p> <p>Content of\u00a0Bag A: \ud83d\udd34\u00a0A6. Screw M3X12mm BHC - SS</p> <p></p> <p>Content of\u00a0Bag B: \ud83d\udfe1\u00a0B3. Allen key 2mm</p> <p></p> <p>\ud83d\udfe3\u00a0Insert eight more M3 screws on the\u00a0underside</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p></p> <p>Content of\u00a0Bag A: \ud83d\udfe1\u00a0A5. Screw M2.5X10mm CHC - SS</p> <p></p> <p>Place\u00a0the\u00a0M2.5\u00a0screw\u00a0through\u00a0Part\u00a0N. It\u00a0will\u00a0act\u00a0as\u00a0a\u00a0cover\u00a0for\u00a0the\u00a0electrical\u00a0inputs.</p> <p></p> <ul> <li>Place the\u00a0cover\u00a0over the electrical\u00a0inputs on the PlanktoScope.</li> <li>\ud83d\udfe3 The screw will enter the hole\u00a0located here.</li> </ul> <p></p> <p>Using the allen key, tighten the screw\u00a0so that it is possible to move the\u00a0cover with light force.</p> <p></p> <p>Info</p> <p>The\u00a0result\u00a0should\u00a0be\u00a0the\u00a0same\u00a0as\u00a0the\u00a0picture.</p>"},{"location":"setup/hardware/v2.5/assembly/#chapter-21-insert-the-tubing-in-the-peristaltic-pump","title":"Chapter 21: Insert the tubing in the\u00a0Peristaltic Pump","text":"<ul> <li>Orientate\u00a0your\u00a0PlanktoScope\u00a0so\u00a0that\u00a0it\u00a0matches the picture.</li> <li>Twist off the orange top of the\u00a0Peristaltic\u00a0pump\u00a0in\u00a0an\u00a0anti-clockwise\u00a0direction.</li> </ul> <p>You can now remove the Peristaltic\u00a0Pump housing and\u00a0\ud83d\udfe2 Rotor.</p> <p></p> <p>You can now remove the Peristaltic\u00a0Pump housing and\u00a0\ud83d\udfe2 Rotor.</p> <p></p> <p>\ud83d\udd34 Locate the\u00a0Tube\u00a0for the Peristaltic\u00a0Pump in\u00a0Bag F\u00a0and remove it from the\u00a0bag.</p> <p>Warning</p> <p>The tips of the Tubing that are\u00a0covered by black rubber are very\u00a0delicate and easily broken.</p> <p></p> <p>Insert the first plastic arch of the\u00a0Tube\u00a0into the slot on the Peristaltic Pump\u00a0\\ housing.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p> </p> <p>Insert the\u00a0Rotor\u00a0into the housing\u00a0ensuring the correct orientation. The\u00a0hole in the centre should be visible on\u00a0the underside.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>Insert the\u00a0Rotor\u00a0into the housing.\u00a0Then, thread the\u00a0Tube\u00a0around the\u00a0Rotor\u00a0and insert the other plastic\u00a0arch into the second slot.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <ul> <li>Thread the\u00a0Tube\u00a0around around the\u00a0Rotor\u00a0and insert the other plastic\u00a0arch into the second slot.</li> <li>This will require stretching the\u00a0Tube\u00a0slightly.</li> </ul> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>Place the Peristaltic Pump housing\u00a0back onto the PlanktoScope.</p> <p></p> <p>Achieve the angle shown in the\u00a0picture between the Peristaltic Pump\u00a0housing and PlanktoScope main\u00a0body. Then, press and twist in a\u00a0clockwise direction.</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <ul> <li>\ud83d\udfe3\u00a0Gently remove the black rubber\u00a0covers for the Peristaltic Pump\u00a0connectors by pinching the very tip\u00a0and pulling away.</li> <li>Once complete, locate\u00a0Bag D\u00a0which\u00a0contains tubing.</li> </ul> <p></p> <p>Push the small piece of tubing from\u00a0Bag D\u00a0over the left-side connector of\u00a0the\u00a0Peristaltic Pump.</p> <p></p> <p>Place the long piece of tubing from\u00a0Bag D\u00a0over the right-side connector\u00a0of the\u00a0Peristaltic Pump.</p> <p></p> <p>Insert the connector from\u00a0Bag D\u00a0into\u00a0the other end of the\u00a0small piece of\u00a0tubing.</p> <p></p> <p></p> <p>Orientate\u00a0Part P\u00a0so that the magnets\u00a0are face-down on the left-hand side.</p> <p></p> <p>Place Part P over the magnets\u00a0adjacent to the\u00a0Peristaltic Pump.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p>\ud83d\udd34 From\u00a0Bag M, Place the\u00a0light blue Test Tube in the hole adjacent to the\u00a0Peristaltic Pump.</p> <p></p> <p>Place the\u00a0\ud83d\udd35 dark blue Test Tube\u00a0into\u00a0the hole situated outside of the\u00a0PlanktoScope.</p> <p></p> <p>\ud83d\udfe2\u00a0Insert the other end of the long\u00a0piece of tubing into the\u00a0\ud83d\udd35 dark blue Test Tube. This will serve as the waste container.\u00a0The result should look the same as\u00a0the picture.</p> <p></p> <p> </p> <ul> <li>Locate Part\u00a0C</li> <li>Locate\u00a025\u00a0mm\u00a0camera\u00a0lens\u00a0and\u00a0Lock Ring\u00a0from\u00a0Bag J.</li> <li>25MM is printed on the lens.</li> </ul> <p> </p> <ul> <li>Remove the plastic lens cap.</li> <li>Slot\u00a0the\u00a025\u00a0mm\u00a0camera\u00a0lens into\u00a0Part C.</li> </ul> <p>Info</p> <p>The magnets are raised on the\u00a0side where the lens lays flat.</p> <p>Warning</p> <p>Try not to touch the lens</p> <p>Screw the\u00a0Lock Ring\u00a0onto the lens,\u00a0flat-side down.</p> <p> </p> <ul> <li>Locate Part\u00a0D.</li> <li>Locate\u00a016\u00a0mm\u00a0camera\u00a0lens\u00a0and\u00a0Lock\u00a0Ring\u00a0from\u00a0Bag J.</li> <li>16MM is printed on the lens.</li> </ul> <p> </p> <ul> <li>Remove the plastic lens cap.</li> <li>Slot\u00a0the\u00a016\u00a0mm\u00a0camera\u00a0lens into Part\u00a0D.</li> </ul> <p>Info</p> <p>The\u00a0magnets\u00a0are\u00a0indented\u00a0on\u00a0the\u00a0side that the lens lays flat.</p> <p>Warning</p> <p>Try not to touch the lens</p> <p>Screw the\u00a0Lock Ring\u00a0onto the lens,\u00a0flat-side down.</p> <p>The result should be similar to that\u00a0picture.</p> <p> </p> <p>Place\u00a0both\u00a0Lenses (C\u00a0and\u00a0D)\u00a0together\u00a0so that they flat together and both\u00a0lenses are facing each other.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p> </p> <p>Place\u00a0the\u00a0Lenses\u00a0(both\u00a0C\u00a0and\u00a0D)\u00a0into\u00a0position, adjacent to the camera.</p> <p>The orientation of your PlanktoScope\u00a0and Lenses should match the\u00a0pictures.</p> <p></p> <ul> <li>Once\u00a0together,\u00a0place\u00a0the\u00a0lenses\u00a0(both\u00a0C and D) into position, adjacent to\u00a0the camera.</li> <li>Part\u00a0C\u00a0/\u00a025mm\u00a0lens\u00a0should\u00a0be\u00a0furthest\u00a0from the pump (orange piece).</li> </ul> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p></p> <p></p> <p>Info</p> <p>The Fluidic Path will have a\u00a0cardboard protector.</p> <p>Please take extra precaution while handling\u00a0this\u00a0part\u00a0and\u00a0avoid\u00a0touching\u00a0the glass element of the piece.</p> <p>Warning</p> <p>The Fluidic Path is very delicate.</p> <p></p> <p>Place the Tube Clamp over the long\u00a0piece\u00a0of\u00a0tube\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0Fluidic\u00a0Path.</p> <p></p> <p>Place the white clamp over the long\u00a0piece\u00a0of\u00a0tube\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0Fluidic Path.</p> <p>Info</p> <p>The result should look the same as\u00a0the picture.</p> <p></p> <p>Press down on the Tube Clamp so\u00a0that it clicks into place with just one\u00a0click.</p> <p>Info</p> <p>The result should look the same as\u00a0the picture.</p> <p></p> <p>Insert\u00a0a\u00a0small\u00a0plastic\u00a0Connector\u00a0into\u00a0the\u00a0end\u00a0of\u00a0the\u00a0tubing,\u00a0below\u00a0the\u00a0Tube\u00a0Clamp.</p> <p></p> <p>Make sure the tubing is over the\u00a0Connector.</p> <p>Info</p> <p>The result should look the same as\u00a0the picture.</p> <p></p> <p>Remove the cardboard protector\u00a0from the\u00a0Fluidic Path.</p> <p></p> <p>Warning</p> <p>A reminder, the glass part of the\u00a0Fluidic\u00a0Path\u00a0is\u00a0very\u00a0delicate.\u00a0Please\u00a0try\u00a0not to touch it.</p> <p></p> <p>Place another Connector at the end\u00a0of the tubing.</p> <p></p> <p>The\u00a0result\u00a0should\u00a0be\u00a0the\u00a0same\u00a0as\u00a0the\u00a0picture.</p> <p></p> <p>\u26a0 Gently place the Fluidic Path in\u00a0the designated indentation on\u00a0Part F.</p> <p>Warning</p> <p>Do not touch the glass.\u00a0</p> <ul> <li>You may have to slightly stretch the\u00a0tubing to get the Fluidic Path into\u00a0position.</li> <li>The\u00a0result\u00a0should\u00a0be\u00a0the\u00a0same\u00a0as\u00a0the\u00a0picture.</li> </ul> <p></p> <p>If you have tape available, place a\u00a0small\u00a0piece\u00a0at\u00a0the\u00a0the\u00a0bottom\u00a0of\u00a0Part F so that the tubing remains fixed in\u00a0its position.</p> <p>Avoid placing tape over the glass.</p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p> </p> <p>To\u00a0insert\u00a0the\u00a0syringe,\u00a0place\u00a0finger\u00a0and\u00a0thumb either side of part F where\u00a0green circle is located. This ensures\u00a0the tubing does not rotate while you\u00a0twist the syringe into position in a\u00a0clockwise direction.</p> <p></p> <p>Info</p> <p>The result should be similar to the\u00a0picture.</p> <p> </p> <ul> <li>Place the Fluidic Path into position\u00a0between the mount and the\u00a0Peristaltic Pump.</li> <li>Connect the magnets to face each\u00a0other.</li> </ul> <p></p> <p>The result should look the same as\u00a0the pictures.</p> <p> </p> <ul> <li>\ud83d\udfe2 Connect the Fluidic Path to the\u00a0Peristaltic Pump by twisting the two\u00a0connectors together.</li> <li>The\u00a0result\u00a0should\u00a0be\u00a0the\u00a0same\u00a0as\u00a0the\u00a0picture.</li> </ul>"},{"location":"setup/hardware/v2.5/assembly/#build-complete","title":"Build complete! \ud83d\udcaf \ud83d\udcab","text":""},{"location":"setup/hardware/v2.5/assembly/#next-steps","title":"Next steps","text":"<p>Next, you will need to set up the PlanktoScope software on the micro-SD card of your PlanktoScope's Raspberry Pi.</p>"},{"location":"setup/hardware/v2.5/kit/","title":"Kit Production","text":""},{"location":"setup/hardware/v2.5/kit/#mechanical-structure","title":"Mechanical Structure","text":"<p>CNC (computer numerical control) milling machines are used to fabricate parts with precise dimensions and shapes. The configuration of the feed rate and diameter plays a crucial role in the machining process and can significantly affect the quality and efficiency of the production of a workpiece.</p> <p></p>"},{"location":"setup/hardware/v2.5/kit/#manufacturing-files","title":"Manufacturing files","text":"Files Description PlanktoScope-Case.dxf PlanktoScope Case export for CNC Milling"},{"location":"setup/hardware/v2.5/kit/#tools","title":"Tools","text":"Tool Specification CNC Milling machine minimum traverse path at a minimum size of 600 mm to 1000 mm End Mill \u00d8 6mm End Mill \u00d8 3mm End Mill \u00d8 2mm End Mill \u00d8 1mm"},{"location":"setup/hardware/v2.5/kit/#material","title":"Material","text":""},{"location":"setup/hardware/v2.5/kit/#wood","title":"Wood","text":"<p>Valchromat is a wood-based composite material made from recycled wood fibers and colored with natural dyes. It is known for its durability, resistance to moisture and decay, and ability to be machined and finished in a similar way to solid wood. Here are some of the key characteristics of valchromat:</p> <ul> <li> <p>Durability: Valchromat is a highly durable material that is resistant to moisture, decay, and termites, making it ideal for use in outdoor or high-moisture environments.</p> </li> <li> <p>Strength: Valchromat has a high mechanical strength, making it suitable for use in structural applications such as flooring, furniture, and doors.</p> </li> <li> <p>Machinability: Valchromat can be machined using traditional woodworking tools, such as saws, routers, and drill bits. It can also be finished using sanding, staining, and painting techniques.</p> </li> <li> <p>Sustainability: Valchromat is made from recycled wood fibers, which makes it a more sustainable option compared to traditional wood products. It is also produced using an eco-friendly manufacturing process that generates zero emissions.</p> </li> <li> <p>Versatility: Valchromat is available in a variety of colors, including shades of red, yellow, green, blue, and black, making it suitable for a wide range of applications and design projects.</p> </li> </ul> <p></p> <ul> <li> <p>When compared to conventional MDF wood, valchromat has a number of advantages. It is more durable and resistant to moisture and decay, making it a better choice for use in outdoor or high-moisture environments. Valchromat is also more sustainable, as it is made from recycled wood fibers.</p> </li> <li> <p>Valchromat can be processed using a CNC router in a similar way to MDF wood. However, it is important to consider the specific characteristics of valchromat when setting up the CNC router, such as the appropriate cutting speed and feed rate.</p> </li> </ul> <p>For the specific use case of the PlanktoScope Case, valchromat was used with a thickness of 8mm. This thickness may be suitable for a variety of applications, depending on the specific requirements and design of the project.</p> <p>In summary, valchromat is a durable, strong, and versatile wood-based composite material that can be machined and finished in a similar way to solid wood. It is available in a variety of colors and is a more sustainable alternative to traditional wood products. When processed using a CNC router, it is important to consider the specific characteristics of valchromat in order to achieve the desired results.</p>"},{"location":"setup/hardware/v2.5/kit/#finishing","title":"Finishing","text":"<p>Rubio Monocoat Plus is a wood finishing product that is designed to provide a durable, natural-looking finish to wood surfaces. It is made from plant-based oils and pigments, which give it a unique, transparent finish that enhances the natural beauty of the wood.</p> <p>One of the key features of Rubio Monocoat Plus is its versatility and ease of use. It can be applied to a wide range of wood species, including hardwoods and softwoods, and can be used on both indoor and outdoor surfaces. It is also easy to apply, with a simple one-coat application process that allows users to achieve a professional-grade finish in a matter of hours.</p> <p>Rubio Monocoat Plus is also environmentally friendly, with a low VOC (volatile organic compound) content and a biodegradable formula. This makes it a popular choice for those who are looking for a sustainable and eco-friendly wood finishing solution.</p> <p>We use Rubio Monocoat Plus as a finishing product for Valchromat.</p>"},{"location":"setup/hardware/v2.5/kit/#cnc-workflow","title":"CNC workflow","text":"<p>Here is a step-by-step guide on how to configure the feed rate and the diameter of the end mill of a CNC milling machine for the production of a workpiece, using the specified tools and configuration:</p> <ol> <li> <p>Select the appropriate end mill: The end mill should be selected based on the material and shape of the workpiece, as well as the desired level of precision. For this specific production, the following end mills will be used:</p> </li> <li> <p>6mm end mill for straight flats</p> </li> <li>2mm end mill for inner contours</li> <li> <p>1mm end mill for small holes</p> </li> <li> <p>Determine the feed rate: The feed rate is the speed at which the end mill moves along the surface of the workpiece and is usually measured in millimeters per minute (mm/m). The appropriate feed rate will depend on the diameter of the end mill and the material and thickness of the workpiece. For this specific production, the following feed rates will be used:</p> </li> <li> <p>1500mm/min for 1-2mm end mills</p> </li> <li>2500mm/min for 3mm end mills</li> <li> <p>3500mm/min for 6mm end mills</p> </li> <li> <p>Load the end mill: Once the appropriate end mill has been selected, it can be loaded onto the spindle of the CNC milling machine.</p> </li> <li> <p>Set the workpiece: The workpiece should be securely clamped onto the table of the CNC milling machine.</p> </li> <li> <p>Set the machine parameters: The feed rate and end mill diameter should be entered into the machine's control panel or included in the machining program.</p> </li> <li> <p>Begin machining: The machining process should be carried out in the following sequence:</p> </li> <li> <p>Mill the screw holes with a 2mm end mill and then with a 3mm end mill</p> </li> <li>Mill the corners with a 2mm end mill</li> <li>Mill everything else with a 3mm end mill</li> </ol> <p>By following these steps, you can properly configure the feed rate and the diameter of the end mill of a CNC milling machine for the production of a workpiece. It is important to follow the manufacturer's recommendations and guidelines for the specific CNC milling machine being used, as well as to use proper safety measures while operating the machine.</p> <p></p>"},{"location":"setup/hardware/v2.5/kit/#finnish-of-the-case-parts","title":"Finnish of the case parts","text":""},{"location":"setup/hardware/v2.5/kit/#requirements-for-case-parts","title":"Requirements for case parts","text":""},{"location":"setup/hardware/v2.5/kit/#case-tools","title":"Case tools","text":"<ul> <li>Hammer</li> <li>Air Compressor</li> <li>Rubber gloves</li> <li>Paper carpet pad</li> <li>Clean piece of cotton fabric</li> <li>Support material for drying the parts</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#case-part-parts","title":"Case part parts","text":"<ul> <li>all case parts</li> <li>Rubio Monocoat Oil Plus 2C</li> <li>Rubio Monocoat Accelerator Component B</li> <li>Magnets</li> <li>Square nuts</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#clean","title":"Clean","text":""},{"location":"setup/hardware/v2.5/kit/#stir","title":"Stir","text":""},{"location":"setup/hardware/v2.5/kit/#apply","title":"Apply","text":""},{"location":"setup/hardware/v2.5/kit/#dry","title":"Dry","text":""},{"location":"setup/hardware/v2.5/kit/#inserting-the-screws","title":"Inserting the screws","text":""},{"location":"setup/hardware/v2.5/kit/#inserting-the-magnets","title":"Inserting the magnets","text":""},{"location":"setup/hardware/v2.5/kit/#package-housing-part","title":"Package Housing part","text":""},{"location":"setup/hardware/v2.5/kit/#planktoscope-hat","title":"PlanktoScope Hat","text":"<p>Welcome to the PCB production manual for the PlanktoScope Hat!</p> <p> </p> <p>A PCB (printed circuit board) is a crucial component of many electronic devices, providing a platform for connecting and mounting electronic components. The PCB production process involves several steps, including designing the PCB layout, fabricating the PCB, and assembling the electronic components onto the PCB.</p> <p>The raw materials used in PCB production include copper sheets, fiberglass sheets, and various chemicals for etching and plating. These materials are used to create the circuitry patterns on the PCB.</p> <p>There are two main types of electronic components that can be mounted onto a PCB: thru-hole components and surface mount components. Thru-hole components have leads that are inserted through holes in the PCB and soldered to the other side, while surface mount components are soldered directly onto the surface of the PCB. The choice between thru-hole and surface mount components depends on the specific requirements of the device being produced.</p> <p>Note</p> <p>Please note that this document describes a two-part production of the PCB. To reduce costs, the through hole components are assembled manually as described here. Depending on your budget and the services offered by the manufacturing company, this can also be ordered in the production of the PCB.</p>"},{"location":"setup/hardware/v2.5/kit/#manufacturing-files_1","title":"Manufacturing files","text":"Files Description Planktoscope-Hat-gerbers.zip The exported Gerber files for PCB fabrication Planktoscope-Hat-bom.csv The list of used SMD components Planktoscope-Hat.pdf The SMD assembly footprints Planktoscope-Hat-PnP-front.txt Pick-and-place machine instructions"},{"location":"setup/hardware/v2.5/kit/#pcb-manufacturing-process","title":"PCB manufacturing process","text":""},{"location":"setup/hardware/v2.5/kit/#placing-an-order","title":"Placing an order","text":"<p>To order a PCB board including assembly, follow these steps:</p> <ul> <li>Select a manufacturing company based on your local availability, budget, delivery dates, and services such as assembly.</li> </ul> <p>Note</p> <p>If you need assistance with selecting a company, contact us. We can provide you with a list of companies we have worked with in the past.</p> <ul> <li>Create a customer account if you do not already have one. Ensure to specify the correct tax, contact, and delivery information.</li> </ul> <p>Warning</p> <p>It is especially crucial to provide correct contact information, including a phone number if possible. Most manufacturing companies provide excellent customer service and will be happy to assist you during the order process.</p> <ul> <li>Create a project and select the quantity of PCB boards you need for production.</li> <li>Configure the order based on the values specified in this document.</li> <li>Upload the bill of material (BOM) and validate the component availability.</li> </ul> <p>Warning</p> <p>It is crucial that you use the exact IC's like the RTC and EEPROM we specified. If a component is \"end of life\" (EOL), do not hesitate to contact us so we can help you find an alternative solution. For all other components, you are welcome to choose alternatives providet by the manufacturing company.</p> <p>Info</p> <p>The component costs will now be calculated, and the price should be displayed.</p> <ul> <li>Upload the gerber files provided as a zip file in the repository under the following link.</li> <li>Upload the assembly instructions provided as a zip file in the repository under the following link.</li> <li>Check that there are no missing references in your order configuration.</li> <li>Place the order based on your delivery requirements.</li> <li>Select a payment method and complete the order process.</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#configuration","title":"Configuration","text":"<p>The following configuration parameters can be used for the production of the PCB.</p> <p>Info</p> <p>Please note that the naming may vary depanding on the manufacturing company you used and are only intended to provide you with support. You can, of course, adjust the parameters as you see fit.</p>"},{"location":"setup/hardware/v2.5/kit/#board-dimensions","title":"Board dimensions","text":"<p>65 mm x 100 mm</p>"},{"location":"setup/hardware/v2.5/kit/#circuit-specifications","title":"Circuit specifications","text":"Property Value Material FR4 Thickness 1.6 mm Finish Chem. gold Number of layers 2 Specific stackup sans SMD sides top Finished external copper thickness (\u00b5) 35 \u00b5m Internal copper thickness (\u00b5) without IPC Class Class 2"},{"location":"setup/hardware/v2.5/kit/#solder-mask","title":"Solder mask","text":"Property Value Solder mask TOP + BOT Mask colour green Peelable mask without"},{"location":"setup/hardware/v2.5/kit/#marking","title":"Marking","text":"Property Value Silkscreen (ink) TOP + BOT Ink colour white ROHS marking without UL marking without Date marking without"},{"location":"setup/hardware/v2.5/kit/#specific-options","title":"Specific options","text":"Property Value Space between tracks &gt; 0.15 mm Min. drill hole size &gt; 0.20 mm Blind via with out Cross blind no Burried via na Impedance control no Edge plating no Press-fit no Carbon without Via Fill without Beveled edge without Contersunk holes without Contersunk holes (qty/PCB) without Metallographic section without Gold fingers (thickness) without Gold fingers (qty/PCB) without"},{"location":"setup/hardware/v2.5/kit/#quality-assurance","title":"Quality assurance","text":"<p>To ensure the quality of the produced PCB, request data validation from the customer support team. They can provide you with image files like the following to visually verify the manufacturing files you provide.</p> <p>Warning</p> <p>This step must be requested directly after completing the order process and confirmed promptly. Otherwise, the delivery date will be postponed or the order may be put on hold completely.</p>"},{"location":"setup/hardware/v2.5/kit/#top","title":"Top","text":""},{"location":"setup/hardware/v2.5/kit/#bottom","title":"Bottom","text":""},{"location":"setup/hardware/v2.5/kit/#copper-layer-1","title":"Copper layer 1","text":""},{"location":"setup/hardware/v2.5/kit/#copper-layer-2","title":"Copper layer 2","text":""},{"location":"setup/hardware/v2.5/kit/#mechanical","title":"Mechanical","text":""},{"location":"setup/hardware/v2.5/kit/#component-placement","title":"Component placement","text":""},{"location":"setup/hardware/v2.5/kit/#assembly-of-the-thru-hole-components","title":"Assembly of the Thru-Hole components","text":""},{"location":"setup/hardware/v2.5/kit/#thru-hole-requirements","title":"Thru-Hole Requirements","text":""},{"location":"setup/hardware/v2.5/kit/#thru-hole-tools","title":"Thru-Hole tools","text":"<ul> <li>professional Soldering iron</li> <li>solder with flux</li> <li>Helping hand or Breadboard</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#thru-hole-parts","title":"Thru-Hole parts","text":"Files Description Planktoscope-Hat-bom-through-hole.csv The list of used SMD components <p>Warning</p> <p>When you solder this for the first time, take special care not to damage the board.</p> <p>Info</p> <p>To learn how to solder we recommend you the awesome Comic \"Soldering is easy\" by Mitch Altmal, Andie Nordgren and Jeff Keyzer</p>"},{"location":"setup/hardware/v2.5/kit/#soldering-of-the-stepper-motor-driver","title":"Soldering of the stepper motor driver","text":"<p>Unpack the motor driver and the connector strips and take the breadboard aside.</p> <p></p> <p>Plug the connectors with the appropriate distance to the breadboard.</p> <p>Info</p> <p>The breadboard supports you during soldering to ensure the spacing and angle of the connectors, alternatively you can also use a third hand.</p> <p></p> <p>Now position the motor driver on the connector strips of the beadboard.</p> <p>Warning</p> <p>Make sure that the larger chip labeled trimatik is positioned on the bottom of the board and the four smaller chips are positioned on the top of the board as shown in the picture.</p> <p></p> <p>Now solder all pins of the connector strip.</p> <p>Info</p> <p>Soldering is sometimes like eating with chopsticks \ud83e\udd62. It takes a bit of practice, but with time you learn how to hold the workpiece in place with one free finger and apply the solder with another, and then use the other hand to move the soldering iron to the workpiece and solder it.</p> <p>Tip</p> <p>You can also solder one pin on one side and then the opposite one to fix your workpiece, this ensures that nothing accidentally moves.</p>"},{"location":"setup/hardware/v2.5/kit/#soldering-of-the-motor-driver-sockets","title":"Soldering of the motor driver sockets","text":"<p>Now take the PlanktoScope Hat board and the female connector of the stepper motor driver and position them as shown in the picture.</p> <p></p> <p>Now put the previously soldered motor driver on the socket connector to fix it for the soldering process. Turn the board as shown in the picture and place it carefully.</p> <p></p> <p>Now solder all pins of the connector strip.</p> <p>Info</p> <p>Soldering is sometimes like eating with chopsticks \ud83e\udd62. It takes a bit of practice, but with time you learn how to hold the workpiece in place with one free finger and apply the solder with another, and then use the other hand to move the soldering iron to the workpiece and solder it.</p> <p>Tip</p> <p>You can also solder one pin on one side and then the opposite one to fix your workpiece, this ensures that nothing accidentally moves.</p> <p></p> <p>Repeat the procedure with the second motor driver. The end result should look like this.</p>"},{"location":"setup/hardware/v2.5/kit/#soldering-the-connection-sockets","title":"Soldering the connection sockets","text":"<p>Now solder the motor driver sockets, inserting the connector into the holes as shown.</p> <p></p> <p>Turn the board over and hold the loose connector while soldering it. Repeat the procedure with the second motor connector.</p> <p>Info</p> <p>Soldering is sometimes like eating with chopsticks \ud83e\udd62. It takes a bit of practice, but with time you learn how to hold the workpiece in place with one free finger and apply the solder with another, and then use the other hand to move the soldering iron to the workpiece and solder it.</p> <p></p> <p>Repeat the procedure with the power connector. The end result should look like this.</p> <p></p> <p>Repeat the procedure with the led connector. The end result should look like this.</p>"},{"location":"setup/hardware/v2.5/kit/#soldering-the-raspberry-pi-connector","title":"Soldering the Raspberry Pi connector","text":"<p>Now solder the Raspberry Pi header connector with all 20 pins.</p> <p>Warning</p> <p>Be extremely careful when soldering the connections, make sure you don't accidentally bridge several contacts because you used too much solder or have cold solder joints because you had too little solder or too little heat.</p>"},{"location":"setup/hardware/v2.5/kit/#install-and-solder-the-cooling-fan","title":"Install and solder the cooling fan","text":"<p>Install the fan with the four screws and nuts.</p> <p>Warning</p> <p>Pay attention to the running direction with the arrow marking on the side of the fan. The fan should blow on the cooler of the Raspberry Pi.</p> <p>Cut off the excess cable of the fan and leave about 6 cm.</p> <p></p> <p>Feed the fan cable through the hole provided, check if you can reach the contacts on the board without any problems and trim it further if necessary and enisolate the ends.</p> <p></p> <p>Solder the fan cables according to the marking and color codes \u26ab GND, \ud83d\udd34 VCC, \ud83d\udfe1 RPM, \ud83d\udd35 PWM.</p> <p>Note</p> <p>If your fan doesn't have a \ud83d\udd35 PWM connector, then that's not a problem, you can just leave it out.</p>"},{"location":"setup/hardware/v2.5/kit/#solder-the-display-connector","title":"Solder the display connector","text":"<p>Insert the pin headers into the holes provided, hold them in place, carefully turn the board over and solder the connector.</p> <p>Note</p> <p>If you do not use an OLED display, you do not need to solder the connector.</p>"},{"location":"setup/hardware/v2.5/kit/#solder-the-configuration-option-jumpers","title":"Solder the configuration option jumpers","text":"<p>Insert the pin headers into the holes provided, hold them in place, carefully turn the board over and solder the connector.</p> <p>Note</p> <p>If you do not use an OLED display, you do not need to solder the connector.</p>"},{"location":"setup/hardware/v2.5/kit/#you-have-finished-soldering-the-components","title":"You have finished soldering the components","text":"<p>The assembly of the thru-hole components for the planktoscope hat is now complete. The end result should look like this.</p>"},{"location":"setup/hardware/v2.5/kit/#planktoscope-hard-case","title":"PlanktoScope Hard case","text":""},{"location":"setup/hardware/v2.5/kit/#hard-case-requirements","title":"Hard case Requirements","text":""},{"location":"setup/hardware/v2.5/kit/#hard-case-tools","title":"Hard case tools","text":"<ul> <li>double sided adhesive tape</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#hard-case-parts","title":"Hard case parts","text":"<ul> <li>Hard case</li> </ul>"},{"location":"setup/hardware/v2.5/kit/#foam-preparation","title":"Foam preparation","text":"<p>Cut the foam block at the outer edge by gently tearing it apart with your fingers.</p> <p>Warning</p> <p>Be careful the foam tears easily and can not be repaired.</p> <p>Tip</p> <p>You can try in the middle of the foam block to see how the material can be cut through before you peel off with the edge.</p> <p></p> <p>Now lay a layer of two-sided adhesive tape on the upper inside edge of the case, with which we can later attach the show fabric.</p> <p></p> <p>Now insert the foam edge in to the case and glue it to the outer wall.</p> <p>Note</p> <p>Before you fix the foam, position it completely and check that it is placed flush with the edge of the case.</p>"},{"location":"setup/hardware/v2.5/kit/#kit-composition","title":"Kit composition","text":"<p>Now divide all the components for the kit, and pack it in the hard case. You can find the full list of components for the kit in the v2.5 hardware BOM (Bill of Materials). However, this BOM does not include ordering links, since such links will need to be different for each country. If you've customized the v2.5 hardware BOM for your own v2.5 PlanktoScope kit (e.g. by finding and adding part ordering links from suppliers in your country for each component), please share your custom BOM to our GitHub Discussions thread for v2.5 Localized Hardware BOMs, so that other members of our community can learn from your work!</p>"},{"location":"setup/hardware/v2.6/Hardware%20v2.6/","title":"Hardware v2.6","text":"<p>This page will help you to build the v2.6 hardware for a PlanktoScope.</p>"},{"location":"setup/hardware/v2.6/Hardware%20v2.6/#make-an-assembly-kit","title":"Make an assembly kit","text":"<p>If you do not already have an assembly kit, you will need to make a kit for yourself.</p>"},{"location":"setup/hardware/v2.6/Hardware%20v2.6/#assemble-a-planktoscope-from-a-kit","title":"Assemble a PlanktoScope from a kit","text":"<p>Once you have an assembly kit, you will need to assemble it into a PlanktoScope.</p>"},{"location":"setup/hardware/v2.6/Hardware%20v2.6/#next-steps","title":"Next steps","text":"<p>If you assembled your PlanktoScope from a kit provided by FairScope, you can proceed to our operation guide\u00a0to learn how to operate your PlanktoScope. Otherwise, you will first need to set up the PlanktoScope software on the micro-SD card of your PlanktoScope's Raspberry Pi.</p>"},{"location":"setup/hardware/v2.6/assembly/","title":"Index","text":"<p>This is a marktext document avec</p> <p></p>"},{"location":"setup/hardware/v2.6/kit/","title":"Kit Production","text":""},{"location":"setup/hardware/v2.6/kit/#kit-composition","title":"Kit Composition","text":"<p>In this section you will go through all the steps to supply and create your PlanktoScope kit. You can find a list of the components needed in the Planktoscope V2.6 BOM.</p> Files Description Planktoscope V2.6 BOM Bill Of Material for PlanktoScope <p>We tried to have the most easy-to-supply components, you still may have to adapt and research for new suppliers according to product availability and your location. If you find some local alternative please share your custom BOM to our GitHub Discussions thread for v2.6 Localized Hardware BOMs, so that other members of our community can learn from your work!</p> <p>In the following sections we will go more in detail:</p> <ul> <li>on the possibility to machined on your own the Mechanical Structure</li> <li>on the documentations and assembly steps to manufacture the PlanktoScope HAT V1.3</li> </ul>"},{"location":"setup/hardware/v2.6/kit/#mechanical-structure","title":"Mechanical Structure","text":"<p>In order to create the PlanktoScope case, parts were designed to be machined with a CNC milling machine.  The configuration of the CNC milling machine plays a crucial role in the machining process and can significantly affect the quality and efficiency of the production of a workpiece. You will have to adapt the file to your machine as every CNC milling machine gets its characteristics: feed rate and diameter adjustment according to your machine and selected end mill.  And don't forget safety, use your nicest protective glasses! :-)</p> <p></p>"},{"location":"setup/hardware/v2.6/kit/#manufacturing-file","title":"Manufacturing file","text":"<p>Here you can find the .dxf file to create the program on a CNC milling machine. If you do not have the equipment and/or the knowledge do not hesitate to contact local suppliers and fablabs. </p> <p>[!NOTE] Depending on stock availability, FairScope can also be considered as a supplier.</p> Files Description PlanktoScope_CaseV2.6.dxf PlanktoScope Case export for CNC Milling <p>This .dxf file has been designed for a thickness of the material at 7.6mm (3 inches). </p> <p>For a different thickness you\u2019ll need to adapt it.</p> <p>[!TIP] For a better assembly and if your software does not add it automaticaly use \"dog bone\" filet on every corner. </p> <p></p> <p>Photo d\u2019usinage</p>"},{"location":"setup/hardware/v2.6/kit/#reference-plate","title":"Reference Plate","text":"<p>In order to calibrate correctly your CNC machine you'll find here the .dxf file and the expected dimensions of a reference plate. If your parameters allowed you to reach these dimensions, you can report the adaptation on the [PlanktoScope_CaseV2.6.dxf] and launch the milling with more insurance.</p> Files Description Plate_F_Ref.dxf Plate F export for CNC milling <p>Drawing with quotation</p>"},{"location":"setup/hardware/v2.6/kit/#material","title":"Material","text":"<p>A great variety of material can be used to create the PlanktoScope case. You need to be sure that it can be machined easily and has great durability in harsh conditions. Here you can find 2 examples of used material: Bamboo Plywood &amp; Valchromat.</p> <ol> <li>Bamboo Plywood</li> </ol> <p>Bamboo plywood is a renewable, eco-friendly material made from layers of bamboo strips pressed together. It is known for its strength, durability, and resistance to warping, making it ideal for furniture. Bamboo plywood is lightweight, versatile, and more sustainable than traditional hardwoods, as bamboo grows quickly and requires fewer resources to cultivate. FairScope is using Bamboo Plywood for V2.6.</p> <ol> <li>Valchromat</li> </ol> <p>Valchromat is a wood-based composite material made from recycled wood fibers and colored with natural dyes. It is known for its durability, resistance to moisture and decay, and ability to be machined and finished in a similar way to solid wood.</p>"},{"location":"setup/hardware/v2.6/kit/#finnish-of-the-plates","title":"Finnish of the plates","text":"<p>After your wonderful milling process, remove all dust and remain of the milling and machining.</p> <p>Here you can use your favorite finishing according to the selected material. Be sure that it remains as environmentally friendly as possible.</p> <p>[!NOTE] For example, FairScope uses Rubio Monocoat Plus. It is a wood finishing product that is designed to provide a durable, natural-looking finish to wood surfaces. It is made from plant-based oils and pigments, which give it a transparent finish that enhances the natural beauty of the wood.</p> <p>Dry all parts and store them for the assembly process.</p> <p></p>"},{"location":"setup/hardware/v2.6/kit/#planktoscope-hat-13-pcb","title":"PlanktoScope Hat 1.3 PCB","text":"<p>Welcome to the PCB production manual for the PlanktoScope Hat 1.3!</p> <p>Photo du Hat recto verso</p> <p>A Printed Circuit Board (PCB) is a vital component of electronic devices, providing physical support and electrical connections for components. The PCB production process involves three main stages:</p> <ol> <li> <p>Design: Engineers use software (e.g., Altium, KiCad) to create the schematic and layout, optimizing component placement, trace paths, and layers.</p> </li> <li> <p>Fabrication: Copper and fiberglass sheets are processed via etching, plating, drilling, and layer stacking to form the circuit structure.</p> </li> <li> <p>Assembly: Components are placed and soldered either manually or with automated systems.</p> </li> </ol> <p>Components used on PCBs are either Thru-Hole (leads pass through the board, ideal for durability) or Surface Mount (soldered directly on the surface, suited for compact designs). The choice depends on the device\u2019s requirements.</p> <p>You will find on the following files the full documentation to ask for a quotation to your electronic prototypist.</p> <p>[!NOTE] Depending on stock availability, FairScope can also be considered as a supplier.</p>"},{"location":"setup/hardware/v2.6/kit/#manufacturing-information","title":"Manufacturing Information","text":""},{"location":"setup/hardware/v2.6/kit/#manufacturing-files","title":"Manufacturing Files","text":"Files Description Planktoscope-Hat-V1.3-gerbers.zip The exported Gerber files for PCB fabrication BOM Planktoscope HAT V1.3 The list of used SMD components PlanktoscopeHat-v1.3-fab.pdf The SMD assembly footprints PnP_PlanktoscopeHat-v1.3-fab_front.txt Pick-and-place machine instructions PlanktoscopeHat-v1.3-fab_thru-hole component (missing from PnP).jpg Additional data for ThruHole components <p>Some components are missing from the Pick and Place file. Please refer to the document titled \"PlanktoscopeHat-v1.3-fab_thru-hole component (missing from PnP).jpg\" for further details.</p> <p>We recommend asking your prototypist to assemble all the thru-hole components. In order to reduce costs and if you feel like doing it, you can assemble them manually, be really cautious of the correct solderings.</p> <p>The assembly of the Drivers TMC 5160 and the Axial Fan assembly are here proposed in parallel and DIY. No worries, everything is explain in Assembly of the Drivers TMC 5160 &amp; Assembly of the Axial Fan.  They are not included as Thru-Hole components list for the prototypiste.</p>"},{"location":"setup/hardware/v2.6/kit/#configuration","title":"Configuration","text":"<p>The following configuration parameters can be used for the production of the PCB.</p> <p>[!CAUTION] Please note that the naming may vary depending on the manufacturing company you used and are only intended to provide you with support. You can, of course, adjust the parameters as you see fit.</p>"},{"location":"setup/hardware/v2.6/kit/#board-dimensions","title":"Board dimensions","text":"<p>65 mm x 100 mm</p>"},{"location":"setup/hardware/v2.6/kit/#circuit-specifications","title":"Circuit specifications","text":"Property Value Material FR4 Thickness 1.6 mm Finish Chem. gold Number of layers 2 Specific stackup sans SMD sides top Finished external copper thickness (\u00b5) 35 \u00b5m Internal copper thickness (\u00b5) without IPC Class Class 2"},{"location":"setup/hardware/v2.6/kit/#solder-mask","title":"Solder mask","text":"Property Value Solder mask TOP + BOT Mask colour green Peelable mask without"},{"location":"setup/hardware/v2.6/kit/#marking","title":"Marking","text":"Property Value Silkscreen (ink) TOP + BOT Ink colour white ROHS marking without UL marking without Date marking without"},{"location":"setup/hardware/v2.6/kit/#specific-options","title":"Specific options","text":"Property Value Space between tracks &gt; 0.15 mm Min. drill hole size &gt; 0.20 mm Blind via with out Cross blind no Burried via na Impedance control no Edge plating no Press-fit no Carbon without Via Fill without Beveled edge without Contersunk holes without Contersunk holes (qty/PCB) without Metallographic section without Gold fingers (thickness) without Gold fingers (qty/PCB) without"},{"location":"setup/hardware/v2.6/kit/#thru-hole-components","title":"Thru-Hole Components","text":"<p>We recommend you to ask the prototypist to assemble all the  Thru-Hole components.</p> <p>As explain earlier on and in order to let you dive into a fun DIY project or pick up a new skill, why not try some soldering? In the following steps, we\u2019ll guide you through assembling the Drivers TMC 5160 (used to control the peristaltic pump and the linear stepper motors) and the Axial Fan. Let\u2019s get started!</p>"},{"location":"setup/hardware/v2.6/kit/#assembly-of-the-drivers-tmc-5160","title":"Assembly of the Drivers TMC 5160","text":""},{"location":"setup/hardware/v2.6/kit/#equipment","title":"Equipment","text":"<p>photo du materiel n\u00e9cessaire</p> <ul> <li>Professional Soldering Iron</li> <li>Solder</li> <li>Breadboard</li> <li>Utility knife</li> <li>Mutlimeter</li> </ul> <p>[!WARNING]  When you solder this for the first time, take special care not to damage the board.</p>"},{"location":"setup/hardware/v2.6/kit/#assembly-steps","title":"Assembly Steps","text":"<ol> <li>Prepare the components</li> </ol> Component Example of reference Qty Driver TMC 5160 SilentStepStick 700-TMC5160SILENTSTE 2 Connector Header Vertical 2POS .54MM 732-5315-ND 2 <p>photo des drivers, connector</p> <p>[!NOTE] Usually 2 Connectors Header of 8 position comme alongside each Driver. If it is not the case you can also buy one with many position and cut it in order to gets 48 and 22 connectors.</p> <p>Unpack the Drivers TMC 5160 and the Connector Header strips of 8 pins (x2) and 2 pins(x1), take the breadboard and warm your soldering iron.</p> <ol> <li>Cut the via bridge</li> </ol> <p> Equipment: Utility knif and multimeter</p> <p>Bridge Cut: use a razor blade or a utility knife to unable conductivity between 2 of the 4 slots as shown in the following visual:</p> <p>1 photo carte non coup\u00e9e 1 photo carte coup\u00e9e.</p> <p>Check if the two slots are correctly isolated from one another with a multimeter in conductivity mode.</p> <p>[!WARNING] This step might not follow traditional methods, but be careful to cut this bridge only to keep the PCB integrity.</p> <ol> <li>Set in position the Connector Header strips</li> </ol> <p>Plug the connectors with the appropriate distance to the breadboard.</p> <p>photo connector sur une breadboard</p> <p>The breadboard supports you during soldering to ensure the spacing and angle of the Connectors.</p> <ol> <li>Set in position the Drivers TMC 5160 PCB</li> </ol> <p>Positioned the Drivers TMC 5160 PCB on the connectors set on the breadboard.</p> <p>photo position drvier sur connector</p> <p>[!WARNING] Make sure that the larger chip labeled trimatik is positioned on the bottom of the board and the four smaller chips are positioned on the top of the board as shown in the picture.</p> <p>photo de pres d'un driver non soud\u00e9</p> <ol> <li>Soldering</li> </ol> <p>Now solder all pins of the connectors strip.</p> <p>photo en traind e souder</p> <p>[!TIP] You can also solder one pin on one side and then the opposite pin on the other side to secure your workpiece, ensuring it stays in place without shifting accidentally.</p>"},{"location":"setup/hardware/v2.6/kit/#finalisation-installation","title":"Finalisation &amp; Installation","text":"<p>Re do the operation for the second Driver TMC 5160.\u00a0</p> <p>Install it on your PlanktoScope Hat 1.3 on the designated connectors.</p> <p>Photo montage driver sur HAT</p>"},{"location":"setup/hardware/v2.6/kit/#assembly-of-the-axial-fan","title":"Assembly of the Axial Fan","text":"<p>These steps will show you how to install the axial fan on the PlanktoScope Hat 1.3 and how to create soldering bridges at the bottom of the board.</p>"},{"location":"setup/hardware/v2.6/kit/#equipment_1","title":"Equipment","text":"<ul> <li>Professional Soldering Iron</li> <li>Solder</li> <li>Classic Pliers</li> <li>Screwdriver Hex 2</li> <li>Wires Stripper pliers</li> </ul>"},{"location":"setup/hardware/v2.6/kit/#assembly-steps_1","title":"Assembly Steps","text":"<ol> <li>Prepare the components</li> </ol> Component Example of reference Qty PlanktoScope HAT 1.3 PCB 1 Axial Fan RS PRO 5 V - 40 x 40 x 10mm 789-7858 1 Screw TBHC EMBASE M3X14 INOX A2 TBHCEMB03/014A2 4 Square nuts M3x5.5x1.8 ECRCAR03/05/05A2 4 <p>Photo des composants</p> <ol> <li>Install the Axial Fan</li> </ol> <p> Equipment: use the Scredriver Hex2 and the Pliers.</p> <p>Install the fan with the four screws and nuts on the top side of the PlanktoScope HAT 1.3 PCB. </p> <p>Pay attention to the running direction with the arrow marking on the side of the Axial Fan. The Axial Fan should blow on the cooler of the Raspberry Pi (from Top to Bottom of the PlanktoScope HAT 1.3 PCB).</p> <p>Photo du positionnement du hat</p> <p> Equipment: use the wire stripper pliers</p> <p>Cut off the wires of the Axial Fan in order to leave about 6 cm. Strip the wires on 5mm.</p> <p>Photo des fils d\u00e9nud\u00e9s</p> <ol> <li>Solder the wires</li> </ol> <p>Engage the wire through the hole in the PlanktoScope HAT 1.3 PCB to reach the bottom of the board. Solder the fan cables according to the marking and color codes \u26ab GND, \ud83d\udd34 VCC.</p> <p>Photo cables soud\u00e9s</p> <ol> <li>Solder bridges</li> </ol> <p>Create soldering bridges between:</p> <ul> <li>The 2 slots of J3</li> <li>The middle slot and )D</li> <li>The middle slot and +5V</li> </ul> <p>Photo des ponts de soudure</p>"},{"location":"setup/hardware/v2.6/kit/#you-have-finished-soldering-and-assembling-the-components","title":"You have finished soldering and assembling the components!","text":"<p>Congratulation! You have finished to assemble the PlanktoScope HAT 1.3 PCB components, it should look like on the following pictures:</p> <p>photo hat termin\u00e9</p>"},{"location":"setup/hardware/v2.6/kit/#to-be-continued","title":"To be continued...","text":"<p>Now you succeed to supply and manufacture the entire BOM for the PlanktoScope V2.6. Please continue your trip with us on the next doucmentation in the assembly section.</p>"},{"location":"setup/software/","title":"PlanktoScope Software","text":"<p>This section of the PlanktoScope documentation will help you to set up the necessary software for your PlanktoScope hardware. Our documentation splits the PlanktoScope software setup process into two phases: installing the PlanktoScope software onto the micro-SD card of the Raspberry Pi computer in your PlanktoScope, and configuring the PlanktoScope software after installation.</p> <p>The PlanktoScope software is an operating system, the PlanktoScope OS, distributed as an SD card image to be run on the PlanktoScope hardware's embedded Raspberry Pi computer.</p> <p>If you are building your own PlanktoScope from your own hardware kit, you will need to install and set up the PlanktoScope OS yourself. If you received a PlanktoScope from FairScope, a working and pre-configured version of the PlanktoScope OS is already pre-installed, and you can skip the software setup process and proceed to our guide on how to operate your PlanktoScope. - but you still might wish to update your PlanktoScope to the latest release of the PlanktoScope OS, in which case you should reinstall the PlanktoScope software by going through our software setup guide below.</p> <p>In order to install the PlanktoScope software, you will first need to choose an SD card image file to use for installation, and then you will install that SD card image and perform some configuration of the software.</p>"},{"location":"setup/software/#choosing-an-sd-card-image","title":"Choosing an SD card image","text":"<p>PlanktoScope SD card image files are identified with a version number as well as a hardware configuration tag - for example, the SD card image file named <code>planktoscope-v2024.0.0+planktoscopehat.img.gz</code> is for v2020.0.0 of the PlanktoScope OS, configured to work with versions of the PlanktoScope hardware based on the custom PlanktoScope HAT (rather than the Adafruit Stepper Motor HAT). Thus, you will need to choose both a version number (e.g. v2023.9.0) and a hardware configuration (e.g. <code>planktoscopehat</code>).</p>"},{"location":"setup/software/#planktoscope-os-versions","title":"PlanktoScope OS versions","text":"<p>Because the PlanktoScope project aims to release occasional updates to the PlanktoScope OS in order to fix various software problems and make various improvements to the software, multiple versions of the PlanktoScope OS exist, and new versions will be released in the future. In general, each version of the PlanktoScope OS will be compatible with all previous officially-released versions of the PlanktoScope hardware (which are all versions listed in the hardware changelog without the description of a \"prototype\"). The PlanktoScope documentation describes the latest stable release of the PlanktoScope OS, and you should always use the latest stable release on your PlanktoScopes.</p> <p>PlanktoScope OS versions are independent of hardware versions, and (starting in 2023) use a different version numbering system from the hardware (see the Hardware setup guide for an overview of some hardware versions). Now, OS version numbers have three numeric components: the year of the release, a minor number (which is incremented for releases with new features and/or backwards-incompatible changes), and a patch number (which is incremented for minor bugfixes). You may see references to the following SD card image versions in online discussions of the PlanktoScope software:</p> <ul> <li> <p>v2.3: this release, from December 2021, was the last release of the PlanktoScope software in the old version numbering system in which the software and hardware were released together. The v2.3 OS is preinstalled on most PlanktoScopes sold by FairScope during 2023.</p> </li> <li> <p>v2023.9.0: this release, from the end of 2023, is the first software release in the new version numbering system, and it is currently the latest release of the PlanktoScope OS. The number <code>9</code> should not be interpreted as having any special meaning.</p> </li> <li> <p>v2024.0.0: this version is the first release of the PlanktoScope OS in 2024.</p> </li> <li> <p>v2024.1.0: this version will be the second release of the PlanktoScope OS in 2024.</p> </li> </ul>"},{"location":"setup/software/#hardware-configurations","title":"Hardware configurations","text":"<p>Currently, each version of the PlanktoScope OS is provided as three SD card images which support the two different types of hardware configurations supported by the PlanktoScope software:</p> <ul> <li> <p><code>adafruithat</code>: this configuration of the PlanktoScope OS is compatible with v2.1 of the PlanktoScope hardware, which uses the Adafruit Stepper Motor HAT.</p> </li> <li> <p><code>planktoscopehat</code>: this configuration of the PlanktoScope OS is compatible with all versions of the PlanktoScope hardware starting with hardware v2.3; those hardware versions use the PlanktoScope HAT instead of the Adafruit Stepper Motor HAT. This configuration requires you to select the hardware version of your PlanktoScope in the post-installation configuration process.</p> </li> <li> <p><code>fairscope-latest</code>: this configuration of the PlanktoScope OS is identical to the <code>planktoscopehat</code> configuration, except that this one sets the default settings to be for hardware version v2.6 so that you won't need to select the hardware version of your PlanktoScope in the post-installation configuration process.</p> </li> </ul> <p>If you have a PlanktoScope from FairScope, you should probably use the <code>fairscope-latest</code> SD card image; otherwise, if you have a non-FairScope PlanktoScope with hardware version v2.3 or later, you should probably use the <code>planktoscopehat</code> SD card image; otherwise, if you have a v2.1 PlanktoScope, you should probably use an <code>adafruithat</code> SD card image.</p>"},{"location":"setup/software/#installation","title":"Installation","text":"<p>After you have chosen a PlanktoScope OS SD card image for the desired OS version and hardware configuration, you should follow our standard installation guide in order to install that SD card image into your PlanktoScope. If the official PlanktoScope SD card images don't meet your requirements and you have successfully set up and used the PlanktoScope OS in the past via the standard installation process, then you may also find the non-standard installation guide useful.</p>"},{"location":"setup/software/#post-installation-configuration","title":"Post-installation configuration","text":"<p>The first time you start the PlanktoScope after installing or updating the software, you should change some settings in the PlanktoScope software in order to match the configuration of your PlanktoScope hardware. Refer to our post-installation configuration guide for details.</p>"},{"location":"setup/software/#next-steps","title":"Next steps","text":"<p>After installing the PlanktoScope software (or after ensuring that the PlanktoScope software is installed) and performing all necessary post-installation configuration, then you can proceed to our guide on how to operate your PlanktoScope.</p>"},{"location":"setup/software/config/","title":"Post-Installation Configuration","text":"<p>After installing the PlanktoScope software onto your PlanktoScope, you will need to configure the software to match your PlanktoScope hardware and your operational requirements.</p> <p>Currently, all post-installation configuration is performed in the PlanktoScope software's Node-RED dashboard. To access it, you should first open the PlanktoScope's landing page in your web browser, e.g. following the instructions in the software installation guide. Then you should click the \"Node-RED dashboard\" link at the top of the \"Browser applications\" section of the landing page.</p>"},{"location":"setup/software/config/#hardware-version","title":"Hardware Version","text":"<p>Info</p> <p>This step is only required if you are using a <code>planktoscopehat</code> SD card image; it is not needed on the <code>adafruithat</code> and <code>fairscope-latest</code> SD card images.</p> <p>The first time you start the PlanktoScope, you will need to select the hardware version of your PlanktoScope for the PlanktoScope software to match the actual configuration of your PlanktoScope hardware. To do this, open the Node-RED dashboard. You should see a homepage with a drop-down menu to select your PlanktoScope hardware version. You should select the correct version for your PlanktoScope. After you select a hardware version, the PlanktoScope will show the Node-RED dashboard's normal homepage navigation buttons; you should also wait several seconds for the PlanktoScope software to restart and load the updated hardware settings.</p>"},{"location":"setup/software/config/#next-steps","title":"Next steps","text":"<p>Now that you have configured the PlanktoScope software, you can proceed to our guide on how to operate your PlanktoScope.</p>"},{"location":"setup/software/nonstandard-install/","title":"Non-Standard Installation","text":"<p>This page provides instructions for setting up non-standard versions of the PlanktoScope OS on a PlanktoScope. The PlanktoScope project also uses this same process for creating the official PlanktoScope software SD card images used in the standard software installation process.</p>"},{"location":"setup/software/nonstandard-install/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes that:</p> <ol> <li>You have previous experience with using the command-line terminal on the Raspberry Pi OS or another Linux distribution.</li> <li>You have already confirmed that your PlanktoScope works without any problems with software installed by the standard PlanktoScope software setup process.</li> <li>You already know how to use the PlanktoScope software.</li> </ol> <p>If you have not used the PlanktoScope software before, you should first start with the standard software setup process in order to troubleshoot any problems with your PlanktoScope hardware; you can then try the non-standard setup process afterwards.</p> <p>In order to complete the non-standard setup process, you will need all of the following:</p> <ol> <li>A Raspberry Pi computer. We only test to ensure that the PlanktoScope software works on the Raspberry Pi 4; it may or may not work on the Raspberry Pi 3, and it does not yet work on the Raspberry Pi 5.</li> <li>A keyboard connected to your Raspberry Pi.</li> <li>A display connected to your Raspberry Pi.</li> <li>A micro-SD card for your Raspberry Pi.</li> <li>A way to provide internet access to your Raspberry Pi.</li> <li>A separate computer which can flash SD card images to your micro-SD card.</li> </ol>"},{"location":"setup/software/nonstandard-install/#install-and-set-up-raspberry-pi-os-on-your-raspberry-pi","title":"Install and set up Raspberry Pi OS on your Raspberry Pi","text":""},{"location":"setup/software/nonstandard-install/#download-a-raspberry-pi-os-sd-card-image","title":"Download a Raspberry Pi OS SD card image","text":"<p>The setup scripts for the PlanktoScope OS assume that you will be setting up the PlanktoScope software on a 64-bit version of the Raspberry Pi OS with Debian version 11 (bullseye), preferably the version released on 2023-03-12. You can choose any of the following three variants of that version of the Raspberry Pi OS, depending on your needs:</p> <ul> <li>\"Raspberry Pi OS with desktop\"</li> <li>\"Raspberry Pi OS with desktop and recommended software\"</li> <li>\"Raspberry Pi OS Lite\"</li> </ul> <p>The standard PlanktoScope software SD card images are built on the Raspberry Pi OS Lite image, which only provides a command-line interface, without a graphical desktop environment or web browser; because the PlanktoScope's graphical user interface must be accessed from a web browser, you might prefer to use the \"Raspberry Pi OS with desktop\" image in order to have a graphical desktop environment with a web browser. This would allow you to operate the PlanktoScope by plugging in a display, keyboard, and mouse to your Raspberry Pi; otherwise, you will have to connect to the PlanktoScope from another device over Ethernet or Wi-Fi in order access the PlanktoScope's graphical user interface.</p> <p>Warning</p> <p>The latest version of Raspberry Pi OS, with Debian version 12 (bookworm), can be downloaded from the Raspberry Pi Operating system images page, but the PlanktoScope software setup scripts do not yet work on Debian version 12; that page also has links named \"Archive\" under the download buttons where you can find older versions with Debian version 11 (bullseye) under the \"Raspberry Pi OS (Legacy)\" section; those links are the same as the links we listed above.</p>"},{"location":"setup/software/nonstandard-install/#write-the-os-image-to-an-sd-card","title":"Write the OS image to an SD card","text":"<p>Next, you will need to write your downloaded Raspberry Pi OS image file to your microSD card. Plug your microSD card into your computer; you may need to use a microSD-to-SD-card adapter, and/or an SD-card-to-USB adapter.</p> <p>To use a graphical application to write the image file to your microSD card, you can install the Raspberry Pi imager. Download the latest version of the Raspberry Pi Imager, install it, and start it. Select the Raspberry Pi OS image file (likely a <code>.img</code>, <code>.img.gz</code>, or <code>.img.xz</code> file) you just downloaded, and select the SD card you want to write the Raspberry Pi OS image to. Review your selections and click the appropriate button to begin writing the Raspberry Pi OS image to the SD card. The process should take several minutes.</p> <p>If you'd instead prefer to write the image file to your microSD card from a command-line tool, you could instead use a tool like <code>ddrescue</code> on a Debian-based system, e.g. as follows:</p> <pre><code>gunzip planktoscope-v2.3-final.img.gz\nsudo ddrescue planktoscope-v2.3-final.img /dev/mmcblk0 --force\n</code></pre> <p>Warning: be extremely careful when choosing the storage medium and ensure that you are writing the OS image file to the device which actually corresponds to the correct microSD card. Once the image has been written, data previously on the device will be lost and impossible to recover.</p>"},{"location":"setup/software/nonstandard-install/#configure-your-raspberry-pi","title":"Configure your Raspberry Pi","text":"<p>Insert the microSD card into your Raspberry Pi and connect your Pi to a screen, a mouse, and a keyboard. Double-check the connections before plugging in power.</p> <p>The first boot to the desktop may take up to 120 seconds. This is normal and is caused by the image expanding the filesystem to the whole SD card. DO NOT REBOOT before you reach the desktop.</p> <p>Eventually, the display will ask you to configure some settings for the Raspberry Pi. You will be asked to choose language settings and a keyboard layout; you should choose settings appropriate for you. The standard PlanktoScope SD card images use the <code>en_US.UTF-8</code> locale and the \"Generic 104-key PC, English (US)\" keyboard layout. The display will also ask you to set a username and password for the default user account on the Raspberry Pi; you must choose <code>pi</code> as the username, and you should choose a password you can remember. By default, the standard PlanktoScope SD card images use <code>copepode</code> as the password - so you may want to choose a different password for better security. Refer to the official Getting Started with your Raspberry Pi guide for additional details and instructions on configuring settings for the Raspberry Pi.</p> <p>Next, configure your Raspberry Pi to get internet access - your Raspberry Pi will need to download software packages from the internet as part of the installation process for the PlanktoScope OS. If you have an Ethernet cable you can plug into your Raspberry Pi, that will be the simplest option for setup, because it won't require you to edit any files or run any commands on your Raspberry Pi; when we make our official SD card images with the PlanktoScope OS, we use an Ethernet cable. Otherwise, you will need to connect your Raspberry Pi to a wifi network with internet access; you can refer to the Raspberry Pi project's network configuration guide.</p>"},{"location":"setup/software/nonstandard-install/#set-up-the-planktoscope-os","title":"Set up the PlanktoScope OS","text":""},{"location":"setup/software/nonstandard-install/#run-the-installation-script","title":"Run the installation script","text":"<p>Depending on whether you're installing the software on a PlanktoScope with the PlanktoScope HAT (which is the standard HAT on v2.3 hardware and later) or with the Adafruit Stepper Motor HAT (which is the standard HAT on v2.1 hardware), you will need to adjust the commands below. Specifically, if you're installing the software for a PlanktoScope with the Adafruit Stepper Motor HAT, you will need to replace the word <code>planktoscopehat</code> with the word <code>adafruithat</code> in any of the commands below.</p> <p>Log in to your Raspberry Pi and (if you installed a version of Raspberry Pi OS with a graphical desktop) open a terminal. Then type in one of the following commands, depending on which release channel you want to use for installation (refer to our technical reference document on release channels to understand which release channel to use):</p> StableBetaEdge <pre><code>wget -O - https://install.planktoscope.community/distro.sh \\\n  | sh -s -- -v software/stable -H planktoscopehat\n</code></pre> <p>This will install the most recent stable release of the PlanktoScope OS (or, if the most recent release of the PlanktoScope software is a stable release, to install that stable release). This is recommended for most users.</p> <pre><code>wget -O - https://install.planktoscope.community/distro.sh \\\n  | sh -s -- -v software/beta -H planktoscopehat\n</code></pre> <p>This will install the most recent beta prerelease of the PlanktoScope OS (or, if the most recent prerelease/release of the PlanktoScope software is a stable release, to install that stable release). The beta prerelease probably contains bugs which will be fixed before the next stable release.</p> <pre><code>wget -O - https://install.planktoscope.community/distro.sh \\\n  | sh -s -- -v master -H planktoscopehat\n</code></pre> <p>This will install the current unstable development version of the PlanktoScope OS. This version is likely to be broken in various ways.</p> <p>Instead of installing the latest version on the \"stable\", \"beta\", or \"edge\" release channel, you can also install a specific tagged release or pre-release of the PlanktoScope software. For example, to install the v2024.0.0-alpha.1 pre-release of the PlanktoScope software, you would run the following command:</p> <pre><code>wget -O - https://install.planktoscope.community/distro.sh \\\n  | sh -s -- -t tag -v v2024.0.0-alpha.1 -H planktoscopehat\n</code></pre> <p>You can also choose to install the PlanktoScope software from some other repository on GitHub instead of github.com/PlanktoScope/PlanktoScope, by using the <code>-r</code> command-line option; for more information including usage examples, you can refer to the reference page for the installation script's command-line parameters, and/or you can get usage instructions by running the following command:</p> <pre><code>wget -O - https://install.planktoscope.community/distro.sh \\\n  | sh -s -- --help\n</code></pre>"},{"location":"setup/software/nonstandard-install/#wait-for-installation-to-finish","title":"Wait for installation to finish","text":"<p>The installation process will take a long time (around 15 - 30 minutes, depending on the speed of your internet connection and your microSD card) to finish.</p> <p>If an error occurs during this setup process, you will need to wipe the Raspberry Pi's microSD card, flash the Raspberry Pi OS image onto it again, and try running the setup steps again. Otherwise, you will eventually see a message reporting that the setup script finished setting up the PlanktoScope application environment. Afterwards, you will need to restart the Raspberry Pi, e.g. with the following command:</p> <pre><code>sudo reboot now\n</code></pre> <p>This step is necessary to finish the PlanktoScope software setup process.</p> <p>After your PlanktoScope reboots, the display connected to your PlanktoScope should show a login prompt with the format <code>pkscope-{machine-name} login:</code> , where <code>{machine-name}</code> is substituted with your PlanktoScope's machine name. For example, if the login prompt says <code>pkscope-chain-list-27764 login:</code>, then the PlanktoScope's machine name is <code>chain-list-27764</code>. You should write a note somewhere with this machine name, for future reference.</p> <p>Info</p> <p>Recording the PlanktoScope's machine name in a note (or on your PlanktoScope) will be especially important if you might have multiple PlanktoScopes in the future or if you might need to access the PlanktoScope via an indirect connection (e.g. from a device connected to the same network router as the PlanktoScope). This is because the machine name is used for naming the Wi-Fi hotspot made by your PlanktoScope and for generating a machine-specific URL for accessing your PlanktoScope.</p> <p>Tip</p> <p>If you are unhappy with the auto-generated machine name, you can override it with a custom name. Refer to our instructions for changing the machine name in our networking operations guide, but first see the notes at the top of that guide.</p>"},{"location":"setup/software/nonstandard-install/#connect-to-the-planktoscope","title":"Connect to the PlanktoScope","text":"<p>Afterwards, your PlanktoScope's Raspberry Pi will either connect to a Wi-Fi network (if you had previously configured it to connect to a Wi-Fi network) or make its own Wi-Fi hotspot, whose name has format <code>pkscope-{machine-name}</code> (where <code>{machine-name}</code> should be substituted with your PlanktoScope's specific machine name, which you should have recorded in a note in the previous step), and whose password is <code>copepode</code>.</p> <p>You will only be able to access the PlanktoScope's graphical user interface by plugging in a display and keyboard and mouse to the Raspberry Pi if you had previously used a \"Raspberry Pi OS with desktop\" or \"Raspberry Pi OS with desktop and recommended software\" SD card image as the base for the PlanktoScope software's setup script. In that case, you can open a web browser window on the Raspberry Pi and open http://localhost or any of the URLs listed in the standard installation guide. Otherwise:</p> <ul> <li> <p>If you plan to connect another device directly to your PlanktoScope via its Wi-Fi hotspot or via an Ethernet cable, follow the same instructions for connecting to your PlanktoScope as in the standard installation guide.</p> </li> <li> <p>If you had previously configured your PlanktoScope's Raspberry Pi to connect to a Wi-Fi network, it will not make its own Wi-Fi hotspot. On the Wi-Fi network it's connected to, it will only be accessible by its machine-specific mDNS URL,  which has the format <code>http://pkscope-{machine-name}.local</code>, where <code>{machine-name}</code> should be replaced by your PlanktoScope's specific machine name (which you should have recorded in the previous step).</p> </li> </ul>"},{"location":"setup/software/nonstandard-install/#next-steps","title":"Next steps","text":"<p>Now that you have installed the software and accessed the PlanktoScope software's user interface from your web browser, you should proceed to our guide for configuring your PlanktoScope.</p>"},{"location":"setup/software/standard-install/","title":"Standard Installation","text":"<p>This page provides instructions for installing the most recent standard version of the PlanktoScope OS on a PlanktoScope.</p>"},{"location":"setup/software/standard-install/#set-up-the-sd-card","title":"Set up the SD card","text":"<p>If you purchased a fully-assembled PlanktoScope or a DIY-assembly PlanktoScope kit from FairScope which includes a microSD card, then the SD card is already set up with the PlanktoScope OS, and you should skip to the next step.</p>"},{"location":"setup/software/standard-install/#prerequisites","title":"Prerequisites","text":"<p>In order to complete this step, you will need all of the following:</p> <ol> <li>A microSD card for your Raspberry Pi.</li> <li>A separate computer which can flash SD card images to your microSD card.</li> </ol>"},{"location":"setup/software/standard-install/#download-the-planktoscope-software-sd-card-image","title":"Download the PlanktoScope software SD card image","text":"<p>For ease of setup, we distribute the PlanktoScope OS as SD card image files. You can download the latest release from the stable releases page for the PlanktoScope project on GitHub (if you are experienced with the PlanktoScope software, you can also try the latest alpha or beta testing releases on the full releases page). Each released version of the PlanktoScope OS has downloadable SD card images under the \"Assets\" dropdown, which has multiple SD card image files corresponding to different types of PlanktoScope hardware; for information about how to select the appropriate SD card image for your PlanktoScope hardware, refer to the \"Hardware configurations\" section of the software setup overview.</p>"},{"location":"setup/software/standard-install/#write-the-image-to-the-sd-card","title":"Write the image to the SD card","text":"<p>To write the image file to your microSD card:</p> <ol> <li>Download, install, and start the latest version of the Raspberry Pi Imager.</li> <li>Plug your microSD card into your computer; you may need to use a microSD-to-SD-card adapter, and/or an SD-card-to-USB adapter.</li> <li>Press the \"Choose Device\" button. Select \"No filtering\" from the menu. It actually doesn't matter what you select here.</li> <li>Press the \"Choose OS\" button. Select \"Use custom\" from the menu (this is why it doesn't matter what you selected in the \"Choose Device\" menu). In the file dialog, open the PlanktoScope SD card image file you downloaded in the previous section of this setup guide.</li> <li>Press the \"Choose Storage\" button. Select your SD card from the menu.</li> <li>Press the \"Next\" button. A pop-up dialog should appear asking if you would like to customize the OS. You should probably press the \"No\" button unless you are already experienced with the PlanktoScope software, because most of the settings inside don't matter to typical users of the PlanktoScope software, and because it's possible to break the software with incorrect settings.</li> <li>A pop-up dialog should appear asking you to confirm whether you selected the correct SD card and want to wipe all data on the SD card in order to write the PlanktoScope SD card image to your SD card. If you are ready, press the \"Yes\" button.</li> <li>The Raspberry Pi Imager will begin overwriting your SD card with the PlanktoScope SD card image. This will take a while to finish.</li> </ol> <p>Once flashing is complete, unmount the SD card and remove it from the computer.</p>"},{"location":"setup/software/standard-install/#insert-the-sd-card-into-the-planktoscope","title":"Insert the SD card into the PlanktoScope","text":"<p>Insert the microSD card into the Raspberry Pi computer installed in your PlanktoScope.</p>"},{"location":"setup/software/standard-install/#connect-to-the-planktoscope","title":"Connect to the PlanktoScope","text":"<p>Power on your PlanktoScope, and wait for it to start up. Note that it may take a few minutes to start up, depending on the speed of your SD card. Once it has finished starting up, its internal Raspberry Pi computer should create a new isolated Wi-Fi network (which we call the PlanktoScope's Wi-Fi hotspot) whose name starts with the word <code>pkscope</code> followed by your PlanktoScope's machine name, a unique randomly-generated name; for example, if your PlanktoScope's machine name is <code>clear-request-6329</code>, then the Wi-Fi network will be named <code>pkscope-clear-request-6329</code>. The password of this Wi-Fi network is <code>copepode</code>.</p> <p>Info</p> <p>You will not be able to access the PlanktoScope's graphical user interface by plugging in a display to the Raspberry Pi. This is because the SD card image we provide does not include a graphical desktop or web browser, in order to keep the SD card image file smaller and to keep the PlanktoScope's Raspberry Pi running more efficiently.</p> <p>Once your PlanktoScope has created its Wi-Fi hotspot, you can connect another device (e.g. a phone or a computer) directly to the PlanktoScope - either through its Wi-Fi hotspot or through an Ethernet cable directly to the PlanktoScope's Ethernet port. Afterwards, you can open a web browser on the device to access the PlanktoScope's graphical user interface at one of the following URLs (try them in the following order, and just use the first one which works):</p> <ul> <li>http://planktoscope.local (this should work unless you're on a device or web browser without mDNS support; notably, older versions of Android did not support mDNS, and web browsers installed on Linux computers via Flatpak do not yet support mDNS)</li> <li>http://pkscope.local (this should work unless you're on a device or web browser without mDNS support)</li> <li>http://home.pkscope (this should work unless your web browser is configured to use a Private DNS provider)</li> <li>http://192.168.4.1 (this should always work on devices connected directly to the PlanktoScope, especially for devices connected directly to the PlanktoScope's Wi-Fi hotspot)</li> <li>http://192.168.5.1 (this should always work on devices connected directly to the PlanktoScope, especially for devices connected directly to the PlanktoScope's Ethernet port)</li> </ul> <p>Warning</p> <p>The URLs listed above will only work when you are connecting directly to the PlanktoScope through its Wi-Fi hotspot or through an Ethernet cable. If you use one of those URLs, the landing page (shown in the screenshot below) will also display a link with a different URL (a machine-specific URL) to try using; you may want to try that link to see if it works, and you may want to write it down or bookmark it for future reference. That machine-specific URL, which has format <code>http://pkscope-{machine-name}.local</code> (e.g. <code>http://pkscope-clear-request-6329.local</code>) should work even if your device is connected indirectly to the PlanktoScope (e.g. via a Wi-Fi router which is providing internet access to the PlanktoScope).</p> <p>For more information, refer to the operation guide.</p> <p>The web browser should show a landing page with some information about your PlanktoScope and with a list of links, including links to apps running on your PlanktoScope. It should look something like the following screenshot, though every instance of \"<code>clear-request-6329</code>\" will be replaced with a different name specific to your machine:</p> <p></p>"},{"location":"setup/software/standard-install/#next-steps","title":"Next steps","text":"<p>Now that you have installed the software and accessed the PlanktoScope software's user interface from your web browser, you should proceed to our guide for configuring your PlanktoScope.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>We don't yet have complete documentation to help you troubleshoot problems with your PlanktoScope! For now, you should sign up to join the PlanktoScope community on Slack, and ask for help in the <code>#3-start-testing</code> channel on Slack; or, if you have a GitHub account, you can start a new discussion in the PlanktoScope GitHub repository's \"Help/Support\" forum. Below, we provide some guides for troubleshooting particular situations:</p>"},{"location":"troubleshooting/#error-with-camera-or-python-backend","title":"Error with camera or Python backend","text":"<p>A common (and very broad) category of problems results in an error message like <code>If you see this, there probably is an error either with your camera or with the python service. Please try restarting your machine.</code> being displayed instead of a camera preview in the Node-RED dashboard. This error message can be caused by a variety of potential failure modes such as a disconnected camera or a crash in the Python hardware controller program (which controls the PlanktoScope's camera as well as the pump, focusing motors, etc.). If you see this problem, we recommend first checking whether the Python hardware controller is responsive to button-presses in the Node-RED dashboard for moving the pump and/or the focusing stepper motors; if so, then there is likely a problem specifically with the camera hardware or the camera preview. Otherwise, it is very possible that the Python hardware controller has crashed for other reasons. Troubleshooting this situation will require you to download the Python hardware controller's error logs so that you can attach the logs with a request for help on the PlanktoScope Slack community.</p> <p>To download the Python hardware controller's logs, please use your web browser to navigate to your PlanktoScope's landing page and then click on the \"Backend logs file manager\" link:</p> <p> This will open a new tab with a file browser; please click on the \"control\" folder, which collects the log files of the Python hardware controller:</p> <p> Then click on the download button in the upper-right toolbar:</p> <p> This will open a dialogue to select the archive format for downloading the logs. You can click the \".zip\" button:</p> <p> This will open a file saving dialogue to download a ZIP archive of the Python hardware controller's logs. Then you can upload this as an attachment to a message on Slack or GitHub asking for help with troubleshooting your problem.</p>"}]}